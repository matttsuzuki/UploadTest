
BoningTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fc8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08004174  08004174  00014174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004584  08004584  00032c10  2**0
                  CONTENTS
  4 .ARM          00000008  08004584  08004584  00014584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800458c  0800458c  00032c10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800458c  0800458c  0001458c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004590  08004590  00014590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00012c10  20000000  08004594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20012c10  080171a4  00032c10  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012d30  080171a4  00032d30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032c10  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b29c  00000000  00000000  00032c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cfa  00000000  00000000  0003dedc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000998  00000000  00000000  0003fbd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000880  00000000  00000000  00040570  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023dbd  00000000  00000000  00040df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009fe1  00000000  00000000  00064bad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3870  00000000  00000000  0006eb8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001423fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002508  00000000  00000000  0014247c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20012c10 	.word	0x20012c10
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800415c 	.word	0x0800415c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20012c14 	.word	0x20012c14
 80001e8:	0800415c 	.word	0x0800415c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]
 80004f6:	4b2c      	ldr	r3, [pc, #176]	; (80005a8 <MX_GPIO_Init+0xbc>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a2b      	ldr	r2, [pc, #172]	; (80005a8 <MX_GPIO_Init+0xbc>)
 80004fc:	f043 0320 	orr.w	r3, r3, #32
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <MX_GPIO_Init+0xbc>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0320 	and.w	r3, r3, #32
 800050a:	617b      	str	r3, [r7, #20]
 800050c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	613b      	str	r3, [r7, #16]
 8000512:	4b25      	ldr	r3, [pc, #148]	; (80005a8 <MX_GPIO_Init+0xbc>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a24      	ldr	r2, [pc, #144]	; (80005a8 <MX_GPIO_Init+0xbc>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b22      	ldr	r3, [pc, #136]	; (80005a8 <MX_GPIO_Init+0xbc>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <MX_GPIO_Init+0xbc>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a1d      	ldr	r2, [pc, #116]	; (80005a8 <MX_GPIO_Init+0xbc>)
 8000534:	f043 0302 	orr.w	r3, r3, #2
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <MX_GPIO_Init+0xbc>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0302 	and.w	r3, r3, #2
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <MX_GPIO_Init+0xbc>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a16      	ldr	r2, [pc, #88]	; (80005a8 <MX_GPIO_Init+0xbc>)
 8000550:	f043 0310 	orr.w	r3, r3, #16
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <MX_GPIO_Init+0xbc>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0310 	and.w	r3, r3, #16
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <MX_GPIO_Init+0xbc>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a0f      	ldr	r2, [pc, #60]	; (80005a8 <MX_GPIO_Init+0xbc>)
 800056c:	f043 0308 	orr.w	r3, r3, #8
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
 8000572:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <MX_GPIO_Init+0xbc>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f003 0308 	and.w	r3, r3, #8
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	603b      	str	r3, [r7, #0]
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <MX_GPIO_Init+0xbc>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a08      	ldr	r2, [pc, #32]	; (80005a8 <MX_GPIO_Init+0xbc>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_GPIO_Init+0xbc>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	683b      	ldr	r3, [r7, #0]

}
 800059a:	bf00      	nop
 800059c:	371c      	adds	r7, #28
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	40023800 	.word	0x40023800

080005ac <LCD_SetColorLtdc>:

void LCD_SetColor(uint16_t c) {
	COLOR = c;
}

void LCD_SetColorLtdc(uint8_t c) {
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	COLOR_LTDC = c;
 80005b6:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <LCD_SetColorLtdc+0x1c>)
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	7013      	strb	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	20000000 	.word	0x20000000

080005cc <LCD_DrawBBig>:
			}
		}
	}
}

void LCD_DrawBBig(uint16_t x0, uint16_t y0) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b088      	sub	sp, #32
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	460a      	mov	r2, r1
 80005d6:	80fb      	strh	r3, [r7, #6]
 80005d8:	4613      	mov	r3, r2
 80005da:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80005dc:	230f      	movs	r3, #15
 80005de:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
 80005e4:	e04b      	b.n	800067e <LCD_DrawBBig+0xb2>
		for(int dx = 0; dx <=width; dx++){
 80005e6:	2300      	movs	r3, #0
 80005e8:	61bb      	str	r3, [r7, #24]
 80005ea:	e041      	b.n	8000670 <LCD_DrawBBig+0xa4>
			if ((dx <= 3) || (dy >= 6 && dy <= 9 && dx <= 11) || (dy <= 3 && dx <= 11) || (dy >= 12 && dx <= 11)|| (dx >= 12 && (dy >= 3 && dy <= 6)) || ((dx >= 12) && (dy >= 9 && dy <= 12))) {
 80005ec:	69bb      	ldr	r3, [r7, #24]
 80005ee:	2b03      	cmp	r3, #3
 80005f0:	dd26      	ble.n	8000640 <LCD_DrawBBig+0x74>
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	2b05      	cmp	r3, #5
 80005f6:	dd05      	ble.n	8000604 <LCD_DrawBBig+0x38>
 80005f8:	69fb      	ldr	r3, [r7, #28]
 80005fa:	2b09      	cmp	r3, #9
 80005fc:	dc02      	bgt.n	8000604 <LCD_DrawBBig+0x38>
 80005fe:	69bb      	ldr	r3, [r7, #24]
 8000600:	2b0b      	cmp	r3, #11
 8000602:	dd1d      	ble.n	8000640 <LCD_DrawBBig+0x74>
 8000604:	69fb      	ldr	r3, [r7, #28]
 8000606:	2b03      	cmp	r3, #3
 8000608:	dc02      	bgt.n	8000610 <LCD_DrawBBig+0x44>
 800060a:	69bb      	ldr	r3, [r7, #24]
 800060c:	2b0b      	cmp	r3, #11
 800060e:	dd17      	ble.n	8000640 <LCD_DrawBBig+0x74>
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	2b0b      	cmp	r3, #11
 8000614:	dd02      	ble.n	800061c <LCD_DrawBBig+0x50>
 8000616:	69bb      	ldr	r3, [r7, #24]
 8000618:	2b0b      	cmp	r3, #11
 800061a:	dd11      	ble.n	8000640 <LCD_DrawBBig+0x74>
 800061c:	69bb      	ldr	r3, [r7, #24]
 800061e:	2b0b      	cmp	r3, #11
 8000620:	dd05      	ble.n	800062e <LCD_DrawBBig+0x62>
 8000622:	69fb      	ldr	r3, [r7, #28]
 8000624:	2b02      	cmp	r3, #2
 8000626:	dd02      	ble.n	800062e <LCD_DrawBBig+0x62>
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	2b06      	cmp	r3, #6
 800062c:	dd08      	ble.n	8000640 <LCD_DrawBBig+0x74>
 800062e:	69bb      	ldr	r3, [r7, #24]
 8000630:	2b0b      	cmp	r3, #11
 8000632:	dd1a      	ble.n	800066a <LCD_DrawBBig+0x9e>
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	2b08      	cmp	r3, #8
 8000638:	dd17      	ble.n	800066a <LCD_DrawBBig+0x9e>
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	2b0c      	cmp	r3, #12
 800063e:	dc14      	bgt.n	800066a <LCD_DrawBBig+0x9e>
				int y = y0 + dy;
 8000640:	88bb      	ldrh	r3, [r7, #4]
 8000642:	69fa      	ldr	r2, [r7, #28]
 8000644:	4413      	add	r3, r2
 8000646:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	69ba      	ldr	r2, [r7, #24]
 800064c:	4413      	add	r3, r2
 800064e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <LCD_DrawBBig+0xc4>)
 8000652:	7818      	ldrb	r0, [r3, #0]
 8000654:	693a      	ldr	r2, [r7, #16]
 8000656:	4613      	mov	r3, r2
 8000658:	011b      	lsls	r3, r3, #4
 800065a:	1a9b      	subs	r3, r3, r2
 800065c:	011b      	lsls	r3, r3, #4
 800065e:	461a      	mov	r2, r3
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	4413      	add	r3, r2
 8000664:	4619      	mov	r1, r3
 8000666:	f000 ff6b 	bl	8001540 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800066a:	69bb      	ldr	r3, [r7, #24]
 800066c:	3301      	adds	r3, #1
 800066e:	61bb      	str	r3, [r7, #24]
 8000670:	7dfb      	ldrb	r3, [r7, #23]
 8000672:	69ba      	ldr	r2, [r7, #24]
 8000674:	429a      	cmp	r2, r3
 8000676:	ddb9      	ble.n	80005ec <LCD_DrawBBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000678:	69fb      	ldr	r3, [r7, #28]
 800067a:	3301      	adds	r3, #1
 800067c:	61fb      	str	r3, [r7, #28]
 800067e:	7dfb      	ldrb	r3, [r7, #23]
 8000680:	69fa      	ldr	r2, [r7, #28]
 8000682:	429a      	cmp	r2, r3
 8000684:	ddaf      	ble.n	80005e6 <LCD_DrawBBig+0x1a>
			}
		}
	}
}
 8000686:	bf00      	nop
 8000688:	3720      	adds	r7, #32
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000000 	.word	0x20000000

08000694 <LCD_DrawCBig>:

void LCD_DrawCBig(uint16_t x0, uint16_t y0) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	460a      	mov	r2, r1
 800069e:	80fb      	strh	r3, [r7, #6]
 80006a0:	4613      	mov	r3, r2
 80006a2:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80006a4:	230f      	movs	r3, #15
 80006a6:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80006a8:	2300      	movs	r3, #0
 80006aa:	61fb      	str	r3, [r7, #28]
 80006ac:	e02a      	b.n	8000704 <LCD_DrawCBig+0x70>
		for(int dx = 0; dx <=width; dx++){
 80006ae:	2300      	movs	r3, #0
 80006b0:	61bb      	str	r3, [r7, #24]
 80006b2:	e020      	b.n	80006f6 <LCD_DrawCBig+0x62>
			if ((dx <= 3) || (dy <= 3) || (dy >= 12)) {
 80006b4:	69bb      	ldr	r3, [r7, #24]
 80006b6:	2b03      	cmp	r3, #3
 80006b8:	dd05      	ble.n	80006c6 <LCD_DrawCBig+0x32>
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	2b03      	cmp	r3, #3
 80006be:	dd02      	ble.n	80006c6 <LCD_DrawCBig+0x32>
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	2b0b      	cmp	r3, #11
 80006c4:	dd14      	ble.n	80006f0 <LCD_DrawCBig+0x5c>
				int y = y0 + dy;
 80006c6:	88bb      	ldrh	r3, [r7, #4]
 80006c8:	69fa      	ldr	r2, [r7, #28]
 80006ca:	4413      	add	r3, r2
 80006cc:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80006ce:	88fb      	ldrh	r3, [r7, #6]
 80006d0:	69ba      	ldr	r2, [r7, #24]
 80006d2:	4413      	add	r3, r2
 80006d4:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <LCD_DrawCBig+0x80>)
 80006d8:	7818      	ldrb	r0, [r3, #0]
 80006da:	693a      	ldr	r2, [r7, #16]
 80006dc:	4613      	mov	r3, r2
 80006de:	011b      	lsls	r3, r3, #4
 80006e0:	1a9b      	subs	r3, r3, r2
 80006e2:	011b      	lsls	r3, r3, #4
 80006e4:	461a      	mov	r2, r3
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	4413      	add	r3, r2
 80006ea:	4619      	mov	r1, r3
 80006ec:	f000 ff28 	bl	8001540 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	3301      	adds	r3, #1
 80006f4:	61bb      	str	r3, [r7, #24]
 80006f6:	7dfb      	ldrb	r3, [r7, #23]
 80006f8:	69ba      	ldr	r2, [r7, #24]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	ddda      	ble.n	80006b4 <LCD_DrawCBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3301      	adds	r3, #1
 8000702:	61fb      	str	r3, [r7, #28]
 8000704:	7dfb      	ldrb	r3, [r7, #23]
 8000706:	69fa      	ldr	r2, [r7, #28]
 8000708:	429a      	cmp	r2, r3
 800070a:	ddd0      	ble.n	80006ae <LCD_DrawCBig+0x1a>
			}
		}
	}
}
 800070c:	bf00      	nop
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000000 	.word	0x20000000

08000718 <LCD_DrawDBig>:

void LCD_DrawDBig(uint16_t x0, uint16_t y0) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	460a      	mov	r2, r1
 8000722:	80fb      	strh	r3, [r7, #6]
 8000724:	4613      	mov	r3, r2
 8000726:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000728:	230f      	movs	r3, #15
 800072a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
 8000730:	e039      	b.n	80007a6 <LCD_DrawDBig+0x8e>
		for(int dx = 0; dx <=width; dx++){
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
 8000736:	e02f      	b.n	8000798 <LCD_DrawDBig+0x80>
			if ((dx <= 3) || (dy <= 3 && dx <= 11) || (dy >= 12 && dx <= 11) || (dx >= 12 && (dy >= 4 && dy <= 11))) {
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	2b03      	cmp	r3, #3
 800073c:	dd14      	ble.n	8000768 <LCD_DrawDBig+0x50>
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	2b03      	cmp	r3, #3
 8000742:	dc02      	bgt.n	800074a <LCD_DrawDBig+0x32>
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	2b0b      	cmp	r3, #11
 8000748:	dd0e      	ble.n	8000768 <LCD_DrawDBig+0x50>
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	2b0b      	cmp	r3, #11
 800074e:	dd02      	ble.n	8000756 <LCD_DrawDBig+0x3e>
 8000750:	69bb      	ldr	r3, [r7, #24]
 8000752:	2b0b      	cmp	r3, #11
 8000754:	dd08      	ble.n	8000768 <LCD_DrawDBig+0x50>
 8000756:	69bb      	ldr	r3, [r7, #24]
 8000758:	2b0b      	cmp	r3, #11
 800075a:	dd1a      	ble.n	8000792 <LCD_DrawDBig+0x7a>
 800075c:	69fb      	ldr	r3, [r7, #28]
 800075e:	2b03      	cmp	r3, #3
 8000760:	dd17      	ble.n	8000792 <LCD_DrawDBig+0x7a>
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	2b0b      	cmp	r3, #11
 8000766:	dc14      	bgt.n	8000792 <LCD_DrawDBig+0x7a>
				int y = y0 + dy;
 8000768:	88bb      	ldrh	r3, [r7, #4]
 800076a:	69fa      	ldr	r2, [r7, #28]
 800076c:	4413      	add	r3, r2
 800076e:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000770:	88fb      	ldrh	r3, [r7, #6]
 8000772:	69ba      	ldr	r2, [r7, #24]
 8000774:	4413      	add	r3, r2
 8000776:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <LCD_DrawDBig+0xa0>)
 800077a:	7818      	ldrb	r0, [r3, #0]
 800077c:	693a      	ldr	r2, [r7, #16]
 800077e:	4613      	mov	r3, r2
 8000780:	011b      	lsls	r3, r3, #4
 8000782:	1a9b      	subs	r3, r3, r2
 8000784:	011b      	lsls	r3, r3, #4
 8000786:	461a      	mov	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	4413      	add	r3, r2
 800078c:	4619      	mov	r1, r3
 800078e:	f000 fed7 	bl	8001540 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	3301      	adds	r3, #1
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	7dfb      	ldrb	r3, [r7, #23]
 800079a:	69ba      	ldr	r2, [r7, #24]
 800079c:	429a      	cmp	r2, r3
 800079e:	ddcb      	ble.n	8000738 <LCD_DrawDBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	3301      	adds	r3, #1
 80007a4:	61fb      	str	r3, [r7, #28]
 80007a6:	7dfb      	ldrb	r3, [r7, #23]
 80007a8:	69fa      	ldr	r2, [r7, #28]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	ddc1      	ble.n	8000732 <LCD_DrawDBig+0x1a>
			}
		}
	}
}
 80007ae:	bf00      	nop
 80007b0:	3720      	adds	r7, #32
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000000 	.word	0x20000000

080007bc <LCD_DrawEBig>:

void LCD_DrawEBig(uint16_t x0, uint16_t y0) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	460a      	mov	r2, r1
 80007c6:	80fb      	strh	r3, [r7, #6]
 80007c8:	4613      	mov	r3, r2
 80007ca:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80007cc:	230f      	movs	r3, #15
 80007ce:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
 80007d4:	e036      	b.n	8000844 <LCD_DrawEBig+0x88>
		for(int dx = 0; dx <=width; dx++){
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
 80007da:	e02c      	b.n	8000836 <LCD_DrawEBig+0x7a>
			if ((dx < 4) || (dy <= 3 || dy == 6 || dy == 7 || dy == 8 || dy == 9|| dy >= 12)) {
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	2b03      	cmp	r3, #3
 80007e0:	dd11      	ble.n	8000806 <LCD_DrawEBig+0x4a>
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	2b03      	cmp	r3, #3
 80007e6:	dd0e      	ble.n	8000806 <LCD_DrawEBig+0x4a>
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	2b06      	cmp	r3, #6
 80007ec:	d00b      	beq.n	8000806 <LCD_DrawEBig+0x4a>
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	2b07      	cmp	r3, #7
 80007f2:	d008      	beq.n	8000806 <LCD_DrawEBig+0x4a>
 80007f4:	69fb      	ldr	r3, [r7, #28]
 80007f6:	2b08      	cmp	r3, #8
 80007f8:	d005      	beq.n	8000806 <LCD_DrawEBig+0x4a>
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	2b09      	cmp	r3, #9
 80007fe:	d002      	beq.n	8000806 <LCD_DrawEBig+0x4a>
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	2b0b      	cmp	r3, #11
 8000804:	dd14      	ble.n	8000830 <LCD_DrawEBig+0x74>
				int y = y0 + dy;
 8000806:	88bb      	ldrh	r3, [r7, #4]
 8000808:	69fa      	ldr	r2, [r7, #28]
 800080a:	4413      	add	r3, r2
 800080c:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	69ba      	ldr	r2, [r7, #24]
 8000812:	4413      	add	r3, r2
 8000814:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <LCD_DrawEBig+0x98>)
 8000818:	7818      	ldrb	r0, [r3, #0]
 800081a:	693a      	ldr	r2, [r7, #16]
 800081c:	4613      	mov	r3, r2
 800081e:	011b      	lsls	r3, r3, #4
 8000820:	1a9b      	subs	r3, r3, r2
 8000822:	011b      	lsls	r3, r3, #4
 8000824:	461a      	mov	r2, r3
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	4413      	add	r3, r2
 800082a:	4619      	mov	r1, r3
 800082c:	f000 fe88 	bl	8001540 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	3301      	adds	r3, #1
 8000834:	61bb      	str	r3, [r7, #24]
 8000836:	7dfb      	ldrb	r3, [r7, #23]
 8000838:	69ba      	ldr	r2, [r7, #24]
 800083a:	429a      	cmp	r2, r3
 800083c:	ddce      	ble.n	80007dc <LCD_DrawEBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	3301      	adds	r3, #1
 8000842:	61fb      	str	r3, [r7, #28]
 8000844:	7dfb      	ldrb	r3, [r7, #23]
 8000846:	69fa      	ldr	r2, [r7, #28]
 8000848:	429a      	cmp	r2, r3
 800084a:	ddc4      	ble.n	80007d6 <LCD_DrawEBig+0x1a>
			}
		}
	}
}
 800084c:	bf00      	nop
 800084e:	3720      	adds	r7, #32
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000000 	.word	0x20000000

08000858 <LCD_DrawHBig>:

void LCD_DrawHBig(uint16_t x0, uint16_t y0) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	460a      	mov	r2, r1
 8000862:	80fb      	strh	r3, [r7, #6]
 8000864:	4613      	mov	r3, r2
 8000866:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000868:	230f      	movs	r3, #15
 800086a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
 8000870:	e033      	b.n	80008da <LCD_DrawHBig+0x82>
		for(int dx = 0; dx <=width; dx++){
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
 8000876:	e029      	b.n	80008cc <LCD_DrawHBig+0x74>
			if ((dx <= 3 || dx >= 12) || (dy == 6 || dy == 7 || dy == 8 || dy == 9)) {
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	2b03      	cmp	r3, #3
 800087c:	dd0e      	ble.n	800089c <LCD_DrawHBig+0x44>
 800087e:	69bb      	ldr	r3, [r7, #24]
 8000880:	2b0b      	cmp	r3, #11
 8000882:	dc0b      	bgt.n	800089c <LCD_DrawHBig+0x44>
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	2b06      	cmp	r3, #6
 8000888:	d008      	beq.n	800089c <LCD_DrawHBig+0x44>
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	2b07      	cmp	r3, #7
 800088e:	d005      	beq.n	800089c <LCD_DrawHBig+0x44>
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	2b08      	cmp	r3, #8
 8000894:	d002      	beq.n	800089c <LCD_DrawHBig+0x44>
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	2b09      	cmp	r3, #9
 800089a:	d114      	bne.n	80008c6 <LCD_DrawHBig+0x6e>
				int y = y0 + dy;
 800089c:	88bb      	ldrh	r3, [r7, #4]
 800089e:	69fa      	ldr	r2, [r7, #28]
 80008a0:	4413      	add	r3, r2
 80008a2:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80008a4:	88fb      	ldrh	r3, [r7, #6]
 80008a6:	69ba      	ldr	r2, [r7, #24]
 80008a8:	4413      	add	r3, r2
 80008aa:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <LCD_DrawHBig+0x94>)
 80008ae:	7818      	ldrb	r0, [r3, #0]
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	4613      	mov	r3, r2
 80008b4:	011b      	lsls	r3, r3, #4
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	011b      	lsls	r3, r3, #4
 80008ba:	461a      	mov	r2, r3
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4413      	add	r3, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	f000 fe3d 	bl	8001540 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80008c6:	69bb      	ldr	r3, [r7, #24]
 80008c8:	3301      	adds	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
 80008cc:	7dfb      	ldrb	r3, [r7, #23]
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	ddd1      	ble.n	8000878 <LCD_DrawHBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	3301      	adds	r3, #1
 80008d8:	61fb      	str	r3, [r7, #28]
 80008da:	7dfb      	ldrb	r3, [r7, #23]
 80008dc:	69fa      	ldr	r2, [r7, #28]
 80008de:	429a      	cmp	r2, r3
 80008e0:	ddc7      	ble.n	8000872 <LCD_DrawHBig+0x1a>
			}
		}
	}
}
 80008e2:	bf00      	nop
 80008e4:	3720      	adds	r7, #32
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000000 	.word	0x20000000

080008f0 <LCD_DrawLBig>:
			}
		}
	}
}

void LCD_DrawLBig(uint16_t x0, uint16_t y0) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	460a      	mov	r2, r1
 80008fa:	80fb      	strh	r3, [r7, #6]
 80008fc:	4613      	mov	r3, r2
 80008fe:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000900:	230f      	movs	r3, #15
 8000902:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
 8000908:	e027      	b.n	800095a <LCD_DrawLBig+0x6a>
		for(int dx = 0; dx <=width; dx++){
 800090a:	2300      	movs	r3, #0
 800090c:	61bb      	str	r3, [r7, #24]
 800090e:	e01d      	b.n	800094c <LCD_DrawLBig+0x5c>
			if ((dx <= 3) || (dy >= 12)) {
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	2b03      	cmp	r3, #3
 8000914:	dd02      	ble.n	800091c <LCD_DrawLBig+0x2c>
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	2b0b      	cmp	r3, #11
 800091a:	dd14      	ble.n	8000946 <LCD_DrawLBig+0x56>
				int y = y0 + dy;
 800091c:	88bb      	ldrh	r3, [r7, #4]
 800091e:	69fa      	ldr	r2, [r7, #28]
 8000920:	4413      	add	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000924:	88fb      	ldrh	r3, [r7, #6]
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	4413      	add	r3, r2
 800092a:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <LCD_DrawLBig+0x7c>)
 800092e:	7818      	ldrb	r0, [r3, #0]
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	4613      	mov	r3, r2
 8000934:	011b      	lsls	r3, r3, #4
 8000936:	1a9b      	subs	r3, r3, r2
 8000938:	011b      	lsls	r3, r3, #4
 800093a:	461a      	mov	r2, r3
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	4413      	add	r3, r2
 8000940:	4619      	mov	r1, r3
 8000942:	f000 fdfd 	bl	8001540 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	3301      	adds	r3, #1
 800094a:	61bb      	str	r3, [r7, #24]
 800094c:	7dfb      	ldrb	r3, [r7, #23]
 800094e:	69ba      	ldr	r2, [r7, #24]
 8000950:	429a      	cmp	r2, r3
 8000952:	dddd      	ble.n	8000910 <LCD_DrawLBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	3301      	adds	r3, #1
 8000958:	61fb      	str	r3, [r7, #28]
 800095a:	7dfb      	ldrb	r3, [r7, #23]
 800095c:	69fa      	ldr	r2, [r7, #28]
 800095e:	429a      	cmp	r2, r3
 8000960:	ddd3      	ble.n	800090a <LCD_DrawLBig+0x1a>
			}
		}
	}
}
 8000962:	bf00      	nop
 8000964:	3720      	adds	r7, #32
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000000 	.word	0x20000000

08000970 <LCD_DrawMBig>:

void LCD_DrawMBig(uint16_t x0, uint16_t y0) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	460a      	mov	r2, r1
 800097a:	80fb      	strh	r3, [r7, #6]
 800097c:	4613      	mov	r3, r2
 800097e:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000980:	230f      	movs	r3, #15
 8000982:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
 8000988:	e04b      	b.n	8000a22 <LCD_DrawMBig+0xb2>
		for(int dx = 0; dx <=width; dx++){
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]
 800098e:	e041      	b.n	8000a14 <LCD_DrawMBig+0xa4>
			if ((dx <= 3) || (dx >= 12) || ((dx >= 6 && dx <= 9) && (dy >= 6 && dy <= 9)) || ((dx >= 3 && dx <= 6) && (dy >= 3 && dy <= 6)) || ((dx >= 9 && dx <= 12) && (dy >= 3 && dy <= 6))) {
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	2b03      	cmp	r3, #3
 8000994:	dd26      	ble.n	80009e4 <LCD_DrawMBig+0x74>
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	2b0b      	cmp	r3, #11
 800099a:	dc23      	bgt.n	80009e4 <LCD_DrawMBig+0x74>
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	2b05      	cmp	r3, #5
 80009a0:	dd08      	ble.n	80009b4 <LCD_DrawMBig+0x44>
 80009a2:	69bb      	ldr	r3, [r7, #24]
 80009a4:	2b09      	cmp	r3, #9
 80009a6:	dc05      	bgt.n	80009b4 <LCD_DrawMBig+0x44>
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	2b05      	cmp	r3, #5
 80009ac:	dd02      	ble.n	80009b4 <LCD_DrawMBig+0x44>
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	2b09      	cmp	r3, #9
 80009b2:	dd17      	ble.n	80009e4 <LCD_DrawMBig+0x74>
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	dd08      	ble.n	80009cc <LCD_DrawMBig+0x5c>
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	2b06      	cmp	r3, #6
 80009be:	dc05      	bgt.n	80009cc <LCD_DrawMBig+0x5c>
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	dd02      	ble.n	80009cc <LCD_DrawMBig+0x5c>
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	2b06      	cmp	r3, #6
 80009ca:	dd0b      	ble.n	80009e4 <LCD_DrawMBig+0x74>
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	2b08      	cmp	r3, #8
 80009d0:	dd1d      	ble.n	8000a0e <LCD_DrawMBig+0x9e>
 80009d2:	69bb      	ldr	r3, [r7, #24]
 80009d4:	2b0c      	cmp	r3, #12
 80009d6:	dc1a      	bgt.n	8000a0e <LCD_DrawMBig+0x9e>
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	2b02      	cmp	r3, #2
 80009dc:	dd17      	ble.n	8000a0e <LCD_DrawMBig+0x9e>
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	2b06      	cmp	r3, #6
 80009e2:	dc14      	bgt.n	8000a0e <LCD_DrawMBig+0x9e>
				int y = y0 + dy;
 80009e4:	88bb      	ldrh	r3, [r7, #4]
 80009e6:	69fa      	ldr	r2, [r7, #28]
 80009e8:	4413      	add	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80009ec:	88fb      	ldrh	r3, [r7, #6]
 80009ee:	69ba      	ldr	r2, [r7, #24]
 80009f0:	4413      	add	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <LCD_DrawMBig+0xc4>)
 80009f6:	7818      	ldrb	r0, [r3, #0]
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	4613      	mov	r3, r2
 80009fc:	011b      	lsls	r3, r3, #4
 80009fe:	1a9b      	subs	r3, r3, r2
 8000a00:	011b      	lsls	r3, r3, #4
 8000a02:	461a      	mov	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	4413      	add	r3, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f000 fd99 	bl	8001540 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	3301      	adds	r3, #1
 8000a12:	61bb      	str	r3, [r7, #24]
 8000a14:	7dfb      	ldrb	r3, [r7, #23]
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	ddb9      	ble.n	8000990 <LCD_DrawMBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	61fb      	str	r3, [r7, #28]
 8000a22:	7dfb      	ldrb	r3, [r7, #23]
 8000a24:	69fa      	ldr	r2, [r7, #28]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	ddaf      	ble.n	800098a <LCD_DrawMBig+0x1a>
			}
		}
	}
}
 8000a2a:	bf00      	nop
 8000a2c:	3720      	adds	r7, #32
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000000 	.word	0x20000000

08000a38 <LCD_DrawNBig>:

void LCD_DrawNBig(uint16_t x0, uint16_t y0) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	460a      	mov	r2, r1
 8000a42:	80fb      	strh	r3, [r7, #6]
 8000a44:	4613      	mov	r3, r2
 8000a46:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000a48:	230f      	movs	r3, #15
 8000a4a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
 8000a50:	e04b      	b.n	8000aea <LCD_DrawNBig+0xb2>
		for(int dx = 0; dx <=width; dx++){
 8000a52:	2300      	movs	r3, #0
 8000a54:	61bb      	str	r3, [r7, #24]
 8000a56:	e041      	b.n	8000adc <LCD_DrawNBig+0xa4>
			if ((dx <= 3) || (dx >= 12) || ((dx >= 6 && dx <= 9) && (dy >= 6 && dy <= 9)) || ((dx >= 3 && dx <= 6) && (dy >= 3 && dy <= 6)) || ((dx >= 9 && dx <= 12) && (dy >= 9 && dy <= 12))) {
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	2b03      	cmp	r3, #3
 8000a5c:	dd26      	ble.n	8000aac <LCD_DrawNBig+0x74>
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	2b0b      	cmp	r3, #11
 8000a62:	dc23      	bgt.n	8000aac <LCD_DrawNBig+0x74>
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	2b05      	cmp	r3, #5
 8000a68:	dd08      	ble.n	8000a7c <LCD_DrawNBig+0x44>
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	2b09      	cmp	r3, #9
 8000a6e:	dc05      	bgt.n	8000a7c <LCD_DrawNBig+0x44>
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	2b05      	cmp	r3, #5
 8000a74:	dd02      	ble.n	8000a7c <LCD_DrawNBig+0x44>
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	2b09      	cmp	r3, #9
 8000a7a:	dd17      	ble.n	8000aac <LCD_DrawNBig+0x74>
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	dd08      	ble.n	8000a94 <LCD_DrawNBig+0x5c>
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	2b06      	cmp	r3, #6
 8000a86:	dc05      	bgt.n	8000a94 <LCD_DrawNBig+0x5c>
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	dd02      	ble.n	8000a94 <LCD_DrawNBig+0x5c>
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	dd0b      	ble.n	8000aac <LCD_DrawNBig+0x74>
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	2b08      	cmp	r3, #8
 8000a98:	dd1d      	ble.n	8000ad6 <LCD_DrawNBig+0x9e>
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	2b0c      	cmp	r3, #12
 8000a9e:	dc1a      	bgt.n	8000ad6 <LCD_DrawNBig+0x9e>
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	2b08      	cmp	r3, #8
 8000aa4:	dd17      	ble.n	8000ad6 <LCD_DrawNBig+0x9e>
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	2b0c      	cmp	r3, #12
 8000aaa:	dc14      	bgt.n	8000ad6 <LCD_DrawNBig+0x9e>
				int y = y0 + dy;
 8000aac:	88bb      	ldrh	r3, [r7, #4]
 8000aae:	69fa      	ldr	r2, [r7, #28]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000ab4:	88fb      	ldrh	r3, [r7, #6]
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	4413      	add	r3, r2
 8000aba:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <LCD_DrawNBig+0xc4>)
 8000abe:	7818      	ldrb	r0, [r3, #0]
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	011b      	lsls	r3, r3, #4
 8000ac6:	1a9b      	subs	r3, r3, r2
 8000ac8:	011b      	lsls	r3, r3, #4
 8000aca:	461a      	mov	r2, r3
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4413      	add	r3, r2
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f000 fd35 	bl	8001540 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	61bb      	str	r3, [r7, #24]
 8000adc:	7dfb      	ldrb	r3, [r7, #23]
 8000ade:	69ba      	ldr	r2, [r7, #24]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	ddb9      	ble.n	8000a58 <LCD_DrawNBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	61fb      	str	r3, [r7, #28]
 8000aea:	7dfb      	ldrb	r3, [r7, #23]
 8000aec:	69fa      	ldr	r2, [r7, #28]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	ddaf      	ble.n	8000a52 <LCD_DrawNBig+0x1a>
			}
		}
	}
}
 8000af2:	bf00      	nop
 8000af4:	3720      	adds	r7, #32
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000000 	.word	0x20000000

08000b00 <LCD_DrawOBig>:

void LCD_DrawOBig(uint16_t x0, uint16_t y0) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	460a      	mov	r2, r1
 8000b0a:	80fb      	strh	r3, [r7, #6]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000b10:	230f      	movs	r3, #15
 8000b12:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
 8000b18:	e02d      	b.n	8000b76 <LCD_DrawOBig+0x76>
		for(int dx = 0; dx <=width; dx++){
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	e023      	b.n	8000b68 <LCD_DrawOBig+0x68>
			if ((dx <= 3 || dx >= 12) || (dy <= 3 || dy >= 12)) {
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	2b03      	cmp	r3, #3
 8000b24:	dd08      	ble.n	8000b38 <LCD_DrawOBig+0x38>
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	2b0b      	cmp	r3, #11
 8000b2a:	dc05      	bgt.n	8000b38 <LCD_DrawOBig+0x38>
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	2b03      	cmp	r3, #3
 8000b30:	dd02      	ble.n	8000b38 <LCD_DrawOBig+0x38>
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	2b0b      	cmp	r3, #11
 8000b36:	dd14      	ble.n	8000b62 <LCD_DrawOBig+0x62>
				int y = y0 + dy;
 8000b38:	88bb      	ldrh	r3, [r7, #4]
 8000b3a:	69fa      	ldr	r2, [r7, #28]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000b40:	88fb      	ldrh	r3, [r7, #6]
 8000b42:	69ba      	ldr	r2, [r7, #24]
 8000b44:	4413      	add	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <LCD_DrawOBig+0x88>)
 8000b4a:	7818      	ldrb	r0, [r3, #0]
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	011b      	lsls	r3, r3, #4
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	011b      	lsls	r3, r3, #4
 8000b56:	461a      	mov	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f000 fcef 	bl	8001540 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	3301      	adds	r3, #1
 8000b66:	61bb      	str	r3, [r7, #24]
 8000b68:	7dfb      	ldrb	r3, [r7, #23]
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	ddd7      	ble.n	8000b20 <LCD_DrawOBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	3301      	adds	r3, #1
 8000b74:	61fb      	str	r3, [r7, #28]
 8000b76:	7dfb      	ldrb	r3, [r7, #23]
 8000b78:	69fa      	ldr	r2, [r7, #28]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	ddcd      	ble.n	8000b1a <LCD_DrawOBig+0x1a>
			}
		}
	}
}
 8000b7e:	bf00      	nop
 8000b80:	3720      	adds	r7, #32
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000000 	.word	0x20000000

08000b8c <LCD_DrawPBig>:

void LCD_DrawPBig(uint16_t x0, uint16_t y0) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	460a      	mov	r2, r1
 8000b96:	80fb      	strh	r3, [r7, #6]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000b9c:	230f      	movs	r3, #15
 8000b9e:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
 8000ba4:	e03c      	b.n	8000c20 <LCD_DrawPBig+0x94>
		for(int dx = 0; dx <=width; dx++){
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
 8000baa:	e032      	b.n	8000c12 <LCD_DrawPBig+0x86>
			if ((dx <= 3) || (dy <= 3 && dx <= 11) || ((dy >= 6 && dy <= 9) && dx <= 11) || (dx >= 12 && (dy >= 3 && dy <= 6))) {
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	2b03      	cmp	r3, #3
 8000bb0:	dd17      	ble.n	8000be2 <LCD_DrawPBig+0x56>
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	dc02      	bgt.n	8000bbe <LCD_DrawPBig+0x32>
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	2b0b      	cmp	r3, #11
 8000bbc:	dd11      	ble.n	8000be2 <LCD_DrawPBig+0x56>
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	2b05      	cmp	r3, #5
 8000bc2:	dd05      	ble.n	8000bd0 <LCD_DrawPBig+0x44>
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	2b09      	cmp	r3, #9
 8000bc8:	dc02      	bgt.n	8000bd0 <LCD_DrawPBig+0x44>
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	2b0b      	cmp	r3, #11
 8000bce:	dd08      	ble.n	8000be2 <LCD_DrawPBig+0x56>
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	2b0b      	cmp	r3, #11
 8000bd4:	dd1a      	ble.n	8000c0c <LCD_DrawPBig+0x80>
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	dd17      	ble.n	8000c0c <LCD_DrawPBig+0x80>
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	2b06      	cmp	r3, #6
 8000be0:	dc14      	bgt.n	8000c0c <LCD_DrawPBig+0x80>
				int y = y0 + dy;
 8000be2:	88bb      	ldrh	r3, [r7, #4]
 8000be4:	69fa      	ldr	r2, [r7, #28]
 8000be6:	4413      	add	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4413      	add	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <LCD_DrawPBig+0xa4>)
 8000bf4:	7818      	ldrb	r0, [r3, #0]
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	011b      	lsls	r3, r3, #4
 8000bfc:	1a9b      	subs	r3, r3, r2
 8000bfe:	011b      	lsls	r3, r3, #4
 8000c00:	461a      	mov	r2, r3
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	4413      	add	r3, r2
 8000c06:	4619      	mov	r1, r3
 8000c08:	f000 fc9a 	bl	8001540 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	61bb      	str	r3, [r7, #24]
 8000c12:	7dfb      	ldrb	r3, [r7, #23]
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	ddc8      	ble.n	8000bac <LCD_DrawPBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	61fb      	str	r3, [r7, #28]
 8000c20:	7dfb      	ldrb	r3, [r7, #23]
 8000c22:	69fa      	ldr	r2, [r7, #28]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	ddbe      	ble.n	8000ba6 <LCD_DrawPBig+0x1a>
			}
		}
	}
}
 8000c28:	bf00      	nop
 8000c2a:	3720      	adds	r7, #32
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000000 	.word	0x20000000

08000c34 <LCD_DrawSBig>:

void LCD_DrawSBig(uint16_t x0, uint16_t y0) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	460a      	mov	r2, r1
 8000c3e:	80fb      	strh	r3, [r7, #6]
 8000c40:	4613      	mov	r3, r2
 8000c42:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000c44:	230f      	movs	r3, #15
 8000c46:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
 8000c4c:	e03f      	b.n	8000cce <LCD_DrawSBig+0x9a>
		for(int dx = 0; dx <=width; dx++){
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
 8000c52:	e035      	b.n	8000cc0 <LCD_DrawSBig+0x8c>
			if ((dx <= 3 && dy <= 9) || (dx >= 12 && dy >= 6) || (dy <= 3 || dy == 6 || dy == 7 || dy == 8 || dy ==9 || dy >= 12)) {
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	2b03      	cmp	r3, #3
 8000c58:	dc02      	bgt.n	8000c60 <LCD_DrawSBig+0x2c>
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	2b09      	cmp	r3, #9
 8000c5e:	dd17      	ble.n	8000c90 <LCD_DrawSBig+0x5c>
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	2b0b      	cmp	r3, #11
 8000c64:	dd02      	ble.n	8000c6c <LCD_DrawSBig+0x38>
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	2b05      	cmp	r3, #5
 8000c6a:	dc11      	bgt.n	8000c90 <LCD_DrawSBig+0x5c>
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	dd0e      	ble.n	8000c90 <LCD_DrawSBig+0x5c>
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	2b06      	cmp	r3, #6
 8000c76:	d00b      	beq.n	8000c90 <LCD_DrawSBig+0x5c>
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	2b07      	cmp	r3, #7
 8000c7c:	d008      	beq.n	8000c90 <LCD_DrawSBig+0x5c>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	2b08      	cmp	r3, #8
 8000c82:	d005      	beq.n	8000c90 <LCD_DrawSBig+0x5c>
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	2b09      	cmp	r3, #9
 8000c88:	d002      	beq.n	8000c90 <LCD_DrawSBig+0x5c>
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	2b0b      	cmp	r3, #11
 8000c8e:	dd14      	ble.n	8000cba <LCD_DrawSBig+0x86>
				int y = y0 + dy;
 8000c90:	88bb      	ldrh	r3, [r7, #4]
 8000c92:	69fa      	ldr	r2, [r7, #28]
 8000c94:	4413      	add	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <LCD_DrawSBig+0xac>)
 8000ca2:	7818      	ldrb	r0, [r3, #0]
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	011b      	lsls	r3, r3, #4
 8000caa:	1a9b      	subs	r3, r3, r2
 8000cac:	011b      	lsls	r3, r3, #4
 8000cae:	461a      	mov	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f000 fc43 	bl	8001540 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	61bb      	str	r3, [r7, #24]
 8000cc0:	7dfb      	ldrb	r3, [r7, #23]
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	ddc5      	ble.n	8000c54 <LCD_DrawSBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	61fb      	str	r3, [r7, #28]
 8000cce:	7dfb      	ldrb	r3, [r7, #23]
 8000cd0:	69fa      	ldr	r2, [r7, #28]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	ddbb      	ble.n	8000c4e <LCD_DrawSBig+0x1a>
			}
		}
	}
}
 8000cd6:	bf00      	nop
 8000cd8:	3720      	adds	r7, #32
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000000 	.word	0x20000000

08000ce4 <LCD_DrawTBig>:

void LCD_DrawTBig(uint16_t x0, uint16_t y0) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	460a      	mov	r2, r1
 8000cee:	80fb      	strh	r3, [r7, #6]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
 8000cfc:	e02a      	b.n	8000d54 <LCD_DrawTBig+0x70>
		for(int dx = 0; dx <=width; dx++){
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
 8000d02:	e020      	b.n	8000d46 <LCD_DrawTBig+0x62>
			if ((dy <= 3) || (dx >= 6 && dx <= 9)) {
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	2b03      	cmp	r3, #3
 8000d08:	dd05      	ble.n	8000d16 <LCD_DrawTBig+0x32>
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	2b05      	cmp	r3, #5
 8000d0e:	dd17      	ble.n	8000d40 <LCD_DrawTBig+0x5c>
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	2b09      	cmp	r3, #9
 8000d14:	dc14      	bgt.n	8000d40 <LCD_DrawTBig+0x5c>
				int y = y0 + dy;
 8000d16:	88bb      	ldrh	r3, [r7, #4]
 8000d18:	69fa      	ldr	r2, [r7, #28]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000d1e:	88fb      	ldrh	r3, [r7, #6]
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4413      	add	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <LCD_DrawTBig+0x80>)
 8000d28:	7818      	ldrb	r0, [r3, #0]
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	011b      	lsls	r3, r3, #4
 8000d30:	1a9b      	subs	r3, r3, r2
 8000d32:	011b      	lsls	r3, r3, #4
 8000d34:	461a      	mov	r2, r3
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	4413      	add	r3, r2
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	f000 fc00 	bl	8001540 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	3301      	adds	r3, #1
 8000d44:	61bb      	str	r3, [r7, #24]
 8000d46:	7dfb      	ldrb	r3, [r7, #23]
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	ddda      	ble.n	8000d04 <LCD_DrawTBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3301      	adds	r3, #1
 8000d52:	61fb      	str	r3, [r7, #28]
 8000d54:	7dfb      	ldrb	r3, [r7, #23]
 8000d56:	69fa      	ldr	r2, [r7, #28]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	ddd0      	ble.n	8000cfe <LCD_DrawTBig+0x1a>
			}
		}
	}
}
 8000d5c:	bf00      	nop
 8000d5e:	3720      	adds	r7, #32
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000000 	.word	0x20000000

08000d68 <LCD_DrawUBig>:

void LCD_DrawUBig(uint16_t x0, uint16_t y0) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	460a      	mov	r2, r1
 8000d72:	80fb      	strh	r3, [r7, #6]
 8000d74:	4613      	mov	r3, r2
 8000d76:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000d78:	230f      	movs	r3, #15
 8000d7a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
 8000d80:	e02a      	b.n	8000dd8 <LCD_DrawUBig+0x70>
		for(int dx = 0; dx <=width; dx++){
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
 8000d86:	e020      	b.n	8000dca <LCD_DrawUBig+0x62>
			if ((dx <= 3) || (dx >= 12) || (dy >= 12)) {
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	2b03      	cmp	r3, #3
 8000d8c:	dd05      	ble.n	8000d9a <LCD_DrawUBig+0x32>
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	2b0b      	cmp	r3, #11
 8000d92:	dc02      	bgt.n	8000d9a <LCD_DrawUBig+0x32>
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	2b0b      	cmp	r3, #11
 8000d98:	dd14      	ble.n	8000dc4 <LCD_DrawUBig+0x5c>
				int y = y0 + dy;
 8000d9a:	88bb      	ldrh	r3, [r7, #4]
 8000d9c:	69fa      	ldr	r2, [r7, #28]
 8000d9e:	4413      	add	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4413      	add	r3, r2
 8000da8:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <LCD_DrawUBig+0x80>)
 8000dac:	7818      	ldrb	r0, [r3, #0]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4613      	mov	r3, r2
 8000db2:	011b      	lsls	r3, r3, #4
 8000db4:	1a9b      	subs	r3, r3, r2
 8000db6:	011b      	lsls	r3, r3, #4
 8000db8:	461a      	mov	r2, r3
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	f000 fbbe 	bl	8001540 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	61bb      	str	r3, [r7, #24]
 8000dca:	7dfb      	ldrb	r3, [r7, #23]
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	ddda      	ble.n	8000d88 <LCD_DrawUBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	61fb      	str	r3, [r7, #28]
 8000dd8:	7dfb      	ldrb	r3, [r7, #23]
 8000dda:	69fa      	ldr	r2, [r7, #28]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	ddd0      	ble.n	8000d82 <LCD_DrawUBig+0x1a>
			}
		}
	}
}
 8000de0:	bf00      	nop
 8000de2:	3720      	adds	r7, #32
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000000 	.word	0x20000000

08000dec <LCD_Draw1Big>:
			}
		}
	}
}

void LCD_Draw1Big(uint16_t x0, uint16_t y0) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	460a      	mov	r2, r1
 8000df6:	80fb      	strh	r3, [r7, #6]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000dfc:	230f      	movs	r3, #15
 8000dfe:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
 8000e04:	e027      	b.n	8000e56 <LCD_Draw1Big+0x6a>
		for(int dx = 0; dx <=width; dx++){
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
 8000e0a:	e01d      	b.n	8000e48 <LCD_Draw1Big+0x5c>
			if (dx >= 6 && dx <= 9) {
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	2b05      	cmp	r3, #5
 8000e10:	dd17      	ble.n	8000e42 <LCD_Draw1Big+0x56>
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	2b09      	cmp	r3, #9
 8000e16:	dc14      	bgt.n	8000e42 <LCD_Draw1Big+0x56>
				int y = y0 + dy;
 8000e18:	88bb      	ldrh	r3, [r7, #4]
 8000e1a:	69fa      	ldr	r2, [r7, #28]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000e20:	88fb      	ldrh	r3, [r7, #6]
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4413      	add	r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <LCD_Draw1Big+0x7c>)
 8000e2a:	7818      	ldrb	r0, [r3, #0]
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	011b      	lsls	r3, r3, #4
 8000e32:	1a9b      	subs	r3, r3, r2
 8000e34:	011b      	lsls	r3, r3, #4
 8000e36:	461a      	mov	r2, r3
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f000 fb7f 	bl	8001540 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	3301      	adds	r3, #1
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	7dfb      	ldrb	r3, [r7, #23]
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	dddd      	ble.n	8000e0c <LCD_Draw1Big+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	3301      	adds	r3, #1
 8000e54:	61fb      	str	r3, [r7, #28]
 8000e56:	7dfb      	ldrb	r3, [r7, #23]
 8000e58:	69fa      	ldr	r2, [r7, #28]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	ddd3      	ble.n	8000e06 <LCD_Draw1Big+0x1a>
			}
		}
	}
}
 8000e5e:	bf00      	nop
 8000e60:	3720      	adds	r7, #32
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000000 	.word	0x20000000

08000e6c <LCD_Draw2Big>:

void LCD_Draw2Big(uint16_t x0, uint16_t y0) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	460a      	mov	r2, r1
 8000e76:	80fb      	strh	r3, [r7, #6]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
 8000e84:	e039      	b.n	8000efa <LCD_Draw2Big+0x8e>
		for(int dx = 0; dx <=width; dx++){
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
 8000e8a:	e02f      	b.n	8000eec <LCD_Draw2Big+0x80>
			if (dy <= 3 || dy >= 12|| (dx >= 12 && dy <= 5) || (dx <= 3 && dy >= 10) || (dy >= 6 && dy <= 9)) {
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	dd14      	ble.n	8000ebc <LCD_Draw2Big+0x50>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	2b0b      	cmp	r3, #11
 8000e96:	dc11      	bgt.n	8000ebc <LCD_Draw2Big+0x50>
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	2b0b      	cmp	r3, #11
 8000e9c:	dd02      	ble.n	8000ea4 <LCD_Draw2Big+0x38>
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	2b05      	cmp	r3, #5
 8000ea2:	dd0b      	ble.n	8000ebc <LCD_Draw2Big+0x50>
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	dc02      	bgt.n	8000eb0 <LCD_Draw2Big+0x44>
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	2b09      	cmp	r3, #9
 8000eae:	dc05      	bgt.n	8000ebc <LCD_Draw2Big+0x50>
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	2b05      	cmp	r3, #5
 8000eb4:	dd17      	ble.n	8000ee6 <LCD_Draw2Big+0x7a>
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	2b09      	cmp	r3, #9
 8000eba:	dc14      	bgt.n	8000ee6 <LCD_Draw2Big+0x7a>
				int y = y0 + dy;
 8000ebc:	88bb      	ldrh	r3, [r7, #4]
 8000ebe:	69fa      	ldr	r2, [r7, #28]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4413      	add	r3, r2
 8000eca:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <LCD_Draw2Big+0xa0>)
 8000ece:	7818      	ldrb	r0, [r3, #0]
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	011b      	lsls	r3, r3, #4
 8000ed6:	1a9b      	subs	r3, r3, r2
 8000ed8:	011b      	lsls	r3, r3, #4
 8000eda:	461a      	mov	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f000 fb2d 	bl	8001540 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	61bb      	str	r3, [r7, #24]
 8000eec:	7dfb      	ldrb	r3, [r7, #23]
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	ddcb      	ble.n	8000e8c <LCD_Draw2Big+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	61fb      	str	r3, [r7, #28]
 8000efa:	7dfb      	ldrb	r3, [r7, #23]
 8000efc:	69fa      	ldr	r2, [r7, #28]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	ddc1      	ble.n	8000e86 <LCD_Draw2Big+0x1a>
			}
		}
	}
}
 8000f02:	bf00      	nop
 8000f04:	3720      	adds	r7, #32
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000000 	.word	0x20000000

08000f10 <LCD_GpioInit>:
extern SPI_HandleTypeDef hspi5;
extern LTDC_HandleTypeDef hltdc;

uint8_t GRAM[LCD_WIDTH * LCD_HEIGHT] = {30, 30, 30, 10, 123, 123, 123, 123, 123, 123};

void LCD_GpioInit() {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
	MX_SPI5_Init();
 8000f16:	f001 f87f 	bl	8002018 <MX_SPI5_Init>
	// Enable Port Clock
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	4b20      	ldr	r3, [pc, #128]	; (8000fa0 <LCD_GpioInit+0x90>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a1f      	ldr	r2, [pc, #124]	; (8000fa0 <LCD_GpioInit+0x90>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <LCD_GpioInit+0x90>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <LCD_GpioInit+0x90>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a18      	ldr	r2, [pc, #96]	; (8000fa0 <LCD_GpioInit+0x90>)
 8000f40:	f043 0308 	orr.w	r3, r3, #8
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <LCD_GpioInit+0x90>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0308 	and.w	r3, r3, #8
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
	// Initialize NCS and DCX Port
	GPIO_InitTypeDef Gpio_InitStruct;
	Gpio_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	613b      	str	r3, [r7, #16]
	Gpio_InitStruct.Pull = GPIO_PULLUP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
	Gpio_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	61bb      	str	r3, [r7, #24]
	Gpio_InitStruct.Pin = LCD_NCS_PIN;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LCD_NCS_GPIO, &Gpio_InitStruct);
 8000f62:	f107 030c 	add.w	r3, r7, #12
 8000f66:	4619      	mov	r1, r3
 8000f68:	480e      	ldr	r0, [pc, #56]	; (8000fa4 <LCD_GpioInit+0x94>)
 8000f6a:	f001 fae1 	bl	8002530 <HAL_GPIO_Init>
	Gpio_InitStruct.Pin = LCD_DCX_PIN;
 8000f6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f72:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LCD_DCX_GPIO, &Gpio_InitStruct);
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480b      	ldr	r0, [pc, #44]	; (8000fa8 <LCD_GpioInit+0x98>)
 8000f7c:	f001 fad8 	bl	8002530 <HAL_GPIO_Init>
	// Initialize NCS and DCX value
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	2104      	movs	r1, #4
 8000f84:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <LCD_GpioInit+0x94>)
 8000f86:	f001 fc7d 	bl	8002884 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, GPIO_PIN_SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f90:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <LCD_GpioInit+0x98>)
 8000f92:	f001 fc77 	bl	8002884 <HAL_GPIO_WritePin>
}
 8000f96:	bf00      	nop
 8000f98:	3720      	adds	r7, #32
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020800 	.word	0x40020800
 8000fa8:	40020c00 	.word	0x40020c00

08000fac <LCD_LtdcInit>:

void LCD_LtdcInit() {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	MX_LTDC_Init();
 8000fb0:	f000 faea 	bl	8001588 <MX_LTDC_Init>
	HAL_LTDC_SetAddress(&hltdc, (uint32_t)GRAM, LTDC_LAYER_1);
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <LCD_LtdcInit+0x38>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4619      	mov	r1, r3
 8000fba:	480b      	ldr	r0, [pc, #44]	; (8000fe8 <LCD_LtdcInit+0x3c>)
 8000fbc:	f001 fe3b 	bl	8002c36 <HAL_LTDC_SetAddress>
	HAL_LTDC_ConfigCLUT(&hltdc, CLUT, 256, LTDC_LAYER_1);
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc6:	4909      	ldr	r1, [pc, #36]	; (8000fec <LCD_LtdcInit+0x40>)
 8000fc8:	4807      	ldr	r0, [pc, #28]	; (8000fe8 <LCD_LtdcInit+0x3c>)
 8000fca:	f001 fd87 	bl	8002adc <HAL_LTDC_ConfigCLUT>
	HAL_LTDC_EnableCLUT(&hltdc, LTDC_LAYER_1);
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <LCD_LtdcInit+0x3c>)
 8000fd2:	f001 fdf7 	bl	8002bc4 <HAL_LTDC_EnableCLUT>
	HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	4803      	ldr	r0, [pc, #12]	; (8000fe8 <LCD_LtdcInit+0x3c>)
 8000fda:	f001 fe62 	bl	8002ca2 <HAL_LTDC_Reload>
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000004 	.word	0x20000004
 8000fe8:	20012c2c 	.word	0x20012c2c
 8000fec:	08004174 	.word	0x08004174

08000ff0 <LCD_DispInit_Spi>:

void LCD_DispInit_Spi() {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	//SOFTWARE RESET
	LCD_WriteCommand(0x01);
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f000 fa47 	bl	8001488 <LCD_WriteCommand>
	HAL_Delay(1000);
 8000ffa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ffe:	f001 f98f 	bl	8002320 <HAL_Delay>

	//POWER CONTROL A
	LCD_WriteCommand(0xCB);
 8001002:	20cb      	movs	r0, #203	; 0xcb
 8001004:	f000 fa40 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x39);
 8001008:	2039      	movs	r0, #57	; 0x39
 800100a:	f000 fa6b 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x2C);
 800100e:	202c      	movs	r0, #44	; 0x2c
 8001010:	f000 fa68 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x00);
 8001014:	2000      	movs	r0, #0
 8001016:	f000 fa65 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x34);
 800101a:	2034      	movs	r0, #52	; 0x34
 800101c:	f000 fa62 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x02);
 8001020:	2002      	movs	r0, #2
 8001022:	f000 fa5f 	bl	80014e4 <LCD_WriteData>

	//POWER CONTROL B
	LCD_WriteCommand(0xCF);
 8001026:	20cf      	movs	r0, #207	; 0xcf
 8001028:	f000 fa2e 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800102c:	2000      	movs	r0, #0
 800102e:	f000 fa59 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0xC1);
 8001032:	20c1      	movs	r0, #193	; 0xc1
 8001034:	f000 fa56 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x30);
 8001038:	2030      	movs	r0, #48	; 0x30
 800103a:	f000 fa53 	bl	80014e4 <LCD_WriteData>

	//DRIVER TIMING CONTROL A
	LCD_WriteCommand(0xE8);
 800103e:	20e8      	movs	r0, #232	; 0xe8
 8001040:	f000 fa22 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x85);
 8001044:	2085      	movs	r0, #133	; 0x85
 8001046:	f000 fa4d 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x00);
 800104a:	2000      	movs	r0, #0
 800104c:	f000 fa4a 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x78);
 8001050:	2078      	movs	r0, #120	; 0x78
 8001052:	f000 fa47 	bl	80014e4 <LCD_WriteData>

	//DRIVER TIMING CONTROL B
	LCD_WriteCommand(0xEA);
 8001056:	20ea      	movs	r0, #234	; 0xea
 8001058:	f000 fa16 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800105c:	2000      	movs	r0, #0
 800105e:	f000 fa41 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x00);
 8001062:	2000      	movs	r0, #0
 8001064:	f000 fa3e 	bl	80014e4 <LCD_WriteData>

	//POWER ON SEQUENCE CONTROL
	LCD_WriteCommand(0xED);
 8001068:	20ed      	movs	r0, #237	; 0xed
 800106a:	f000 fa0d 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x64);
 800106e:	2064      	movs	r0, #100	; 0x64
 8001070:	f000 fa38 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x03);
 8001074:	2003      	movs	r0, #3
 8001076:	f000 fa35 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x12);
 800107a:	2012      	movs	r0, #18
 800107c:	f000 fa32 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x81);
 8001080:	2081      	movs	r0, #129	; 0x81
 8001082:	f000 fa2f 	bl	80014e4 <LCD_WriteData>

	//PUMP RATIO CONTROL
	LCD_WriteCommand(0xF7);
 8001086:	20f7      	movs	r0, #247	; 0xf7
 8001088:	f000 f9fe 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x20);
 800108c:	2020      	movs	r0, #32
 800108e:	f000 fa29 	bl	80014e4 <LCD_WriteData>

	//POWER CONTROL,VRH[5:0]
	LCD_WriteCommand(0xC0);
 8001092:	20c0      	movs	r0, #192	; 0xc0
 8001094:	f000 f9f8 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x23);
 8001098:	2023      	movs	r0, #35	; 0x23
 800109a:	f000 fa23 	bl	80014e4 <LCD_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	LCD_WriteCommand(0xC1);
 800109e:	20c1      	movs	r0, #193	; 0xc1
 80010a0:	f000 f9f2 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 80010a4:	2010      	movs	r0, #16
 80010a6:	f000 fa1d 	bl	80014e4 <LCD_WriteData>

	//VCM CONTROL
	LCD_WriteCommand(0xC5);
 80010aa:	20c5      	movs	r0, #197	; 0xc5
 80010ac:	f000 f9ec 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x3E);
 80010b0:	203e      	movs	r0, #62	; 0x3e
 80010b2:	f000 fa17 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x28);
 80010b6:	2028      	movs	r0, #40	; 0x28
 80010b8:	f000 fa14 	bl	80014e4 <LCD_WriteData>

	//VCM CONTROL 2
	LCD_WriteCommand(0xC7);
 80010bc:	20c7      	movs	r0, #199	; 0xc7
 80010be:	f000 f9e3 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x86);
 80010c2:	2086      	movs	r0, #134	; 0x86
 80010c4:	f000 fa0e 	bl	80014e4 <LCD_WriteData>

	//MEMORY ACCESS CONTROL
	LCD_WriteCommand(0x36);
 80010c8:	2036      	movs	r0, #54	; 0x36
 80010ca:	f000 f9dd 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x48);
 80010ce:	2048      	movs	r0, #72	; 0x48
 80010d0:	f000 fa08 	bl	80014e4 <LCD_WriteData>

	//PIXEL FORMAT
	LCD_WriteCommand(0x3A);
 80010d4:	203a      	movs	r0, #58	; 0x3a
 80010d6:	f000 f9d7 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x55);
 80010da:	2055      	movs	r0, #85	; 0x55
 80010dc:	f000 fa02 	bl	80014e4 <LCD_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	LCD_WriteCommand(0xB1);
 80010e0:	20b1      	movs	r0, #177	; 0xb1
 80010e2:	f000 f9d1 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 f9fc 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x18);
 80010ec:	2018      	movs	r0, #24
 80010ee:	f000 f9f9 	bl	80014e4 <LCD_WriteData>

	//DISPLAY FUNCTION CONTROL
	LCD_WriteCommand(0xB6);
 80010f2:	20b6      	movs	r0, #182	; 0xb6
 80010f4:	f000 f9c8 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x08);
 80010f8:	2008      	movs	r0, #8
 80010fa:	f000 f9f3 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x82);
 80010fe:	2082      	movs	r0, #130	; 0x82
 8001100:	f000 f9f0 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x27);
 8001104:	2027      	movs	r0, #39	; 0x27
 8001106:	f000 f9ed 	bl	80014e4 <LCD_WriteData>

	//3GAMMA FUNCTION DISABLE
	LCD_WriteCommand(0xF2);
 800110a:	20f2      	movs	r0, #242	; 0xf2
 800110c:	f000 f9bc 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8001110:	2000      	movs	r0, #0
 8001112:	f000 f9e7 	bl	80014e4 <LCD_WriteData>

	//GAMMA CURVE SELECTED
	LCD_WriteCommand(0x26);
 8001116:	2026      	movs	r0, #38	; 0x26
 8001118:	f000 f9b6 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 800111c:	2001      	movs	r0, #1
 800111e:	f000 f9e1 	bl	80014e4 <LCD_WriteData>

	//POSITIVE GAMMA CORRECTION
	LCD_WriteCommand(0xE0);
 8001122:	20e0      	movs	r0, #224	; 0xe0
 8001124:	f000 f9b0 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x0F);
 8001128:	200f      	movs	r0, #15
 800112a:	f000 f9db 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x31);
 800112e:	2031      	movs	r0, #49	; 0x31
 8001130:	f000 f9d8 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x2B);
 8001134:	202b      	movs	r0, #43	; 0x2b
 8001136:	f000 f9d5 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x0C);
 800113a:	200c      	movs	r0, #12
 800113c:	f000 f9d2 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x0E);
 8001140:	200e      	movs	r0, #14
 8001142:	f000 f9cf 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x08);
 8001146:	2008      	movs	r0, #8
 8001148:	f000 f9cc 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x4E);
 800114c:	204e      	movs	r0, #78	; 0x4e
 800114e:	f000 f9c9 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0xF1);
 8001152:	20f1      	movs	r0, #241	; 0xf1
 8001154:	f000 f9c6 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x37);
 8001158:	2037      	movs	r0, #55	; 0x37
 800115a:	f000 f9c3 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x07);
 800115e:	2007      	movs	r0, #7
 8001160:	f000 f9c0 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x10);
 8001164:	2010      	movs	r0, #16
 8001166:	f000 f9bd 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x03);
 800116a:	2003      	movs	r0, #3
 800116c:	f000 f9ba 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x0E);
 8001170:	200e      	movs	r0, #14
 8001172:	f000 f9b7 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x09);
 8001176:	2009      	movs	r0, #9
 8001178:	f000 f9b4 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x00);
 800117c:	2000      	movs	r0, #0
 800117e:	f000 f9b1 	bl	80014e4 <LCD_WriteData>

	//NEGATIVE GAMMA CORRECTION
	LCD_WriteCommand(0xE1);
 8001182:	20e1      	movs	r0, #225	; 0xe1
 8001184:	f000 f980 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8001188:	2000      	movs	r0, #0
 800118a:	f000 f9ab 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x0E);
 800118e:	200e      	movs	r0, #14
 8001190:	f000 f9a8 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x14);
 8001194:	2014      	movs	r0, #20
 8001196:	f000 f9a5 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x03);
 800119a:	2003      	movs	r0, #3
 800119c:	f000 f9a2 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x11);
 80011a0:	2011      	movs	r0, #17
 80011a2:	f000 f99f 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x07);
 80011a6:	2007      	movs	r0, #7
 80011a8:	f000 f99c 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x31);
 80011ac:	2031      	movs	r0, #49	; 0x31
 80011ae:	f000 f999 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0xC1);
 80011b2:	20c1      	movs	r0, #193	; 0xc1
 80011b4:	f000 f996 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x48);
 80011b8:	2048      	movs	r0, #72	; 0x48
 80011ba:	f000 f993 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x08);
 80011be:	2008      	movs	r0, #8
 80011c0:	f000 f990 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x0F);
 80011c4:	200f      	movs	r0, #15
 80011c6:	f000 f98d 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x0C);
 80011ca:	200c      	movs	r0, #12
 80011cc:	f000 f98a 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x31);
 80011d0:	2031      	movs	r0, #49	; 0x31
 80011d2:	f000 f987 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x36);
 80011d6:	2036      	movs	r0, #54	; 0x36
 80011d8:	f000 f984 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x0F);
 80011dc:	200f      	movs	r0, #15
 80011de:	f000 f981 	bl	80014e4 <LCD_WriteData>

	//EXIT SLEEP
	LCD_WriteCommand(0x11);
 80011e2:	2011      	movs	r0, #17
 80011e4:	f000 f950 	bl	8001488 <LCD_WriteCommand>
	HAL_Delay(120);
 80011e8:	2078      	movs	r0, #120	; 0x78
 80011ea:	f001 f899 	bl	8002320 <HAL_Delay>

	//TURN ON DISPLAY
	LCD_WriteCommand(0x29);
 80011ee:	2029      	movs	r0, #41	; 0x29
 80011f0:	f000 f94a 	bl	8001488 <LCD_WriteCommand>
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <LCD_DispInit_Ltdc>:

void LCD_DispInit_Ltdc() {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	LCD_WriteCommand(0xCA);
 80011fc:	20ca      	movs	r0, #202	; 0xca
 80011fe:	f000 f943 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0xC3);
 8001202:	20c3      	movs	r0, #195	; 0xc3
 8001204:	f000 f96e 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x08);
 8001208:	2008      	movs	r0, #8
 800120a:	f000 f96b 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x50);
 800120e:	2050      	movs	r0, #80	; 0x50
 8001210:	f000 f968 	bl	80014e4 <LCD_WriteData>

	// LCD_POWERB
	LCD_WriteCommand(LCD_POWERB);
 8001214:	20cf      	movs	r0, #207	; 0xcf
 8001216:	f000 f937 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800121a:	2000      	movs	r0, #0
 800121c:	f000 f962 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0xC1);
 8001220:	20c1      	movs	r0, #193	; 0xc1
 8001222:	f000 f95f 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x30);
 8001226:	2030      	movs	r0, #48	; 0x30
 8001228:	f000 f95c 	bl	80014e4 <LCD_WriteData>

	// LCD_POWER_SEQ
	LCD_WriteCommand(LCD_POWER_SEQ);
 800122c:	20ed      	movs	r0, #237	; 0xed
 800122e:	f000 f92b 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x64);
 8001232:	2064      	movs	r0, #100	; 0x64
 8001234:	f000 f956 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x03);
 8001238:	2003      	movs	r0, #3
 800123a:	f000 f953 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x12);
 800123e:	2012      	movs	r0, #18
 8001240:	f000 f950 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x81);
 8001244:	2081      	movs	r0, #129	; 0x81
 8001246:	f000 f94d 	bl	80014e4 <LCD_WriteData>

	// LCD_DTCA
	LCD_WriteCommand(LCD_DTCA);
 800124a:	20e8      	movs	r0, #232	; 0xe8
 800124c:	f000 f91c 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x85);
 8001250:	2085      	movs	r0, #133	; 0x85
 8001252:	f000 f947 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x00);
 8001256:	2000      	movs	r0, #0
 8001258:	f000 f944 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x78);
 800125c:	2078      	movs	r0, #120	; 0x78
 800125e:	f000 f941 	bl	80014e4 <LCD_WriteData>

	// LCD_POWERA
	LCD_WriteCommand(LCD_POWERA);
 8001262:	20cb      	movs	r0, #203	; 0xcb
 8001264:	f000 f910 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x39);
 8001268:	2039      	movs	r0, #57	; 0x39
 800126a:	f000 f93b 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x2C);
 800126e:	202c      	movs	r0, #44	; 0x2c
 8001270:	f000 f938 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x00);
 8001274:	2000      	movs	r0, #0
 8001276:	f000 f935 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x34);
 800127a:	2034      	movs	r0, #52	; 0x34
 800127c:	f000 f932 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x02);
 8001280:	2002      	movs	r0, #2
 8001282:	f000 f92f 	bl	80014e4 <LCD_WriteData>

	// LCD_RPC
	LCD_WriteCommand(LCD_PRC);
 8001286:	20f7      	movs	r0, #247	; 0xf7
 8001288:	f000 f8fe 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x20);
 800128c:	2020      	movs	r0, #32
 800128e:	f000 f929 	bl	80014e4 <LCD_WriteData>

	// LCD_DTCB
	LCD_WriteCommand(LCD_DTCB);
 8001292:	20ea      	movs	r0, #234	; 0xea
 8001294:	f000 f8f8 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8001298:	2000      	movs	r0, #0
 800129a:	f000 f923 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x00);
 800129e:	2000      	movs	r0, #0
 80012a0:	f000 f920 	bl	80014e4 <LCD_WriteData>

	// LCD_FRMCTR1
	LCD_WriteCommand(LCD_FRMCTR1);
 80012a4:	20b1      	movs	r0, #177	; 0xb1
 80012a6:	f000 f8ef 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80012aa:	2000      	movs	r0, #0
 80012ac:	f000 f91a 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x1B);
 80012b0:	201b      	movs	r0, #27
 80012b2:	f000 f917 	bl	80014e4 <LCD_WriteData>

	// LCD_DFC
	LCD_WriteCommand(LCD_DFC);
 80012b6:	20b6      	movs	r0, #182	; 0xb6
 80012b8:	f000 f8e6 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 80012bc:	200a      	movs	r0, #10
 80012be:	f000 f911 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0xA2);
 80012c2:	20a2      	movs	r0, #162	; 0xa2
 80012c4:	f000 f90e 	bl	80014e4 <LCD_WriteData>

	// LCD_POWER1
	LCD_WriteCommand(LCD_POWER1);
 80012c8:	20c0      	movs	r0, #192	; 0xc0
 80012ca:	f000 f8dd 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 80012ce:	2010      	movs	r0, #16
 80012d0:	f000 f908 	bl	80014e4 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER2);
 80012d4:	20c1      	movs	r0, #193	; 0xc1
 80012d6:	f000 f8d7 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 80012da:	2010      	movs	r0, #16
 80012dc:	f000 f902 	bl	80014e4 <LCD_WriteData>

	// LCD_VCOM
	LCD_WriteCommand(LCD_VCOM1);
 80012e0:	20c5      	movs	r0, #197	; 0xc5
 80012e2:	f000 f8d1 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x45);
 80012e6:	2045      	movs	r0, #69	; 0x45
 80012e8:	f000 f8fc 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x15);
 80012ec:	2015      	movs	r0, #21
 80012ee:	f000 f8f9 	bl	80014e4 <LCD_WriteData>
	LCD_WriteCommand(LCD_VCOM2);
 80012f2:	20c7      	movs	r0, #199	; 0xc7
 80012f4:	f000 f8c8 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x90);
 80012f8:	2090      	movs	r0, #144	; 0x90
 80012fa:	f000 f8f3 	bl	80014e4 <LCD_WriteData>

	// LCD_MAC
	LCD_WriteCommand(LCD_MAC);
 80012fe:	2036      	movs	r0, #54	; 0x36
 8001300:	f000 f8c2 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0xC8);
 8001304:	20c8      	movs	r0, #200	; 0xc8
 8001306:	f000 f8ed 	bl	80014e4 <LCD_WriteData>

	// LCD_GAMMA
	LCD_WriteCommand(LCD_3GAMMA_EN);
 800130a:	20f2      	movs	r0, #242	; 0xf2
 800130c:	f000 f8bc 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8001310:	2000      	movs	r0, #0
 8001312:	f000 f8e7 	bl	80014e4 <LCD_WriteData>

	// LCD_RGB_INTERFACE
	LCD_WriteCommand(LCD_RGB_INTERFACE);
 8001316:	20b0      	movs	r0, #176	; 0xb0
 8001318:	f000 f8b6 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0xC2);
 800131c:	20c2      	movs	r0, #194	; 0xc2
 800131e:	f000 f8e1 	bl	80014e4 <LCD_WriteData>

	// LCD_DFC
	LCD_WriteCommand(LCD_DFC);
 8001322:	20b6      	movs	r0, #182	; 0xb6
 8001324:	f000 f8b0 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 8001328:	200a      	movs	r0, #10
 800132a:	f000 f8db 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0xA7);
 800132e:	20a7      	movs	r0, #167	; 0xa7
 8001330:	f000 f8d8 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x27);
 8001334:	2027      	movs	r0, #39	; 0x27
 8001336:	f000 f8d5 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x04);
 800133a:	2004      	movs	r0, #4
 800133c:	f000 f8d2 	bl	80014e4 <LCD_WriteData>

	// COLUMN_ADDR
	LCD_WriteCommand(LCD_COLUMN_ADDR);
 8001340:	202a      	movs	r0, #42	; 0x2a
 8001342:	f000 f8a1 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8001346:	2000      	movs	r0, #0
 8001348:	f000 f8cc 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x00);
 800134c:	2000      	movs	r0, #0
 800134e:	f000 f8c9 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x00);
 8001352:	2000      	movs	r0, #0
 8001354:	f000 f8c6 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0xEF);
 8001358:	20ef      	movs	r0, #239	; 0xef
 800135a:	f000 f8c3 	bl	80014e4 <LCD_WriteData>

	// PAGE_ADDR
	LCD_WriteCommand(LCD_PAGE_ADDR);
 800135e:	202b      	movs	r0, #43	; 0x2b
 8001360:	f000 f892 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8001364:	2000      	movs	r0, #0
 8001366:	f000 f8bd 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x00);
 800136a:	2000      	movs	r0, #0
 800136c:	f000 f8ba 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x01);
 8001370:	2001      	movs	r0, #1
 8001372:	f000 f8b7 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x3F);
 8001376:	203f      	movs	r0, #63	; 0x3f
 8001378:	f000 f8b4 	bl	80014e4 <LCD_WriteData>

	// INERFACE
	LCD_WriteCommand(LCD_INTERFACE);
 800137c:	20f6      	movs	r0, #246	; 0xf6
 800137e:	f000 f883 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 8001382:	2001      	movs	r0, #1
 8001384:	f000 f8ae 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x00);
 8001388:	2000      	movs	r0, #0
 800138a:	f000 f8ab 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x06);
 800138e:	2006      	movs	r0, #6
 8001390:	f000 f8a8 	bl	80014e4 <LCD_WriteData>

	// LCD_GRAM
	LCD_WriteCommand(LCD_GRAM);
 8001394:	202c      	movs	r0, #44	; 0x2c
 8001396:	f000 f877 	bl	8001488 <LCD_WriteCommand>
	HAL_Delay(200);
 800139a:	20c8      	movs	r0, #200	; 0xc8
 800139c:	f000 ffc0 	bl	8002320 <HAL_Delay>

	// LCD_GAMMA
	LCD_WriteCommand(LCD_GAMMA);
 80013a0:	2026      	movs	r0, #38	; 0x26
 80013a2:	f000 f871 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 80013a6:	2001      	movs	r0, #1
 80013a8:	f000 f89c 	bl	80014e4 <LCD_WriteData>

	// LCD_PGAMMA
	LCD_WriteCommand(LCD_PGAMMA);
 80013ac:	20e0      	movs	r0, #224	; 0xe0
 80013ae:	f000 f86b 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x0F);
 80013b2:	200f      	movs	r0, #15
 80013b4:	f000 f896 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x29);
 80013b8:	2029      	movs	r0, #41	; 0x29
 80013ba:	f000 f893 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x24);
 80013be:	2024      	movs	r0, #36	; 0x24
 80013c0:	f000 f890 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x0C);
 80013c4:	200c      	movs	r0, #12
 80013c6:	f000 f88d 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x0E);
 80013ca:	200e      	movs	r0, #14
 80013cc:	f000 f88a 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x09);
 80013d0:	2009      	movs	r0, #9
 80013d2:	f000 f887 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x4E);
 80013d6:	204e      	movs	r0, #78	; 0x4e
 80013d8:	f000 f884 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x78);
 80013dc:	2078      	movs	r0, #120	; 0x78
 80013de:	f000 f881 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x3C);
 80013e2:	203c      	movs	r0, #60	; 0x3c
 80013e4:	f000 f87e 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x09);
 80013e8:	2009      	movs	r0, #9
 80013ea:	f000 f87b 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x13);
 80013ee:	2013      	movs	r0, #19
 80013f0:	f000 f878 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x05);
 80013f4:	2005      	movs	r0, #5
 80013f6:	f000 f875 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x17);
 80013fa:	2017      	movs	r0, #23
 80013fc:	f000 f872 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x11);
 8001400:	2011      	movs	r0, #17
 8001402:	f000 f86f 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x00);
 8001406:	2000      	movs	r0, #0
 8001408:	f000 f86c 	bl	80014e4 <LCD_WriteData>
	LCD_WriteCommand(LCD_NGAMMA);
 800140c:	20e1      	movs	r0, #225	; 0xe1
 800140e:	f000 f83b 	bl	8001488 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8001412:	2000      	movs	r0, #0
 8001414:	f000 f866 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x16);
 8001418:	2016      	movs	r0, #22
 800141a:	f000 f863 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x1B);
 800141e:	201b      	movs	r0, #27
 8001420:	f000 f860 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x04);
 8001424:	2004      	movs	r0, #4
 8001426:	f000 f85d 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x11);
 800142a:	2011      	movs	r0, #17
 800142c:	f000 f85a 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x07);
 8001430:	2007      	movs	r0, #7
 8001432:	f000 f857 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x31);
 8001436:	2031      	movs	r0, #49	; 0x31
 8001438:	f000 f854 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x33);
 800143c:	2033      	movs	r0, #51	; 0x33
 800143e:	f000 f851 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x42);
 8001442:	2042      	movs	r0, #66	; 0x42
 8001444:	f000 f84e 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x05);
 8001448:	2005      	movs	r0, #5
 800144a:	f000 f84b 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x0C);
 800144e:	200c      	movs	r0, #12
 8001450:	f000 f848 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x0A);
 8001454:	200a      	movs	r0, #10
 8001456:	f000 f845 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x28);
 800145a:	2028      	movs	r0, #40	; 0x28
 800145c:	f000 f842 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x2F);
 8001460:	202f      	movs	r0, #47	; 0x2f
 8001462:	f000 f83f 	bl	80014e4 <LCD_WriteData>
	LCD_WriteData(0x0F);
 8001466:	200f      	movs	r0, #15
 8001468:	f000 f83c 	bl	80014e4 <LCD_WriteData>

	// LCD_SLEEP_OUT
	LCD_WriteCommand(LCD_SLEEP_OUT);
 800146c:	2011      	movs	r0, #17
 800146e:	f000 f80b 	bl	8001488 <LCD_WriteCommand>
	HAL_Delay(200);
 8001472:	20c8      	movs	r0, #200	; 0xc8
 8001474:	f000 ff54 	bl	8002320 <HAL_Delay>

	// LCD_DISP_ON
	LCD_WriteCommand(LCD_DISPLAY_ON);
 8001478:	2029      	movs	r0, #41	; 0x29
 800147a:	f000 f805 	bl	8001488 <LCD_WriteCommand>

	// LCD_WRITE_RAM
	LCD_WriteCommand(LCD_GRAM);
 800147e:	202c      	movs	r0, #44	; 0x2c
 8001480:	f000 f802 	bl	8001488 <LCD_WriteCommand>
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}

08001488 <LCD_WriteCommand>:

void LCD_ModeSelect(DcMode mode){
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, mode);
}

void LCD_WriteCommand(uint8_t data) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	2104      	movs	r1, #4
 8001496:	4810      	ldr	r0, [pc, #64]	; (80014d8 <LCD_WriteCommand+0x50>)
 8001498:	f001 f9f4 	bl	8002884 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a2:	480e      	ldr	r0, [pc, #56]	; (80014dc <LCD_WriteCommand+0x54>)
 80014a4:	f001 f9ee 	bl	8002884 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &data, 1, 1);
 80014a8:	1df9      	adds	r1, r7, #7
 80014aa:	2301      	movs	r3, #1
 80014ac:	2201      	movs	r2, #1
 80014ae:	480c      	ldr	r0, [pc, #48]	; (80014e0 <LCD_WriteCommand+0x58>)
 80014b0:	f002 fc64 	bl	8003d7c <HAL_SPI_Transmit>
	while(!((hspi5.Instance->SR) & SPI_SR_TXE));
 80014b4:	bf00      	nop
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <LCD_WriteCommand+0x58>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f8      	beq.n	80014b6 <LCD_WriteCommand+0x2e>
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	2104      	movs	r1, #4
 80014c8:	4803      	ldr	r0, [pc, #12]	; (80014d8 <LCD_WriteCommand+0x50>)
 80014ca:	f001 f9db 	bl	8002884 <HAL_GPIO_WritePin>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40020800 	.word	0x40020800
 80014dc:	40020c00 	.word	0x40020c00
 80014e0:	20012cd4 	.word	0x20012cd4

080014e4 <LCD_WriteData>:

void LCD_WriteData(uint8_t data) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2104      	movs	r1, #4
 80014f2:	4810      	ldr	r0, [pc, #64]	; (8001534 <LCD_WriteData+0x50>)
 80014f4:	f001 f9c6 	bl	8002884 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, GPIO_PIN_SET);
 80014f8:	2201      	movs	r2, #1
 80014fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014fe:	480e      	ldr	r0, [pc, #56]	; (8001538 <LCD_WriteData+0x54>)
 8001500:	f001 f9c0 	bl	8002884 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &data, 1, 10);
 8001504:	1df9      	adds	r1, r7, #7
 8001506:	230a      	movs	r3, #10
 8001508:	2201      	movs	r2, #1
 800150a:	480c      	ldr	r0, [pc, #48]	; (800153c <LCD_WriteData+0x58>)
 800150c:	f002 fc36 	bl	8003d7c <HAL_SPI_Transmit>
	while(!((hspi5.Instance->SR) & SPI_SR_TXE));
 8001510:	bf00      	nop
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <LCD_WriteData+0x58>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f8      	beq.n	8001512 <LCD_WriteData+0x2e>
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
 8001520:	2201      	movs	r2, #1
 8001522:	2104      	movs	r1, #4
 8001524:	4803      	ldr	r0, [pc, #12]	; (8001534 <LCD_WriteData+0x50>)
 8001526:	f001 f9ad 	bl	8002884 <HAL_GPIO_WritePin>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40020800 	.word	0x40020800
 8001538:	40020c00 	.word	0x40020c00
 800153c:	20012cd4 	.word	0x20012cd4

08001540 <LCD_WriteGRAM>:
	HAL_SPI_Transmit(&hspi5, data, 2, 10);
	while(!((hspi5.Instance->SR) & SPI_SR_TXE));
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
}

void LCD_WriteGRAM(uint8_t data, uint32_t addr) {
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	71fb      	strb	r3, [r7, #7]
	if (addr >= LCD_WIDTH * LCD_HEIGHT)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8001552:	d205      	bcs.n	8001560 <LCD_WriteGRAM+0x20>
		return;
	GRAM[addr] = data;
 8001554:	4a05      	ldr	r2, [pc, #20]	; (800156c <LCD_WriteGRAM+0x2c>)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	4413      	add	r3, r2
 800155a:	79fa      	ldrb	r2, [r7, #7]
 800155c:	701a      	strb	r2, [r3, #0]
 800155e:	e000      	b.n	8001562 <LCD_WriteGRAM+0x22>
		return;
 8001560:	bf00      	nop
}
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	20000004 	.word	0x20000004

08001570 <LCD_ClearScreenLtdc>:

void LCD_ClearScreenLtdc() {
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
	memset(GRAM, 0x2a, LCD_WIDTH * LCD_HEIGHT);
 8001574:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8001578:	212a      	movs	r1, #42	; 0x2a
 800157a:	4802      	ldr	r0, [pc, #8]	; (8001584 <LCD_ClearScreenLtdc+0x14>)
 800157c:	f002 fde6 	bl	800414c <memset>
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000004 	.word	0x20000004

08001588 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;


void MX_LTDC_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08e      	sub	sp, #56	; 0x38
 800158c:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	2234      	movs	r2, #52	; 0x34
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f002 fdd9 	bl	800414c <memset>

  hltdc.Instance = LTDC;
 800159a:	4b39      	ldr	r3, [pc, #228]	; (8001680 <MX_LTDC_Init+0xf8>)
 800159c:	4a39      	ldr	r2, [pc, #228]	; (8001684 <MX_LTDC_Init+0xfc>)
 800159e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80015a0:	4b37      	ldr	r3, [pc, #220]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80015a6:	4b36      	ldr	r3, [pc, #216]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80015ac:	4b34      	ldr	r3, [pc, #208]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80015b2:	4b33      	ldr	r3, [pc, #204]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80015b8:	4b31      	ldr	r3, [pc, #196]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015ba:	2209      	movs	r2, #9
 80015bc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80015be:	4b30      	ldr	r3, [pc, #192]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80015c4:	4b2e      	ldr	r3, [pc, #184]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015c6:	221d      	movs	r2, #29
 80015c8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80015ca:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015cc:	2203      	movs	r2, #3
 80015ce:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80015d0:	4b2b      	ldr	r3, [pc, #172]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015d2:	f240 120d 	movw	r2, #269	; 0x10d
 80015d6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80015d8:	4b29      	ldr	r3, [pc, #164]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015da:	f240 1243 	movw	r2, #323	; 0x143
 80015de:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80015e0:	4b27      	ldr	r3, [pc, #156]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015e2:	f240 1217 	movw	r2, #279	; 0x117
 80015e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80015e8:	4b25      	ldr	r3, [pc, #148]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015ea:	f240 1247 	movw	r2, #327	; 0x147
 80015ee:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80015f0:	4b23      	ldr	r3, [pc, #140]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80015f8:	4b21      	ldr	r3, [pc, #132]	; (8001680 <MX_LTDC_Init+0xf8>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001600:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <MX_LTDC_Init+0xf8>)
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001608:	481d      	ldr	r0, [pc, #116]	; (8001680 <MX_LTDC_Init+0xf8>)
 800160a:	f001 f955 	bl	80028b8 <HAL_LTDC_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001614:	f000 fcf8 	bl	8002008 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 239;
 800161c:	23ef      	movs	r3, #239	; 0xef
 800161e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 319;
 8001624:	f240 133f 	movw	r3, #319	; 0x13f
 8001628:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_L8;
 800162a:	2305      	movs	r3, #5
 800162c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0xff;
 800162e:	23ff      	movs	r3, #255	; 0xff
 8001630:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0x00;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001636:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800163a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800163c:	2307      	movs	r3, #7
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8001644:	23f0      	movs	r3, #240	; 0xf0
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8001648:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800164c:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	2200      	movs	r2, #0
 8001664:	4619      	mov	r1, r3
 8001666:	4806      	ldr	r0, [pc, #24]	; (8001680 <MX_LTDC_Init+0xf8>)
 8001668:	f001 f9fa 	bl	8002a60 <HAL_LTDC_ConfigLayer>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8001672:	f000 fcc9 	bl	8002008 <Error_Handler>
  }

}
 8001676:	bf00      	nop
 8001678:	3738      	adds	r7, #56	; 0x38
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20012c2c 	.word	0x20012c2c
 8001684:	40016800 	.word	0x40016800

08001688 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b090      	sub	sp, #64	; 0x40
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a75      	ldr	r2, [pc, #468]	; (800187c <HAL_LTDC_MspInit+0x1f4>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	f040 80e4 	bne.w	8001874 <HAL_LTDC_MspInit+0x1ec>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80016b0:	4b73      	ldr	r3, [pc, #460]	; (8001880 <HAL_LTDC_MspInit+0x1f8>)
 80016b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b4:	4a72      	ldr	r2, [pc, #456]	; (8001880 <HAL_LTDC_MspInit+0x1f8>)
 80016b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016ba:	6453      	str	r3, [r2, #68]	; 0x44
 80016bc:	4b70      	ldr	r3, [pc, #448]	; (8001880 <HAL_LTDC_MspInit+0x1f8>)
 80016be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80016c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
 80016cc:	4b6c      	ldr	r3, [pc, #432]	; (8001880 <HAL_LTDC_MspInit+0x1f8>)
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	4a6b      	ldr	r2, [pc, #428]	; (8001880 <HAL_LTDC_MspInit+0x1f8>)
 80016d2:	f043 0320 	orr.w	r3, r3, #32
 80016d6:	6313      	str	r3, [r2, #48]	; 0x30
 80016d8:	4b69      	ldr	r3, [pc, #420]	; (8001880 <HAL_LTDC_MspInit+0x1f8>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	f003 0320 	and.w	r3, r3, #32
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
 80016e8:	4b65      	ldr	r3, [pc, #404]	; (8001880 <HAL_LTDC_MspInit+0x1f8>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	4a64      	ldr	r2, [pc, #400]	; (8001880 <HAL_LTDC_MspInit+0x1f8>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6313      	str	r3, [r2, #48]	; 0x30
 80016f4:	4b62      	ldr	r3, [pc, #392]	; (8001880 <HAL_LTDC_MspInit+0x1f8>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	623b      	str	r3, [r7, #32]
 80016fe:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	4b5e      	ldr	r3, [pc, #376]	; (8001880 <HAL_LTDC_MspInit+0x1f8>)
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	4a5d      	ldr	r2, [pc, #372]	; (8001880 <HAL_LTDC_MspInit+0x1f8>)
 800170a:	f043 0302 	orr.w	r3, r3, #2
 800170e:	6313      	str	r3, [r2, #48]	; 0x30
 8001710:	4b5b      	ldr	r3, [pc, #364]	; (8001880 <HAL_LTDC_MspInit+0x1f8>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	61fb      	str	r3, [r7, #28]
 800171a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800171c:	2300      	movs	r3, #0
 800171e:	61bb      	str	r3, [r7, #24]
 8001720:	4b57      	ldr	r3, [pc, #348]	; (8001880 <HAL_LTDC_MspInit+0x1f8>)
 8001722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001724:	4a56      	ldr	r2, [pc, #344]	; (8001880 <HAL_LTDC_MspInit+0x1f8>)
 8001726:	f043 0310 	orr.w	r3, r3, #16
 800172a:	6313      	str	r3, [r2, #48]	; 0x30
 800172c:	4b54      	ldr	r3, [pc, #336]	; (8001880 <HAL_LTDC_MspInit+0x1f8>)
 800172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001730:	f003 0310 	and.w	r3, r3, #16
 8001734:	61bb      	str	r3, [r7, #24]
 8001736:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	4b50      	ldr	r3, [pc, #320]	; (8001880 <HAL_LTDC_MspInit+0x1f8>)
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001740:	4a4f      	ldr	r2, [pc, #316]	; (8001880 <HAL_LTDC_MspInit+0x1f8>)
 8001742:	f043 0308 	orr.w	r3, r3, #8
 8001746:	6313      	str	r3, [r2, #48]	; 0x30
 8001748:	4b4d      	ldr	r3, [pc, #308]	; (8001880 <HAL_LTDC_MspInit+0x1f8>)
 800174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	4b49      	ldr	r3, [pc, #292]	; (8001880 <HAL_LTDC_MspInit+0x1f8>)
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	4a48      	ldr	r2, [pc, #288]	; (8001880 <HAL_LTDC_MspInit+0x1f8>)
 800175e:	f043 0304 	orr.w	r3, r3, #4
 8001762:	6313      	str	r3, [r2, #48]	; 0x30
 8001764:	4b46      	ldr	r3, [pc, #280]	; (8001880 <HAL_LTDC_MspInit+0x1f8>)
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	4b42      	ldr	r3, [pc, #264]	; (8001880 <HAL_LTDC_MspInit+0x1f8>)
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	4a41      	ldr	r2, [pc, #260]	; (8001880 <HAL_LTDC_MspInit+0x1f8>)
 800177a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800177e:	6313      	str	r3, [r2, #48]	; 0x30
 8001780:	4b3f      	ldr	r3, [pc, #252]	; (8001880 <HAL_LTDC_MspInit+0x1f8>)
 8001782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]
    PA12     ------> LTDC_R5
    PD3     ------> LTDC_G7
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800178c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001790:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800179e:	230e      	movs	r3, #14
 80017a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a6:	4619      	mov	r1, r3
 80017a8:	4836      	ldr	r0, [pc, #216]	; (8001884 <HAL_LTDC_MspInit+0x1fc>)
 80017aa:	f000 fec1 	bl	8002530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 80017ae:	f641 0358 	movw	r3, #6232	; 0x1858
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017c0:	230e      	movs	r3, #14
 80017c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c8:	4619      	mov	r1, r3
 80017ca:	482f      	ldr	r0, [pc, #188]	; (8001888 <HAL_LTDC_MspInit+0x200>)
 80017cc:	f000 feb0 	bl	8002530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017d0:	2303      	movs	r3, #3
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2300      	movs	r3, #0
 80017de:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80017e0:	2309      	movs	r3, #9
 80017e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e8:	4619      	mov	r1, r3
 80017ea:	4828      	ldr	r0, [pc, #160]	; (800188c <HAL_LTDC_MspInit+0x204>)
 80017ec:	f000 fea0 	bl	8002530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_11;
 80017f0:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001802:	230e      	movs	r3, #14
 8001804:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001806:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800180a:	4619      	mov	r1, r3
 800180c:	4820      	ldr	r0, [pc, #128]	; (8001890 <HAL_LTDC_MspInit+0x208>)
 800180e:	f000 fe8f 	bl	8002530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001812:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001824:	230e      	movs	r3, #14
 8001826:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001828:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182c:	4619      	mov	r1, r3
 800182e:	4817      	ldr	r0, [pc, #92]	; (800188c <HAL_LTDC_MspInit+0x204>)
 8001830:	f000 fe7e 	bl	8002530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001834:	2308      	movs	r3, #8
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001844:	230e      	movs	r3, #14
 8001846:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001848:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800184c:	4619      	mov	r1, r3
 800184e:	4811      	ldr	r0, [pc, #68]	; (8001894 <HAL_LTDC_MspInit+0x20c>)
 8001850:	f000 fe6e 	bl	8002530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001854:	23c0      	movs	r3, #192	; 0xc0
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001864:	230e      	movs	r3, #14
 8001866:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001868:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800186c:	4619      	mov	r1, r3
 800186e:	480a      	ldr	r0, [pc, #40]	; (8001898 <HAL_LTDC_MspInit+0x210>)
 8001870:	f000 fe5e 	bl	8002530 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001874:	bf00      	nop
 8001876:	3740      	adds	r7, #64	; 0x40
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40016800 	.word	0x40016800
 8001880:	40023800 	.word	0x40023800
 8001884:	40021400 	.word	0x40021400
 8001888:	40020000 	.word	0x40020000
 800188c:	40020400 	.word	0x40020400
 8001890:	40021800 	.word	0x40021800
 8001894:	40020c00 	.word	0x40020c00
 8001898:	40020800 	.word	0x40020800

0800189c <main>:
void SystemClock_Config(void);

extern uint8_t *GRAM;

int main(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
  HAL_Init();
 80018a2:	f000 fccb 	bl	800223c <HAL_Init>
  SystemClock_Config();
 80018a6:	f000 fb23 	bl	8001ef0 <SystemClock_Config>
  MX_GPIO_Init();
 80018aa:	f7fe fe1f 	bl	80004ec <MX_GPIO_Init>
  LCD_GpioInit();
 80018ae:	f7ff fb2f 	bl	8000f10 <LCD_GpioInit>
  LCD_LtdcInit();
 80018b2:	f7ff fb7b 	bl	8000fac <LCD_LtdcInit>
  LCD_DispInit_Spi();
 80018b6:	f7ff fb9b 	bl	8000ff0 <LCD_DispInit_Spi>
  LCD_DispInit_Ltdc();
 80018ba:	f7ff fc9d 	bl	80011f8 <LCD_DispInit_Ltdc>

//  BSP_LED_Init(LED3);
  //BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);	//added

  int x = 50;
 80018be:	2332      	movs	r3, #50	; 0x32
 80018c0:	607b      	str	r3, [r7, #4]
  //horizontal speed
  int v = 1;
 80018c2:	2301      	movs	r3, #1
 80018c4:	603b      	str	r3, [r7, #0]
  while (1)
  {
//	  LCD_SetColorLtdc(0x2c);
//	  LCD_DrawRect_Ltdc(10, 10, 50, 50);
//
	  LCD_SetColorLtdc(0x16);
 80018c6:	2016      	movs	r0, #22
 80018c8:	f7fe fe70 	bl	80005ac <LCD_SetColorLtdc>
//	  	  HAL_Delay(500);
//	  	  LCD_ClearScreenLtdc();
//	  	  x = (x + v) % LCD_WIDTH;

	  //Initialize
	  LCD_DrawHBig(x, 100);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	2164      	movs	r1, #100	; 0x64
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe ffc0 	bl	8000858 <LCD_DrawHBig>
	  x = (x + 18) % LCD_WIDTH;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f103 0212 	add.w	r2, r3, #18
 80018de:	4bcf      	ldr	r3, [pc, #828]	; (8001c1c <main+0x380>)
 80018e0:	fb83 1302 	smull	r1, r3, r3, r2
 80018e4:	4413      	add	r3, r2
 80018e6:	11d9      	asrs	r1, r3, #7
 80018e8:	17d3      	asrs	r3, r2, #31
 80018ea:	1ac9      	subs	r1, r1, r3
 80018ec:	460b      	mov	r3, r1
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	1a5b      	subs	r3, r3, r1
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	607b      	str	r3, [r7, #4]
	  LCD_DrawEBig(x, 100);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	2164      	movs	r1, #100	; 0x64
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe ff5c 	bl	80007bc <LCD_DrawEBig>
	  x = (x + 18) % LCD_WIDTH;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f103 0212 	add.w	r2, r3, #18
 800190a:	4bc4      	ldr	r3, [pc, #784]	; (8001c1c <main+0x380>)
 800190c:	fb83 1302 	smull	r1, r3, r3, r2
 8001910:	4413      	add	r3, r2
 8001912:	11d9      	asrs	r1, r3, #7
 8001914:	17d3      	asrs	r3, r2, #31
 8001916:	1ac9      	subs	r1, r1, r3
 8001918:	460b      	mov	r3, r1
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	1a5b      	subs	r3, r3, r1
 800191e:	011b      	lsls	r3, r3, #4
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	607b      	str	r3, [r7, #4]
	  LCD_DrawLBig(x, 100);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	b29b      	uxth	r3, r3
 8001928:	2164      	movs	r1, #100	; 0x64
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe ffe0 	bl	80008f0 <LCD_DrawLBig>
	  x = (x + 18) % LCD_WIDTH;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f103 0212 	add.w	r2, r3, #18
 8001936:	4bb9      	ldr	r3, [pc, #740]	; (8001c1c <main+0x380>)
 8001938:	fb83 1302 	smull	r1, r3, r3, r2
 800193c:	4413      	add	r3, r2
 800193e:	11d9      	asrs	r1, r3, #7
 8001940:	17d3      	asrs	r3, r2, #31
 8001942:	1ac9      	subs	r1, r1, r3
 8001944:	460b      	mov	r3, r1
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	1a5b      	subs	r3, r3, r1
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	607b      	str	r3, [r7, #4]
	  LCD_DrawLBig(x, 100);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	b29b      	uxth	r3, r3
 8001954:	2164      	movs	r1, #100	; 0x64
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe ffca 	bl	80008f0 <LCD_DrawLBig>
	  x = (x + 18) % LCD_WIDTH;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f103 0212 	add.w	r2, r3, #18
 8001962:	4bae      	ldr	r3, [pc, #696]	; (8001c1c <main+0x380>)
 8001964:	fb83 1302 	smull	r1, r3, r3, r2
 8001968:	4413      	add	r3, r2
 800196a:	11d9      	asrs	r1, r3, #7
 800196c:	17d3      	asrs	r3, r2, #31
 800196e:	1ac9      	subs	r1, r1, r3
 8001970:	460b      	mov	r3, r1
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	1a5b      	subs	r3, r3, r1
 8001976:	011b      	lsls	r3, r3, #4
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	607b      	str	r3, [r7, #4]
	  LCD_DrawOBig(x, 100);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	b29b      	uxth	r3, r3
 8001980:	2164      	movs	r1, #100	; 0x64
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f8bc 	bl	8000b00 <LCD_DrawOBig>
	  HAL_Delay(2000);
 8001988:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800198c:	f000 fcc8 	bl	8002320 <HAL_Delay>
	  LCD_ClearScreenLtdc();
 8001990:	f7ff fdee 	bl	8001570 <LCD_ClearScreenLtdc>
	  HAL_Delay(2000);
 8001994:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001998:	f000 fcc2 	bl	8002320 <HAL_Delay>
	  x = 50;
 800199c:	2332      	movs	r3, #50	; 0x32
 800199e:	607b      	str	r3, [r7, #4]
	  //main menu
	  LCD_DrawMBig(x, 100);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	2164      	movs	r1, #100	; 0x64
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe ffe2 	bl	8000970 <LCD_DrawMBig>
	  x = (x + 18) % LCD_WIDTH;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f103 0212 	add.w	r2, r3, #18
 80019b2:	4b9a      	ldr	r3, [pc, #616]	; (8001c1c <main+0x380>)
 80019b4:	fb83 1302 	smull	r1, r3, r3, r2
 80019b8:	4413      	add	r3, r2
 80019ba:	11d9      	asrs	r1, r3, #7
 80019bc:	17d3      	asrs	r3, r2, #31
 80019be:	1ac9      	subs	r1, r1, r3
 80019c0:	460b      	mov	r3, r1
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	1a5b      	subs	r3, r3, r1
 80019c6:	011b      	lsls	r3, r3, #4
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	607b      	str	r3, [r7, #4]
	  LCD_DrawEBig(x, 100);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	2164      	movs	r1, #100	; 0x64
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fef2 	bl	80007bc <LCD_DrawEBig>
	  x = (x + 18) % LCD_WIDTH;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f103 0212 	add.w	r2, r3, #18
 80019de:	4b8f      	ldr	r3, [pc, #572]	; (8001c1c <main+0x380>)
 80019e0:	fb83 1302 	smull	r1, r3, r3, r2
 80019e4:	4413      	add	r3, r2
 80019e6:	11d9      	asrs	r1, r3, #7
 80019e8:	17d3      	asrs	r3, r2, #31
 80019ea:	1ac9      	subs	r1, r1, r3
 80019ec:	460b      	mov	r3, r1
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	1a5b      	subs	r3, r3, r1
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	607b      	str	r3, [r7, #4]
	  LCD_DrawNBig(x, 100);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	2164      	movs	r1, #100	; 0x64
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff f81a 	bl	8000a38 <LCD_DrawNBig>
	  x = (x + 18) % LCD_WIDTH;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f103 0212 	add.w	r2, r3, #18
 8001a0a:	4b84      	ldr	r3, [pc, #528]	; (8001c1c <main+0x380>)
 8001a0c:	fb83 1302 	smull	r1, r3, r3, r2
 8001a10:	4413      	add	r3, r2
 8001a12:	11d9      	asrs	r1, r3, #7
 8001a14:	17d3      	asrs	r3, r2, #31
 8001a16:	1ac9      	subs	r1, r1, r3
 8001a18:	460b      	mov	r3, r1
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	1a5b      	subs	r3, r3, r1
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	607b      	str	r3, [r7, #4]
	  LCD_DrawUBig(x,100);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	2164      	movs	r1, #100	; 0x64
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff f99c 	bl	8000d68 <LCD_DrawUBig>
	  HAL_Delay(2000);
 8001a30:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a34:	f000 fc74 	bl	8002320 <HAL_Delay>
	  x = 50;
 8001a38:	2332      	movs	r3, #50	; 0x32
 8001a3a:	607b      	str	r3, [r7, #4]
	  LCD_ClearScreenLtdc();
 8001a3c:	f7ff fd98 	bl	8001570 <LCD_ClearScreenLtdc>
	  //bluetooth
	  LCD_DrawBBig(x, 100);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	2164      	movs	r1, #100	; 0x64
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fdc0 	bl	80005cc <LCD_DrawBBig>
	  x = (x + 18) % LCD_WIDTH;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f103 0212 	add.w	r2, r3, #18
 8001a52:	4b72      	ldr	r3, [pc, #456]	; (8001c1c <main+0x380>)
 8001a54:	fb83 1302 	smull	r1, r3, r3, r2
 8001a58:	4413      	add	r3, r2
 8001a5a:	11d9      	asrs	r1, r3, #7
 8001a5c:	17d3      	asrs	r3, r2, #31
 8001a5e:	1ac9      	subs	r1, r1, r3
 8001a60:	460b      	mov	r3, r1
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	1a5b      	subs	r3, r3, r1
 8001a66:	011b      	lsls	r3, r3, #4
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	607b      	str	r3, [r7, #4]
	  LCD_DrawLBig(x, 100);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	2164      	movs	r1, #100	; 0x64
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe ff3c 	bl	80008f0 <LCD_DrawLBig>
	  x = (x + 18) % LCD_WIDTH;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f103 0212 	add.w	r2, r3, #18
 8001a7e:	4b67      	ldr	r3, [pc, #412]	; (8001c1c <main+0x380>)
 8001a80:	fb83 1302 	smull	r1, r3, r3, r2
 8001a84:	4413      	add	r3, r2
 8001a86:	11d9      	asrs	r1, r3, #7
 8001a88:	17d3      	asrs	r3, r2, #31
 8001a8a:	1ac9      	subs	r1, r1, r3
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	1a5b      	subs	r3, r3, r1
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	607b      	str	r3, [r7, #4]
	  LCD_DrawUBig(x, 100);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	2164      	movs	r1, #100	; 0x64
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff f962 	bl	8000d68 <LCD_DrawUBig>
	  x = (x + 18) % LCD_WIDTH;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f103 0212 	add.w	r2, r3, #18
 8001aaa:	4b5c      	ldr	r3, [pc, #368]	; (8001c1c <main+0x380>)
 8001aac:	fb83 1302 	smull	r1, r3, r3, r2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	11d9      	asrs	r1, r3, #7
 8001ab4:	17d3      	asrs	r3, r2, #31
 8001ab6:	1ac9      	subs	r1, r1, r3
 8001ab8:	460b      	mov	r3, r1
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	1a5b      	subs	r3, r3, r1
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	607b      	str	r3, [r7, #4]
	  LCD_DrawEBig(x,100);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	2164      	movs	r1, #100	; 0x64
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fe76 	bl	80007bc <LCD_DrawEBig>
	  x = (x + 18) % LCD_WIDTH;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f103 0212 	add.w	r2, r3, #18
 8001ad6:	4b51      	ldr	r3, [pc, #324]	; (8001c1c <main+0x380>)
 8001ad8:	fb83 1302 	smull	r1, r3, r3, r2
 8001adc:	4413      	add	r3, r2
 8001ade:	11d9      	asrs	r1, r3, #7
 8001ae0:	17d3      	asrs	r3, r2, #31
 8001ae2:	1ac9      	subs	r1, r1, r3
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	1a5b      	subs	r3, r3, r1
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	607b      	str	r3, [r7, #4]
	  LCD_DrawTBig(x, 100);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	2164      	movs	r1, #100	; 0x64
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff f8f4 	bl	8000ce4 <LCD_DrawTBig>
	  x = (x + 18) % LCD_WIDTH;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f103 0212 	add.w	r2, r3, #18
 8001b02:	4b46      	ldr	r3, [pc, #280]	; (8001c1c <main+0x380>)
 8001b04:	fb83 1302 	smull	r1, r3, r3, r2
 8001b08:	4413      	add	r3, r2
 8001b0a:	11d9      	asrs	r1, r3, #7
 8001b0c:	17d3      	asrs	r3, r2, #31
 8001b0e:	1ac9      	subs	r1, r1, r3
 8001b10:	460b      	mov	r3, r1
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	1a5b      	subs	r3, r3, r1
 8001b16:	011b      	lsls	r3, r3, #4
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	607b      	str	r3, [r7, #4]
	  LCD_DrawOBig(x, 100);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	2164      	movs	r1, #100	; 0x64
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe ffec 	bl	8000b00 <LCD_DrawOBig>
	  x = (x + 18) % LCD_WIDTH;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f103 0212 	add.w	r2, r3, #18
 8001b2e:	4b3b      	ldr	r3, [pc, #236]	; (8001c1c <main+0x380>)
 8001b30:	fb83 1302 	smull	r1, r3, r3, r2
 8001b34:	4413      	add	r3, r2
 8001b36:	11d9      	asrs	r1, r3, #7
 8001b38:	17d3      	asrs	r3, r2, #31
 8001b3a:	1ac9      	subs	r1, r1, r3
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	1a5b      	subs	r3, r3, r1
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	607b      	str	r3, [r7, #4]
	  LCD_DrawOBig(x,100);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	2164      	movs	r1, #100	; 0x64
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe ffd6 	bl	8000b00 <LCD_DrawOBig>
	  x = (x + 18) % LCD_WIDTH;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f103 0212 	add.w	r2, r3, #18
 8001b5a:	4b30      	ldr	r3, [pc, #192]	; (8001c1c <main+0x380>)
 8001b5c:	fb83 1302 	smull	r1, r3, r3, r2
 8001b60:	4413      	add	r3, r2
 8001b62:	11d9      	asrs	r1, r3, #7
 8001b64:	17d3      	asrs	r3, r2, #31
 8001b66:	1ac9      	subs	r1, r1, r3
 8001b68:	460b      	mov	r3, r1
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	1a5b      	subs	r3, r3, r1
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	607b      	str	r3, [r7, #4]
	  LCD_DrawTBig(x, 100);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	2164      	movs	r1, #100	; 0x64
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff f8b2 	bl	8000ce4 <LCD_DrawTBig>
	  x = (x + 18) % LCD_WIDTH;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f103 0212 	add.w	r2, r3, #18
 8001b86:	4b25      	ldr	r3, [pc, #148]	; (8001c1c <main+0x380>)
 8001b88:	fb83 1302 	smull	r1, r3, r3, r2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	11d9      	asrs	r1, r3, #7
 8001b90:	17d3      	asrs	r3, r2, #31
 8001b92:	1ac9      	subs	r1, r1, r3
 8001b94:	460b      	mov	r3, r1
 8001b96:	011b      	lsls	r3, r3, #4
 8001b98:	1a5b      	subs	r3, r3, r1
 8001b9a:	011b      	lsls	r3, r3, #4
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	607b      	str	r3, [r7, #4]
	  LCD_DrawHBig(x,100);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	2164      	movs	r1, #100	; 0x64
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fe56 	bl	8000858 <LCD_DrawHBig>
	  x = (x + 18) % LCD_WIDTH;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f103 0212 	add.w	r2, r3, #18
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <main+0x380>)
 8001bb4:	fb83 1302 	smull	r1, r3, r3, r2
 8001bb8:	4413      	add	r3, r2
 8001bba:	11d9      	asrs	r1, r3, #7
 8001bbc:	17d3      	asrs	r3, r2, #31
 8001bbe:	1ac9      	subs	r1, r1, r3
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	1a5b      	subs	r3, r3, r1
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	607b      	str	r3, [r7, #4]
	  HAL_Delay(2000);
 8001bcc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bd0:	f000 fba6 	bl	8002320 <HAL_Delay>
	  x = 50;
 8001bd4:	2332      	movs	r3, #50	; 0x32
 8001bd6:	607b      	str	r3, [r7, #4]
	  LCD_ClearScreenLtdc();
 8001bd8:	f7ff fcca 	bl	8001570 <LCD_ClearScreenLtdc>
	  //Schedule
	  LCD_DrawSBig(x, 100);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	2164      	movs	r1, #100	; 0x64
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff f826 	bl	8000c34 <LCD_DrawSBig>
	  x = (x + 18) % LCD_WIDTH;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f103 0212 	add.w	r2, r3, #18
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <main+0x380>)
 8001bf0:	fb83 1302 	smull	r1, r3, r3, r2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	11d9      	asrs	r1, r3, #7
 8001bf8:	17d3      	asrs	r3, r2, #31
 8001bfa:	1ac9      	subs	r1, r1, r3
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	1a5b      	subs	r3, r3, r1
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	607b      	str	r3, [r7, #4]
	  LCD_DrawCBig(x, 100);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	2164      	movs	r1, #100	; 0x64
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fd40 	bl	8000694 <LCD_DrawCBig>
	  x = (x + 18) % LCD_WIDTH;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f103 0212 	add.w	r2, r3, #18
 8001c1a:	e001      	b.n	8001c20 <main+0x384>
 8001c1c:	88888889 	.word	0x88888889
 8001c20:	4bb2      	ldr	r3, [pc, #712]	; (8001eec <main+0x650>)
 8001c22:	fb83 1302 	smull	r1, r3, r3, r2
 8001c26:	4413      	add	r3, r2
 8001c28:	11d9      	asrs	r1, r3, #7
 8001c2a:	17d3      	asrs	r3, r2, #31
 8001c2c:	1ac9      	subs	r1, r1, r3
 8001c2e:	460b      	mov	r3, r1
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	1a5b      	subs	r3, r3, r1
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	607b      	str	r3, [r7, #4]
	  LCD_DrawHBig(x, 100);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	2164      	movs	r1, #100	; 0x64
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fe09 	bl	8000858 <LCD_DrawHBig>
	  x = (x + 18) % LCD_WIDTH;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f103 0212 	add.w	r2, r3, #18
 8001c4c:	4ba7      	ldr	r3, [pc, #668]	; (8001eec <main+0x650>)
 8001c4e:	fb83 1302 	smull	r1, r3, r3, r2
 8001c52:	4413      	add	r3, r2
 8001c54:	11d9      	asrs	r1, r3, #7
 8001c56:	17d3      	asrs	r3, r2, #31
 8001c58:	1ac9      	subs	r1, r1, r3
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	1a5b      	subs	r3, r3, r1
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	607b      	str	r3, [r7, #4]
	  LCD_DrawEBig(x,100);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	2164      	movs	r1, #100	; 0x64
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fda5 	bl	80007bc <LCD_DrawEBig>
	  x = (x + 18) % LCD_WIDTH;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f103 0212 	add.w	r2, r3, #18
 8001c78:	4b9c      	ldr	r3, [pc, #624]	; (8001eec <main+0x650>)
 8001c7a:	fb83 1302 	smull	r1, r3, r3, r2
 8001c7e:	4413      	add	r3, r2
 8001c80:	11d9      	asrs	r1, r3, #7
 8001c82:	17d3      	asrs	r3, r2, #31
 8001c84:	1ac9      	subs	r1, r1, r3
 8001c86:	460b      	mov	r3, r1
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	1a5b      	subs	r3, r3, r1
 8001c8c:	011b      	lsls	r3, r3, #4
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	607b      	str	r3, [r7, #4]
	  LCD_DrawDBig(x, 100);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	2164      	movs	r1, #100	; 0x64
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fd3d 	bl	8000718 <LCD_DrawDBig>
	  x = (x + 18) % LCD_WIDTH;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f103 0212 	add.w	r2, r3, #18
 8001ca4:	4b91      	ldr	r3, [pc, #580]	; (8001eec <main+0x650>)
 8001ca6:	fb83 1302 	smull	r1, r3, r3, r2
 8001caa:	4413      	add	r3, r2
 8001cac:	11d9      	asrs	r1, r3, #7
 8001cae:	17d3      	asrs	r3, r2, #31
 8001cb0:	1ac9      	subs	r1, r1, r3
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	1a5b      	subs	r3, r3, r1
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	607b      	str	r3, [r7, #4]
	  LCD_DrawUBig(x, 100);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	2164      	movs	r1, #100	; 0x64
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff f84f 	bl	8000d68 <LCD_DrawUBig>
	  x = (x + 18) % LCD_WIDTH;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f103 0212 	add.w	r2, r3, #18
 8001cd0:	4b86      	ldr	r3, [pc, #536]	; (8001eec <main+0x650>)
 8001cd2:	fb83 1302 	smull	r1, r3, r3, r2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	11d9      	asrs	r1, r3, #7
 8001cda:	17d3      	asrs	r3, r2, #31
 8001cdc:	1ac9      	subs	r1, r1, r3
 8001cde:	460b      	mov	r3, r1
 8001ce0:	011b      	lsls	r3, r3, #4
 8001ce2:	1a5b      	subs	r3, r3, r1
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	607b      	str	r3, [r7, #4]
	  LCD_DrawLBig(x,100);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	2164      	movs	r1, #100	; 0x64
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fdfd 	bl	80008f0 <LCD_DrawLBig>
	  x = (x + 18) % LCD_WIDTH;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f103 0212 	add.w	r2, r3, #18
 8001cfc:	4b7b      	ldr	r3, [pc, #492]	; (8001eec <main+0x650>)
 8001cfe:	fb83 1302 	smull	r1, r3, r3, r2
 8001d02:	4413      	add	r3, r2
 8001d04:	11d9      	asrs	r1, r3, #7
 8001d06:	17d3      	asrs	r3, r2, #31
 8001d08:	1ac9      	subs	r1, r1, r3
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	011b      	lsls	r3, r3, #4
 8001d0e:	1a5b      	subs	r3, r3, r1
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	607b      	str	r3, [r7, #4]
	  LCD_DrawEBig(x, 100);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	2164      	movs	r1, #100	; 0x64
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fd4d 	bl	80007bc <LCD_DrawEBig>
	  x = (x + 18) % LCD_WIDTH;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f103 0212 	add.w	r2, r3, #18
 8001d28:	4b70      	ldr	r3, [pc, #448]	; (8001eec <main+0x650>)
 8001d2a:	fb83 1302 	smull	r1, r3, r3, r2
 8001d2e:	4413      	add	r3, r2
 8001d30:	11d9      	asrs	r1, r3, #7
 8001d32:	17d3      	asrs	r3, r2, #31
 8001d34:	1ac9      	subs	r1, r1, r3
 8001d36:	460b      	mov	r3, r1
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	1a5b      	subs	r3, r3, r1
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	607b      	str	r3, [r7, #4]

	  HAL_Delay(2000);
 8001d42:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d46:	f000 faeb 	bl	8002320 <HAL_Delay>
	  x = 50;
 8001d4a:	2332      	movs	r3, #50	; 0x32
 8001d4c:	607b      	str	r3, [r7, #4]
	  LCD_ClearScreenLtdc();
 8001d4e:	f7ff fc0f 	bl	8001570 <LCD_ClearScreenLtdc>
	  //Dispensed
	  LCD_Draw1Big(x, 100);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	2164      	movs	r1, #100	; 0x64
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff f847 	bl	8000dec <LCD_Draw1Big>
	  x = (x + 18) % LCD_WIDTH;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f103 0212 	add.w	r2, r3, #18
 8001d64:	4b61      	ldr	r3, [pc, #388]	; (8001eec <main+0x650>)
 8001d66:	fb83 1302 	smull	r1, r3, r3, r2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	11d9      	asrs	r1, r3, #7
 8001d6e:	17d3      	asrs	r3, r2, #31
 8001d70:	1ac9      	subs	r1, r1, r3
 8001d72:	460b      	mov	r3, r1
 8001d74:	011b      	lsls	r3, r3, #4
 8001d76:	1a5b      	subs	r3, r3, r1
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	607b      	str	r3, [r7, #4]
	  LCD_Draw2Big(x, 100);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	2164      	movs	r1, #100	; 0x64
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff f871 	bl	8000e6c <LCD_Draw2Big>
	  x = (x + 18) % LCD_WIDTH;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f103 0212 	add.w	r2, r3, #18
 8001d90:	4b56      	ldr	r3, [pc, #344]	; (8001eec <main+0x650>)
 8001d92:	fb83 1302 	smull	r1, r3, r3, r2
 8001d96:	4413      	add	r3, r2
 8001d98:	11d9      	asrs	r1, r3, #7
 8001d9a:	17d3      	asrs	r3, r2, #31
 8001d9c:	1ac9      	subs	r1, r1, r3
 8001d9e:	460b      	mov	r3, r1
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	1a5b      	subs	r3, r3, r1
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	607b      	str	r3, [r7, #4]
	  LCD_DrawSBig(x, 100);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	2164      	movs	r1, #100	; 0x64
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe ff3f 	bl	8000c34 <LCD_DrawSBig>
	  x = (x + 18) % LCD_WIDTH;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f103 0212 	add.w	r2, r3, #18
 8001dbc:	4b4b      	ldr	r3, [pc, #300]	; (8001eec <main+0x650>)
 8001dbe:	fb83 1302 	smull	r1, r3, r3, r2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	11d9      	asrs	r1, r3, #7
 8001dc6:	17d3      	asrs	r3, r2, #31
 8001dc8:	1ac9      	subs	r1, r1, r3
 8001dca:	460b      	mov	r3, r1
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	1a5b      	subs	r3, r3, r1
 8001dd0:	011b      	lsls	r3, r3, #4
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	607b      	str	r3, [r7, #4]
	  LCD_DrawPBig(x,100);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	2164      	movs	r1, #100	; 0x64
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fed5 	bl	8000b8c <LCD_DrawPBig>
	  x = (x + 18) % LCD_WIDTH;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f103 0212 	add.w	r2, r3, #18
 8001de8:	4b40      	ldr	r3, [pc, #256]	; (8001eec <main+0x650>)
 8001dea:	fb83 1302 	smull	r1, r3, r3, r2
 8001dee:	4413      	add	r3, r2
 8001df0:	11d9      	asrs	r1, r3, #7
 8001df2:	17d3      	asrs	r3, r2, #31
 8001df4:	1ac9      	subs	r1, r1, r3
 8001df6:	460b      	mov	r3, r1
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	1a5b      	subs	r3, r3, r1
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	607b      	str	r3, [r7, #4]
	  LCD_DrawEBig(x, 100);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	2164      	movs	r1, #100	; 0x64
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fcd7 	bl	80007bc <LCD_DrawEBig>
	  x = (x + 18) % LCD_WIDTH;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f103 0212 	add.w	r2, r3, #18
 8001e14:	4b35      	ldr	r3, [pc, #212]	; (8001eec <main+0x650>)
 8001e16:	fb83 1302 	smull	r1, r3, r3, r2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	11d9      	asrs	r1, r3, #7
 8001e1e:	17d3      	asrs	r3, r2, #31
 8001e20:	1ac9      	subs	r1, r1, r3
 8001e22:	460b      	mov	r3, r1
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	1a5b      	subs	r3, r3, r1
 8001e28:	011b      	lsls	r3, r3, #4
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	607b      	str	r3, [r7, #4]
	  LCD_DrawNBig(x, 100);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	2164      	movs	r1, #100	; 0x64
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fdff 	bl	8000a38 <LCD_DrawNBig>
	  x = (x + 18) % LCD_WIDTH;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f103 0212 	add.w	r2, r3, #18
 8001e40:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <main+0x650>)
 8001e42:	fb83 1302 	smull	r1, r3, r3, r2
 8001e46:	4413      	add	r3, r2
 8001e48:	11d9      	asrs	r1, r3, #7
 8001e4a:	17d3      	asrs	r3, r2, #31
 8001e4c:	1ac9      	subs	r1, r1, r3
 8001e4e:	460b      	mov	r3, r1
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	1a5b      	subs	r3, r3, r1
 8001e54:	011b      	lsls	r3, r3, #4
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	607b      	str	r3, [r7, #4]
	  LCD_DrawSBig(x,100);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	2164      	movs	r1, #100	; 0x64
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fee7 	bl	8000c34 <LCD_DrawSBig>
	  x = (x + 18) % LCD_WIDTH;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f103 0212 	add.w	r2, r3, #18
 8001e6c:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <main+0x650>)
 8001e6e:	fb83 1302 	smull	r1, r3, r3, r2
 8001e72:	4413      	add	r3, r2
 8001e74:	11d9      	asrs	r1, r3, #7
 8001e76:	17d3      	asrs	r3, r2, #31
 8001e78:	1ac9      	subs	r1, r1, r3
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	1a5b      	subs	r3, r3, r1
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	607b      	str	r3, [r7, #4]
	  LCD_DrawEBig(x, 100);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	2164      	movs	r1, #100	; 0x64
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe fc95 	bl	80007bc <LCD_DrawEBig>
	  x = (x + 18) % LCD_WIDTH;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f103 0212 	add.w	r2, r3, #18
 8001e98:	4b14      	ldr	r3, [pc, #80]	; (8001eec <main+0x650>)
 8001e9a:	fb83 1302 	smull	r1, r3, r3, r2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	11d9      	asrs	r1, r3, #7
 8001ea2:	17d3      	asrs	r3, r2, #31
 8001ea4:	1ac9      	subs	r1, r1, r3
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	1a5b      	subs	r3, r3, r1
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	607b      	str	r3, [r7, #4]
	  LCD_DrawDBig(x, 100);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	2164      	movs	r1, #100	; 0x64
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe fc2d 	bl	8000718 <LCD_DrawDBig>
	  x = (x + 18) % LCD_WIDTH;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f103 0212 	add.w	r2, r3, #18
 8001ec4:	4b09      	ldr	r3, [pc, #36]	; (8001eec <main+0x650>)
 8001ec6:	fb83 1302 	smull	r1, r3, r3, r2
 8001eca:	4413      	add	r3, r2
 8001ecc:	11d9      	asrs	r1, r3, #7
 8001ece:	17d3      	asrs	r3, r2, #31
 8001ed0:	1ac9      	subs	r1, r1, r3
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	011b      	lsls	r3, r3, #4
 8001ed6:	1a5b      	subs	r3, r3, r1
 8001ed8:	011b      	lsls	r3, r3, #4
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	607b      	str	r3, [r7, #4]
	  HAL_Delay(2000);
 8001ede:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ee2:	f000 fa1d 	bl	8002320 <HAL_Delay>
	  x = 50;
 8001ee6:	2332      	movs	r3, #50	; 0x32
 8001ee8:	607b      	str	r3, [r7, #4]
	  LCD_SetColorLtdc(0x16);
 8001eea:	e4ec      	b.n	80018c6 <main+0x2a>
 8001eec:	88888889 	.word	0x88888889

08001ef0 <SystemClock_Config>:
//	  	  LCD_DrawH(x, 200);
//	  HAL_Delay(1000);
}

void SystemClock_Config(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b0a0      	sub	sp, #128	; 0x80
 8001ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ef6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001efa:	2230      	movs	r2, #48	; 0x30
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f002 f924 	bl	800414c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	2230      	movs	r2, #48	; 0x30
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f002 f915 	bl	800414c <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	4b36      	ldr	r3, [pc, #216]	; (8002000 <SystemClock_Config+0x110>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	4a35      	ldr	r2, [pc, #212]	; (8002000 <SystemClock_Config+0x110>)
 8001f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f30:	6413      	str	r3, [r2, #64]	; 0x40
 8001f32:	4b33      	ldr	r3, [pc, #204]	; (8002000 <SystemClock_Config+0x110>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f3e:	2300      	movs	r3, #0
 8001f40:	607b      	str	r3, [r7, #4]
 8001f42:	4b30      	ldr	r3, [pc, #192]	; (8002004 <SystemClock_Config+0x114>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f4a:	4a2e      	ldr	r2, [pc, #184]	; (8002004 <SystemClock_Config+0x114>)
 8001f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <SystemClock_Config+0x114>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f62:	2301      	movs	r3, #1
 8001f64:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f66:	2310      	movs	r3, #16
 8001f68:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f72:	2308      	movs	r3, #8
 8001f74:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001f76:	23b4      	movs	r3, #180	; 0xb4
 8001f78:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f7e:	2304      	movs	r3, #4
 8001f80:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f82:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f86:	4618      	mov	r0, r3
 8001f88:	f001 f8a8 	bl	80030dc <HAL_RCC_OscConfig>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001f92:	f000 f839 	bl	8002008 <Error_Handler>
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f96:	f001 f851 	bl	800303c <HAL_PWREx_EnableOverDrive>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001fa0:	f000 f832 	bl	8002008 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fa4:	230f      	movs	r3, #15
 8001fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fba:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fbc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fc0:	2102      	movs	r1, #2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f001 fafa 	bl	80035bc <HAL_RCC_ClockConfig>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8001fce:	f000 f81b 	bl	8002008 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001fd2:	2308      	movs	r3, #8
 8001fd4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 56;
 8001fd6:	2338      	movs	r3, #56	; 0x38
 8001fd8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8001fda:	2307      	movs	r3, #7
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fe2:	f107 030c 	add.w	r3, r7, #12
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f001 fca6 	bl	8003938 <HAL_RCCEx_PeriphCLKConfig>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <SystemClock_Config+0x106>
  {
    Error_Handler();
 8001ff2:	f000 f809 	bl	8002008 <Error_Handler>
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	3780      	adds	r7, #128	; 0x80
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800
 8002004:	40007000 	.word	0x40007000

08002008 <Error_Handler>:

void Error_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0

}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 800201c:	4b18      	ldr	r3, [pc, #96]	; (8002080 <MX_SPI5_Init+0x68>)
 800201e:	4a19      	ldr	r2, [pc, #100]	; (8002084 <MX_SPI5_Init+0x6c>)
 8002020:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002022:	4b17      	ldr	r3, [pc, #92]	; (8002080 <MX_SPI5_Init+0x68>)
 8002024:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002028:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <MX_SPI5_Init+0x68>)
 800202c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002030:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002032:	4b13      	ldr	r3, [pc, #76]	; (8002080 <MX_SPI5_Init+0x68>)
 8002034:	2200      	movs	r2, #0
 8002036:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002038:	4b11      	ldr	r3, [pc, #68]	; (8002080 <MX_SPI5_Init+0x68>)
 800203a:	2200      	movs	r2, #0
 800203c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800203e:	4b10      	ldr	r3, [pc, #64]	; (8002080 <MX_SPI5_Init+0x68>)
 8002040:	2200      	movs	r2, #0
 8002042:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002044:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <MX_SPI5_Init+0x68>)
 8002046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800204a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <MX_SPI5_Init+0x68>)
 800204e:	2200      	movs	r2, #0
 8002050:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002052:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <MX_SPI5_Init+0x68>)
 8002054:	2200      	movs	r2, #0
 8002056:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002058:	4b09      	ldr	r3, [pc, #36]	; (8002080 <MX_SPI5_Init+0x68>)
 800205a:	2200      	movs	r2, #0
 800205c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800205e:	4b08      	ldr	r3, [pc, #32]	; (8002080 <MX_SPI5_Init+0x68>)
 8002060:	2200      	movs	r2, #0
 8002062:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <MX_SPI5_Init+0x68>)
 8002066:	220a      	movs	r2, #10
 8002068:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800206a:	4805      	ldr	r0, [pc, #20]	; (8002080 <MX_SPI5_Init+0x68>)
 800206c:	f001 fe22 	bl	8003cb4 <HAL_SPI_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_SPI5_Init+0x62>
  {
    Error_Handler();
 8002076:	f7ff ffc7 	bl	8002008 <Error_Handler>
  }

}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20012cd4 	.word	0x20012cd4
 8002084:	40015000 	.word	0x40015000

08002088 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	; 0x28
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a19      	ldr	r2, [pc, #100]	; (800210c <HAL_SPI_MspInit+0x84>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d12c      	bne.n	8002104 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	4b18      	ldr	r3, [pc, #96]	; (8002110 <HAL_SPI_MspInit+0x88>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	4a17      	ldr	r2, [pc, #92]	; (8002110 <HAL_SPI_MspInit+0x88>)
 80020b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020b8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ba:	4b15      	ldr	r3, [pc, #84]	; (8002110 <HAL_SPI_MspInit+0x88>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	4b11      	ldr	r3, [pc, #68]	; (8002110 <HAL_SPI_MspInit+0x88>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a10      	ldr	r2, [pc, #64]	; (8002110 <HAL_SPI_MspInit+0x88>)
 80020d0:	f043 0320 	orr.w	r3, r3, #32
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <HAL_SPI_MspInit+0x88>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80020e2:	f44f 7320 	mov.w	r3, #640	; 0x280
 80020e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f0:	2303      	movs	r3, #3
 80020f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80020f4:	2305      	movs	r3, #5
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	4619      	mov	r1, r3
 80020fe:	4805      	ldr	r0, [pc, #20]	; (8002114 <HAL_SPI_MspInit+0x8c>)
 8002100:	f000 fa16 	bl	8002530 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8002104:	bf00      	nop
 8002106:	3728      	adds	r7, #40	; 0x28
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40015000 	.word	0x40015000
 8002110:	40023800 	.word	0x40023800
 8002114:	40021400 	.word	0x40021400

08002118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <HAL_MspInit+0x4c>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	4a0f      	ldr	r2, [pc, #60]	; (8002164 <HAL_MspInit+0x4c>)
 8002128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800212c:	6453      	str	r3, [r2, #68]	; 0x44
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <HAL_MspInit+0x4c>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	603b      	str	r3, [r7, #0]
 800213e:	4b09      	ldr	r3, [pc, #36]	; (8002164 <HAL_MspInit+0x4c>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	4a08      	ldr	r2, [pc, #32]	; (8002164 <HAL_MspInit+0x4c>)
 8002144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002148:	6413      	str	r3, [r2, #64]	; 0x40
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_MspInit+0x4c>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002152:	603b      	str	r3, [r7, #0]
 8002154:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002156:	2007      	movs	r0, #7
 8002158:	f000 f9b6 	bl	80024c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40023800 	.word	0x40023800

08002168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800216c:	e7fe      	b.n	800216c <NMI_Handler+0x4>

0800216e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002172:	e7fe      	b.n	8002172 <HardFault_Handler+0x4>

08002174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <MemManage_Handler+0x4>

0800217a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800217e:	e7fe      	b.n	800217e <BusFault_Handler+0x4>

08002180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002184:	e7fe      	b.n	8002184 <UsageFault_Handler+0x4>

08002186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b4:	f000 f894 	bl	80022e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}

080021bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021c0:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <SystemInit+0x28>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c6:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <SystemInit+0x28>)
 80021c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <SystemInit+0x28>)
 80021d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021d6:	609a      	str	r2, [r3, #8]
#endif
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80021e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002220 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80021ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80021ee:	e003      	b.n	80021f8 <LoopCopyDataInit>

080021f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80021f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80021f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80021f6:	3104      	adds	r1, #4

080021f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80021f8:	480b      	ldr	r0, [pc, #44]	; (8002228 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80021fa:	4b0c      	ldr	r3, [pc, #48]	; (800222c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80021fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80021fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002200:	d3f6      	bcc.n	80021f0 <CopyDataInit>
  ldr  r2, =_sbss
 8002202:	4a0b      	ldr	r2, [pc, #44]	; (8002230 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002204:	e002      	b.n	800220c <LoopFillZerobss>

08002206 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002206:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002208:	f842 3b04 	str.w	r3, [r2], #4

0800220c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800220c:	4b09      	ldr	r3, [pc, #36]	; (8002234 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800220e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002210:	d3f9      	bcc.n	8002206 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002212:	f7ff ffd3 	bl	80021bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002216:	f001 ff75 	bl	8004104 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800221a:	f7ff fb3f 	bl	800189c <main>
  bx  lr    
 800221e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002220:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002224:	08004594 	.word	0x08004594
  ldr  r0, =_sdata
 8002228:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800222c:	20012c10 	.word	0x20012c10
  ldr  r2, =_sbss
 8002230:	20012c10 	.word	0x20012c10
  ldr  r3, = _ebss
 8002234:	20012d30 	.word	0x20012d30

08002238 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002238:	e7fe      	b.n	8002238 <ADC_IRQHandler>
	...

0800223c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002240:	4b0e      	ldr	r3, [pc, #56]	; (800227c <HAL_Init+0x40>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0d      	ldr	r2, [pc, #52]	; (800227c <HAL_Init+0x40>)
 8002246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800224a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <HAL_Init+0x40>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0a      	ldr	r2, [pc, #40]	; (800227c <HAL_Init+0x40>)
 8002252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002256:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <HAL_Init+0x40>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a07      	ldr	r2, [pc, #28]	; (800227c <HAL_Init+0x40>)
 800225e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002262:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002264:	2003      	movs	r0, #3
 8002266:	f000 f92f 	bl	80024c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800226a:	2000      	movs	r0, #0
 800226c:	f000 f808 	bl	8002280 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002270:	f7ff ff52 	bl	8002118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40023c00 	.word	0x40023c00

08002280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_InitTick+0x54>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_InitTick+0x58>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	4619      	mov	r1, r3
 8002292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002296:	fbb3 f3f1 	udiv	r3, r3, r1
 800229a:	fbb2 f3f3 	udiv	r3, r2, r3
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f939 	bl	8002516 <HAL_SYSTICK_Config>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e00e      	b.n	80022cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b0f      	cmp	r3, #15
 80022b2:	d80a      	bhi.n	80022ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b4:	2200      	movs	r2, #0
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	f04f 30ff 	mov.w	r0, #4294967295
 80022bc:	f000 f90f 	bl	80024de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022c0:	4a06      	ldr	r2, [pc, #24]	; (80022dc <HAL_InitTick+0x5c>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	e000      	b.n	80022cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20012c04 	.word	0x20012c04
 80022d8:	20012c0c 	.word	0x20012c0c
 80022dc:	20012c08 	.word	0x20012c08

080022e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <HAL_IncTick+0x20>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_IncTick+0x24>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4413      	add	r3, r2
 80022f0:	4a04      	ldr	r2, [pc, #16]	; (8002304 <HAL_IncTick+0x24>)
 80022f2:	6013      	str	r3, [r2, #0]
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	20012c0c 	.word	0x20012c0c
 8002304:	20012d2c 	.word	0x20012d2c

08002308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return uwTick;
 800230c:	4b03      	ldr	r3, [pc, #12]	; (800231c <HAL_GetTick+0x14>)
 800230e:	681b      	ldr	r3, [r3, #0]
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	20012d2c 	.word	0x20012d2c

08002320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002328:	f7ff ffee 	bl	8002308 <HAL_GetTick>
 800232c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002338:	d005      	beq.n	8002346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_Delay+0x40>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4413      	add	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002346:	bf00      	nop
 8002348:	f7ff ffde 	bl	8002308 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	429a      	cmp	r2, r3
 8002356:	d8f7      	bhi.n	8002348 <HAL_Delay+0x28>
  {
  }
}
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20012c0c 	.word	0x20012c0c

08002364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002380:	4013      	ands	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800238c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002396:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	60d3      	str	r3, [r2, #12]
}
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <__NVIC_GetPriorityGrouping+0x18>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	f003 0307 	and.w	r3, r3, #7
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	6039      	str	r1, [r7, #0]
 80023d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	db0a      	blt.n	80023f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	490c      	ldr	r1, [pc, #48]	; (8002414 <__NVIC_SetPriority+0x4c>)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	0112      	lsls	r2, r2, #4
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	440b      	add	r3, r1
 80023ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f0:	e00a      	b.n	8002408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4908      	ldr	r1, [pc, #32]	; (8002418 <__NVIC_SetPriority+0x50>)
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	3b04      	subs	r3, #4
 8002400:	0112      	lsls	r2, r2, #4
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	440b      	add	r3, r1
 8002406:	761a      	strb	r2, [r3, #24]
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	e000e100 	.word	0xe000e100
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	; 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f1c3 0307 	rsb	r3, r3, #7
 8002436:	2b04      	cmp	r3, #4
 8002438:	bf28      	it	cs
 800243a:	2304      	movcs	r3, #4
 800243c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3304      	adds	r3, #4
 8002442:	2b06      	cmp	r3, #6
 8002444:	d902      	bls.n	800244c <NVIC_EncodePriority+0x30>
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3b03      	subs	r3, #3
 800244a:	e000      	b.n	800244e <NVIC_EncodePriority+0x32>
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002450:	f04f 32ff 	mov.w	r2, #4294967295
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43da      	mvns	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	401a      	ands	r2, r3
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002464:	f04f 31ff 	mov.w	r1, #4294967295
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	43d9      	mvns	r1, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	4313      	orrs	r3, r2
         );
}
 8002476:	4618      	mov	r0, r3
 8002478:	3724      	adds	r7, #36	; 0x24
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
	...

08002484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002494:	d301      	bcc.n	800249a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002496:	2301      	movs	r3, #1
 8002498:	e00f      	b.n	80024ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249a:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <SysTick_Config+0x40>)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3b01      	subs	r3, #1
 80024a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024a2:	210f      	movs	r1, #15
 80024a4:	f04f 30ff 	mov.w	r0, #4294967295
 80024a8:	f7ff ff8e 	bl	80023c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <SysTick_Config+0x40>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024b2:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <SysTick_Config+0x40>)
 80024b4:	2207      	movs	r2, #7
 80024b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	e000e010 	.word	0xe000e010

080024c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff ff47 	bl	8002364 <__NVIC_SetPriorityGrouping>
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024de:	b580      	push	{r7, lr}
 80024e0:	b086      	sub	sp, #24
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	4603      	mov	r3, r0
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f0:	f7ff ff5c 	bl	80023ac <__NVIC_GetPriorityGrouping>
 80024f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68b9      	ldr	r1, [r7, #8]
 80024fa:	6978      	ldr	r0, [r7, #20]
 80024fc:	f7ff ff8e 	bl	800241c <NVIC_EncodePriority>
 8002500:	4602      	mov	r2, r0
 8002502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002506:	4611      	mov	r1, r2
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff ff5d 	bl	80023c8 <__NVIC_SetPriority>
}
 800250e:	bf00      	nop
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff ffb0 	bl	8002484 <SysTick_Config>
 8002524:	4603      	mov	r3, r0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002530:	b480      	push	{r7}
 8002532:	b089      	sub	sp, #36	; 0x24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800253e:	2300      	movs	r3, #0
 8002540:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	e177      	b.n	800283c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800254c:	2201      	movs	r2, #1
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	429a      	cmp	r2, r3
 8002566:	f040 8166 	bne.w	8002836 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d00b      	beq.n	800258a <HAL_GPIO_Init+0x5a>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b02      	cmp	r3, #2
 8002578:	d007      	beq.n	800258a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800257e:	2b11      	cmp	r3, #17
 8002580:	d003      	beq.n	800258a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b12      	cmp	r3, #18
 8002588:	d130      	bne.n	80025ec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	2203      	movs	r2, #3
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c0:	2201      	movs	r2, #1
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	f003 0201 	and.w	r2, r3, #1
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	2203      	movs	r2, #3
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0xfc>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b12      	cmp	r3, #18
 800262a:	d123      	bne.n	8002674 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	08da      	lsrs	r2, r3, #3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3208      	adds	r2, #8
 8002634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	220f      	movs	r2, #15
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	08da      	lsrs	r2, r3, #3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3208      	adds	r2, #8
 800266e:	69b9      	ldr	r1, [r7, #24]
 8002670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	2203      	movs	r2, #3
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 0203 	and.w	r2, r3, #3
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 80c0 	beq.w	8002836 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	4b65      	ldr	r3, [pc, #404]	; (8002850 <HAL_GPIO_Init+0x320>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	4a64      	ldr	r2, [pc, #400]	; (8002850 <HAL_GPIO_Init+0x320>)
 80026c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c4:	6453      	str	r3, [r2, #68]	; 0x44
 80026c6:	4b62      	ldr	r3, [pc, #392]	; (8002850 <HAL_GPIO_Init+0x320>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026d2:	4a60      	ldr	r2, [pc, #384]	; (8002854 <HAL_GPIO_Init+0x324>)
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	089b      	lsrs	r3, r3, #2
 80026d8:	3302      	adds	r3, #2
 80026da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	220f      	movs	r2, #15
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a57      	ldr	r2, [pc, #348]	; (8002858 <HAL_GPIO_Init+0x328>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d037      	beq.n	800276e <HAL_GPIO_Init+0x23e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a56      	ldr	r2, [pc, #344]	; (800285c <HAL_GPIO_Init+0x32c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d031      	beq.n	800276a <HAL_GPIO_Init+0x23a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a55      	ldr	r2, [pc, #340]	; (8002860 <HAL_GPIO_Init+0x330>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d02b      	beq.n	8002766 <HAL_GPIO_Init+0x236>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a54      	ldr	r2, [pc, #336]	; (8002864 <HAL_GPIO_Init+0x334>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d025      	beq.n	8002762 <HAL_GPIO_Init+0x232>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a53      	ldr	r2, [pc, #332]	; (8002868 <HAL_GPIO_Init+0x338>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d01f      	beq.n	800275e <HAL_GPIO_Init+0x22e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a52      	ldr	r2, [pc, #328]	; (800286c <HAL_GPIO_Init+0x33c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d019      	beq.n	800275a <HAL_GPIO_Init+0x22a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a51      	ldr	r2, [pc, #324]	; (8002870 <HAL_GPIO_Init+0x340>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d013      	beq.n	8002756 <HAL_GPIO_Init+0x226>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a50      	ldr	r2, [pc, #320]	; (8002874 <HAL_GPIO_Init+0x344>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00d      	beq.n	8002752 <HAL_GPIO_Init+0x222>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a4f      	ldr	r2, [pc, #316]	; (8002878 <HAL_GPIO_Init+0x348>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d007      	beq.n	800274e <HAL_GPIO_Init+0x21e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a4e      	ldr	r2, [pc, #312]	; (800287c <HAL_GPIO_Init+0x34c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d101      	bne.n	800274a <HAL_GPIO_Init+0x21a>
 8002746:	2309      	movs	r3, #9
 8002748:	e012      	b.n	8002770 <HAL_GPIO_Init+0x240>
 800274a:	230a      	movs	r3, #10
 800274c:	e010      	b.n	8002770 <HAL_GPIO_Init+0x240>
 800274e:	2308      	movs	r3, #8
 8002750:	e00e      	b.n	8002770 <HAL_GPIO_Init+0x240>
 8002752:	2307      	movs	r3, #7
 8002754:	e00c      	b.n	8002770 <HAL_GPIO_Init+0x240>
 8002756:	2306      	movs	r3, #6
 8002758:	e00a      	b.n	8002770 <HAL_GPIO_Init+0x240>
 800275a:	2305      	movs	r3, #5
 800275c:	e008      	b.n	8002770 <HAL_GPIO_Init+0x240>
 800275e:	2304      	movs	r3, #4
 8002760:	e006      	b.n	8002770 <HAL_GPIO_Init+0x240>
 8002762:	2303      	movs	r3, #3
 8002764:	e004      	b.n	8002770 <HAL_GPIO_Init+0x240>
 8002766:	2302      	movs	r3, #2
 8002768:	e002      	b.n	8002770 <HAL_GPIO_Init+0x240>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <HAL_GPIO_Init+0x240>
 800276e:	2300      	movs	r3, #0
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	f002 0203 	and.w	r2, r2, #3
 8002776:	0092      	lsls	r2, r2, #2
 8002778:	4093      	lsls	r3, r2
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002780:	4934      	ldr	r1, [pc, #208]	; (8002854 <HAL_GPIO_Init+0x324>)
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	089b      	lsrs	r3, r3, #2
 8002786:	3302      	adds	r3, #2
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800278e:	4b3c      	ldr	r3, [pc, #240]	; (8002880 <HAL_GPIO_Init+0x350>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027b2:	4a33      	ldr	r2, [pc, #204]	; (8002880 <HAL_GPIO_Init+0x350>)
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027b8:	4b31      	ldr	r3, [pc, #196]	; (8002880 <HAL_GPIO_Init+0x350>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027dc:	4a28      	ldr	r2, [pc, #160]	; (8002880 <HAL_GPIO_Init+0x350>)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027e2:	4b27      	ldr	r3, [pc, #156]	; (8002880 <HAL_GPIO_Init+0x350>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	43db      	mvns	r3, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4013      	ands	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002806:	4a1e      	ldr	r2, [pc, #120]	; (8002880 <HAL_GPIO_Init+0x350>)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800280c:	4b1c      	ldr	r3, [pc, #112]	; (8002880 <HAL_GPIO_Init+0x350>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002830:	4a13      	ldr	r2, [pc, #76]	; (8002880 <HAL_GPIO_Init+0x350>)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3301      	adds	r3, #1
 800283a:	61fb      	str	r3, [r7, #28]
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	2b0f      	cmp	r3, #15
 8002840:	f67f ae84 	bls.w	800254c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002844:	bf00      	nop
 8002846:	3724      	adds	r7, #36	; 0x24
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	40023800 	.word	0x40023800
 8002854:	40013800 	.word	0x40013800
 8002858:	40020000 	.word	0x40020000
 800285c:	40020400 	.word	0x40020400
 8002860:	40020800 	.word	0x40020800
 8002864:	40020c00 	.word	0x40020c00
 8002868:	40021000 	.word	0x40021000
 800286c:	40021400 	.word	0x40021400
 8002870:	40021800 	.word	0x40021800
 8002874:	40021c00 	.word	0x40021c00
 8002878:	40022000 	.word	0x40022000
 800287c:	40022400 	.word	0x40022400
 8002880:	40013c00 	.word	0x40013c00

08002884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	807b      	strh	r3, [r7, #2]
 8002890:	4613      	mov	r3, r2
 8002892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002894:	787b      	ldrb	r3, [r7, #1]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800289a:	887a      	ldrh	r2, [r7, #2]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028a0:	e003      	b.n	80028aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028a2:	887b      	ldrh	r3, [r7, #2]
 80028a4:	041a      	lsls	r2, r3, #16
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	619a      	str	r2, [r3, #24]
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U, tmp1 = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e0bf      	b.n	8002a52 <HAL_LTDC_Init+0x19a>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe fece 	bl	8001688 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699a      	ldr	r2, [r3, #24]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002902:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6999      	ldr	r1, [r3, #24]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002918:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6899      	ldr	r1, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	4b4a      	ldr	r3, [pc, #296]	; (8002a5c <HAL_LTDC_Init+0x1a4>)
 8002934:	400b      	ands	r3, r1
 8002936:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	041b      	lsls	r3, r3, #16
 800293e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6899      	ldr	r1, [r3, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699a      	ldr	r2, [r3, #24]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68d9      	ldr	r1, [r3, #12]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	4b3e      	ldr	r3, [pc, #248]	; (8002a5c <HAL_LTDC_Init+0x1a4>)
 8002962:	400b      	ands	r3, r1
 8002964:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	041b      	lsls	r3, r3, #16
 800296c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68d9      	ldr	r1, [r3, #12]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1a      	ldr	r2, [r3, #32]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6919      	ldr	r1, [r3, #16]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	4b33      	ldr	r3, [pc, #204]	; (8002a5c <HAL_LTDC_Init+0x1a4>)
 8002990:	400b      	ands	r3, r1
 8002992:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	041b      	lsls	r3, r3, #16
 800299a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6919      	ldr	r1, [r3, #16]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6959      	ldr	r1, [r3, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4b27      	ldr	r3, [pc, #156]	; (8002a5c <HAL_LTDC_Init+0x1a4>)
 80029be:	400b      	ands	r3, r1
 80029c0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	041b      	lsls	r3, r3, #16
 80029c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6959      	ldr	r1, [r3, #20]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029e6:	021b      	lsls	r3, r3, #8
 80029e8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80029f0:	041b      	lsls	r3, r3, #16
 80029f2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002a02:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0206 	orr.w	r2, r2, #6
 8002a2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699a      	ldr	r2, [r3, #24]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0201 	orr.w	r2, r2, #1
 8002a3e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	f000f800 	.word	0xf000f800

08002a60 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8002a60:	b5b0      	push	{r4, r5, r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));	
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_LTDC_ConfigLayer+0x1a>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e02c      	b.n	8002ad4 <HAL_LTDC_ConfigLayer+0x74>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2202      	movs	r2, #2
 8002a86:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2134      	movs	r1, #52	; 0x34
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	4413      	add	r3, r2
 8002a96:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	4614      	mov	r4, r2
 8002a9e:	461d      	mov	r5, r3
 8002aa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aac:	682b      	ldr	r3, [r5, #0]
 8002aae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	68b9      	ldr	r1, [r7, #8]
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 f923 	bl	8002d00 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bdb0      	pop	{r4, r5, r7, pc}

08002adc <HAL_LTDC_ConfigCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigCLUT(LTDC_HandleTypeDef *hltdc, uint32_t *pCLUT, uint32_t CLUTSize, uint32_t LayerIdx)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	; 0x24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61fb      	str	r3, [r7, #28]
  uint32_t counter = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61bb      	str	r3, [r7, #24]
  uint32_t pcounter = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_LTDC_ConfigCLUT+0x28>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e059      	b.n	8002bb8 <HAL_LTDC_ConfigCLUT+0xdc>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;  
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  for(counter = 0U; (counter < CLUTSize); counter++)
 8002b14:	2300      	movs	r3, #0
 8002b16:	61bb      	str	r3, [r7, #24]
 8002b18:	e041      	b.n	8002b9e <HAL_LTDC_ConfigCLUT+0xc2>
  {
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	2134      	movs	r1, #52	; 0x34
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	3348      	adds	r3, #72	; 0x48
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b06      	cmp	r3, #6
 8002b2c:	d114      	bne.n	8002b58 <HAL_LTDC_ConfigCLUT+0x7c>
    {
      tmp  = (((counter + 16U*counter) << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4613      	mov	r3, r2
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	4413      	add	r3, r2
 8002b36:	061a      	lsls	r2, r3, #24
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	e010      	b.n	8002b7a <HAL_LTDC_ConfigCLUT+0x9e>
    }
    else
    { 
      tmp  = ((counter << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	061a      	lsls	r2, r3, #24
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	431a      	orrs	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61fb      	str	r3, [r7, #28]
    }
    pcounter = (uint32_t)pCLUT + sizeof(*pCLUT);
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	617b      	str	r3, [r7, #20]
    pCLUT = (uint32_t *)pcounter;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	60bb      	str	r3, [r7, #8]

    /* Specifies the C-LUT address and RGB value */
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	01db      	lsls	r3, r3, #7
 8002b8e:	4413      	add	r3, r2
 8002b90:	3384      	adds	r3, #132	; 0x84
 8002b92:	461a      	mov	r2, r3
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	6413      	str	r3, [r2, #64]	; 0x40
  for(counter = 0U; (counter < CLUTSize); counter++)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d3b9      	bcc.n	8002b1a <HAL_LTDC_ConfigCLUT+0x3e>
  }
  
  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);  
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3724      	adds	r7, #36	; 0x24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_LTDC_EnableCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_LTDC_EnableCLUT+0x18>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e026      	b.n	8002c2a <HAL_LTDC_EnableCLUT+0x66>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color lookup table by setting CLUTEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	01db      	lsls	r3, r3, #7
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3384      	adds	r3, #132	; 0x84
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	4611      	mov	r1, r2
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	01d2      	lsls	r2, r2, #7
 8002c06:	440a      	add	r2, r1
 8002c08:	3284      	adds	r2, #132	; 0x84
 8002c0a:	f043 0310 	orr.w	r3, r3, #16
 8002c0e:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2201      	movs	r2, #1
 8002c16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b086      	sub	sp, #24
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	60f8      	str	r0, [r7, #12]
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_LTDC_SetAddress+0x1a>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e024      	b.n	8002c9a <HAL_LTDC_SetAddress+0x64>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2234      	movs	r2, #52	; 0x34
 8002c64:	fb02 f303 	mul.w	r3, r2, r3
 8002c68:	3338      	adds	r3, #56	; 0x38
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6979      	ldr	r1, [r7, #20]
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f840 	bl	8002d00 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2201      	movs	r2, #1
 8002c86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation. 
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_LTDC_Reload+0x18>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e01c      	b.n	8002cf4 <HAL_LTDC_Reload+0x52>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;  
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  
  /* Enable the Reload interrupt */  
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f042 0208 	orr.w	r2, r2, #8
 8002cd8:	635a      	str	r2, [r3, #52]	; 0x34
       
  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;        
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  
  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b089      	sub	sp, #36	; 0x24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	0c1b      	lsrs	r3, r3, #16
 8002d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d28:	4413      	add	r3, r2
 8002d2a:	041b      	lsls	r3, r3, #16
 8002d2c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	01db      	lsls	r3, r3, #7
 8002d38:	4413      	add	r3, r2
 8002d3a:	3384      	adds	r3, #132	; 0x84
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	4611      	mov	r1, r2
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	01d2      	lsls	r2, r2, #7
 8002d48:	440a      	add	r2, r1
 8002d4a:	3284      	adds	r2, #132	; 0x84
 8002d4c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002d50:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	0c1b      	lsrs	r3, r3, #16
 8002d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d62:	4413      	add	r3, r2
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	01db      	lsls	r3, r3, #7
 8002d70:	440b      	add	r3, r1
 8002d72:	3384      	adds	r3, #132	; 0x84
 8002d74:	4619      	mov	r1, r3
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	68da      	ldr	r2, [r3, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d8a:	4413      	add	r3, r2
 8002d8c:	041b      	lsls	r3, r3, #16
 8002d8e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	01db      	lsls	r3, r3, #7
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3384      	adds	r3, #132	; 0x84
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	4611      	mov	r1, r2
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	01d2      	lsls	r2, r2, #7
 8002daa:	440a      	add	r2, r1
 8002dac:	3284      	adds	r2, #132	; 0x84
 8002dae:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002db2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dc2:	4413      	add	r3, r2
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4619      	mov	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	01db      	lsls	r3, r3, #7
 8002dd0:	440b      	add	r3, r1
 8002dd2:	3384      	adds	r3, #132	; 0x84
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	461a      	mov	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	01db      	lsls	r3, r3, #7
 8002de6:	4413      	add	r3, r2
 8002de8:	3384      	adds	r3, #132	; 0x84
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	4611      	mov	r1, r2
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	01d2      	lsls	r2, r2, #7
 8002df6:	440a      	add	r2, r1
 8002df8:	3284      	adds	r2, #132	; 0x84
 8002dfa:	f023 0307 	bic.w	r3, r3, #7
 8002dfe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	01db      	lsls	r3, r3, #7
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3384      	adds	r3, #132	; 0x84
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002e26:	041b      	lsls	r3, r3, #16
 8002e28:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	061b      	lsls	r3, r3, #24
 8002e30:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	01db      	lsls	r3, r3, #7
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3384      	adds	r3, #132	; 0x84
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	01db      	lsls	r3, r3, #7
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3384      	adds	r3, #132	; 0x84
 8002e50:	461a      	mov	r2, r3
 8002e52:	2300      	movs	r3, #0
 8002e54:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	431a      	orrs	r2, r3
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	431a      	orrs	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	01db      	lsls	r3, r3, #7
 8002e70:	440b      	add	r3, r1
 8002e72:	3384      	adds	r3, #132	; 0x84
 8002e74:	4619      	mov	r1, r3
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	461a      	mov	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	01db      	lsls	r3, r3, #7
 8002e86:	4413      	add	r3, r2
 8002e88:	3384      	adds	r3, #132	; 0x84
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	4611      	mov	r1, r2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	01d2      	lsls	r2, r2, #7
 8002e96:	440a      	add	r2, r1
 8002e98:	3284      	adds	r2, #132	; 0x84
 8002e9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e9e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	01db      	lsls	r3, r3, #7
 8002eaa:	4413      	add	r3, r2
 8002eac:	3384      	adds	r3, #132	; 0x84
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	01db      	lsls	r3, r3, #7
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3384      	adds	r3, #132	; 0x84
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	4611      	mov	r1, r2
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	01d2      	lsls	r2, r2, #7
 8002ed0:	440a      	add	r2, r1
 8002ed2:	3284      	adds	r2, #132	; 0x84
 8002ed4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ed8:	f023 0307 	bic.w	r3, r3, #7
 8002edc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	69da      	ldr	r2, [r3, #28]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	68f9      	ldr	r1, [r7, #12]
 8002ee8:	6809      	ldr	r1, [r1, #0]
 8002eea:	4608      	mov	r0, r1
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	01c9      	lsls	r1, r1, #7
 8002ef0:	4401      	add	r1, r0
 8002ef2:	3184      	adds	r1, #132	; 0x84
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	01db      	lsls	r3, r3, #7
 8002f02:	4413      	add	r3, r2
 8002f04:	3384      	adds	r3, #132	; 0x84
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	01db      	lsls	r3, r3, #7
 8002f12:	4413      	add	r3, r2
 8002f14:	3384      	adds	r3, #132	; 0x84
 8002f16:	461a      	mov	r2, r3
 8002f18:	2300      	movs	r3, #0
 8002f1a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	01db      	lsls	r3, r3, #7
 8002f26:	4413      	add	r3, r2
 8002f28:	3384      	adds	r3, #132	; 0x84
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d102      	bne.n	8002f40 <LTDC_SetConfig+0x240>
  {
    tmp = 4U;
 8002f3a:	2304      	movs	r3, #4
 8002f3c:	61fb      	str	r3, [r7, #28]
 8002f3e:	e01b      	b.n	8002f78 <LTDC_SetConfig+0x278>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d102      	bne.n	8002f4e <LTDC_SetConfig+0x24e>
  {
    tmp = 3U;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	61fb      	str	r3, [r7, #28]
 8002f4c:	e014      	b.n	8002f78 <LTDC_SetConfig+0x278>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d00b      	beq.n	8002f6e <LTDC_SetConfig+0x26e>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d007      	beq.n	8002f6e <LTDC_SetConfig+0x26e>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d003      	beq.n	8002f6e <LTDC_SetConfig+0x26e>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002f6a:	2b07      	cmp	r3, #7
 8002f6c:	d102      	bne.n	8002f74 <LTDC_SetConfig+0x274>
  {
    tmp = 2U;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	e001      	b.n	8002f78 <LTDC_SetConfig+0x278>
  }
  else
  {
    tmp = 1U;
 8002f74:	2301      	movs	r3, #1
 8002f76:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	01db      	lsls	r3, r3, #7
 8002f82:	4413      	add	r3, r2
 8002f84:	3384      	adds	r3, #132	; 0x84
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	01d2      	lsls	r2, r2, #7
 8002f92:	440a      	add	r2, r1
 8002f94:	3284      	adds	r2, #132	; 0x84
 8002f96:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002f9a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa0:	69fa      	ldr	r2, [r7, #28]
 8002fa2:	fb02 f303 	mul.w	r3, r2, r3
 8002fa6:	041a      	lsls	r2, r3, #16
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	6859      	ldr	r1, [r3, #4]
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	1acb      	subs	r3, r1, r3
 8002fb2:	69f9      	ldr	r1, [r7, #28]
 8002fb4:	fb01 f303 	mul.w	r3, r1, r3
 8002fb8:	3303      	adds	r3, #3
 8002fba:	68f9      	ldr	r1, [r7, #12]
 8002fbc:	6809      	ldr	r1, [r1, #0]
 8002fbe:	4608      	mov	r0, r1
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	01c9      	lsls	r1, r1, #7
 8002fc4:	4401      	add	r1, r0
 8002fc6:	3184      	adds	r1, #132	; 0x84
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	01db      	lsls	r3, r3, #7
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3384      	adds	r3, #132	; 0x84
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	01d2      	lsls	r2, r2, #7
 8002fe6:	440a      	add	r2, r1
 8002fe8:	3284      	adds	r2, #132	; 0x84
 8002fea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002fee:	f023 0307 	bic.w	r3, r3, #7
 8002ff2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	01db      	lsls	r3, r3, #7
 8002ffe:	4413      	add	r3, r2
 8003000:	3384      	adds	r3, #132	; 0x84
 8003002:	461a      	mov	r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	01db      	lsls	r3, r3, #7
 8003014:	4413      	add	r3, r2
 8003016:	3384      	adds	r3, #132	; 0x84
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	6812      	ldr	r2, [r2, #0]
 800301e:	4611      	mov	r1, r2
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	01d2      	lsls	r2, r2, #7
 8003024:	440a      	add	r2, r1
 8003026:	3284      	adds	r2, #132	; 0x84
 8003028:	f043 0301 	orr.w	r3, r3, #1
 800302c:	6013      	str	r3, [r2, #0]
}
 800302e:	bf00      	nop
 8003030:	3724      	adds	r7, #36	; 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003042:	2300      	movs	r3, #0
 8003044:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	603b      	str	r3, [r7, #0]
 800304a:	4b20      	ldr	r3, [pc, #128]	; (80030cc <HAL_PWREx_EnableOverDrive+0x90>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	4a1f      	ldr	r2, [pc, #124]	; (80030cc <HAL_PWREx_EnableOverDrive+0x90>)
 8003050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003054:	6413      	str	r3, [r2, #64]	; 0x40
 8003056:	4b1d      	ldr	r3, [pc, #116]	; (80030cc <HAL_PWREx_EnableOverDrive+0x90>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003062:	4b1b      	ldr	r3, [pc, #108]	; (80030d0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003064:	2201      	movs	r2, #1
 8003066:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003068:	f7ff f94e 	bl	8002308 <HAL_GetTick>
 800306c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800306e:	e009      	b.n	8003084 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003070:	f7ff f94a 	bl	8002308 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800307e:	d901      	bls.n	8003084 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e01f      	b.n	80030c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003084:	4b13      	ldr	r3, [pc, #76]	; (80030d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800308c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003090:	d1ee      	bne.n	8003070 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003092:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003094:	2201      	movs	r2, #1
 8003096:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003098:	f7ff f936 	bl	8002308 <HAL_GetTick>
 800309c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800309e:	e009      	b.n	80030b4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030a0:	f7ff f932 	bl	8002308 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030ae:	d901      	bls.n	80030b4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e007      	b.n	80030c4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030b4:	4b07      	ldr	r3, [pc, #28]	; (80030d4 <HAL_PWREx_EnableOverDrive+0x98>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030c0:	d1ee      	bne.n	80030a0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40023800 	.word	0x40023800
 80030d0:	420e0040 	.word	0x420e0040
 80030d4:	40007000 	.word	0x40007000
 80030d8:	420e0044 	.word	0x420e0044

080030dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e25b      	b.n	80035a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d075      	beq.n	80031e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030fa:	4ba3      	ldr	r3, [pc, #652]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b04      	cmp	r3, #4
 8003104:	d00c      	beq.n	8003120 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003106:	4ba0      	ldr	r3, [pc, #640]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800310e:	2b08      	cmp	r3, #8
 8003110:	d112      	bne.n	8003138 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003112:	4b9d      	ldr	r3, [pc, #628]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800311e:	d10b      	bne.n	8003138 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003120:	4b99      	ldr	r3, [pc, #612]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d05b      	beq.n	80031e4 <HAL_RCC_OscConfig+0x108>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d157      	bne.n	80031e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e236      	b.n	80035a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003140:	d106      	bne.n	8003150 <HAL_RCC_OscConfig+0x74>
 8003142:	4b91      	ldr	r3, [pc, #580]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a90      	ldr	r2, [pc, #576]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	e01d      	b.n	800318c <HAL_RCC_OscConfig+0xb0>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003158:	d10c      	bne.n	8003174 <HAL_RCC_OscConfig+0x98>
 800315a:	4b8b      	ldr	r3, [pc, #556]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a8a      	ldr	r2, [pc, #552]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 8003160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	4b88      	ldr	r3, [pc, #544]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a87      	ldr	r2, [pc, #540]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 800316c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	e00b      	b.n	800318c <HAL_RCC_OscConfig+0xb0>
 8003174:	4b84      	ldr	r3, [pc, #528]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a83      	ldr	r2, [pc, #524]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 800317a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800317e:	6013      	str	r3, [r2, #0]
 8003180:	4b81      	ldr	r3, [pc, #516]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a80      	ldr	r2, [pc, #512]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 8003186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800318a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d013      	beq.n	80031bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7ff f8b8 	bl	8002308 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800319c:	f7ff f8b4 	bl	8002308 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b64      	cmp	r3, #100	; 0x64
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e1fb      	b.n	80035a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ae:	4b76      	ldr	r3, [pc, #472]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0xc0>
 80031ba:	e014      	b.n	80031e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031bc:	f7ff f8a4 	bl	8002308 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c4:	f7ff f8a0 	bl	8002308 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b64      	cmp	r3, #100	; 0x64
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e1e7      	b.n	80035a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d6:	4b6c      	ldr	r3, [pc, #432]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f0      	bne.n	80031c4 <HAL_RCC_OscConfig+0xe8>
 80031e2:	e000      	b.n	80031e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d063      	beq.n	80032ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031f2:	4b65      	ldr	r3, [pc, #404]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 030c 	and.w	r3, r3, #12
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00b      	beq.n	8003216 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031fe:	4b62      	ldr	r3, [pc, #392]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003206:	2b08      	cmp	r3, #8
 8003208:	d11c      	bne.n	8003244 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800320a:	4b5f      	ldr	r3, [pc, #380]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d116      	bne.n	8003244 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003216:	4b5c      	ldr	r3, [pc, #368]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d005      	beq.n	800322e <HAL_RCC_OscConfig+0x152>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d001      	beq.n	800322e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e1bb      	b.n	80035a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322e:	4b56      	ldr	r3, [pc, #344]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	4952      	ldr	r1, [pc, #328]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003242:	e03a      	b.n	80032ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d020      	beq.n	800328e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800324c:	4b4f      	ldr	r3, [pc, #316]	; (800338c <HAL_RCC_OscConfig+0x2b0>)
 800324e:	2201      	movs	r2, #1
 8003250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003252:	f7ff f859 	bl	8002308 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800325a:	f7ff f855 	bl	8002308 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e19c      	b.n	80035a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800326c:	4b46      	ldr	r3, [pc, #280]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0f0      	beq.n	800325a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003278:	4b43      	ldr	r3, [pc, #268]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	4940      	ldr	r1, [pc, #256]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 8003288:	4313      	orrs	r3, r2
 800328a:	600b      	str	r3, [r1, #0]
 800328c:	e015      	b.n	80032ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800328e:	4b3f      	ldr	r3, [pc, #252]	; (800338c <HAL_RCC_OscConfig+0x2b0>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003294:	f7ff f838 	bl	8002308 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800329c:	f7ff f834 	bl	8002308 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e17b      	b.n	80035a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ae:	4b36      	ldr	r3, [pc, #216]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d030      	beq.n	8003328 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d016      	beq.n	80032fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ce:	4b30      	ldr	r3, [pc, #192]	; (8003390 <HAL_RCC_OscConfig+0x2b4>)
 80032d0:	2201      	movs	r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d4:	f7ff f818 	bl	8002308 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032dc:	f7ff f814 	bl	8002308 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e15b      	b.n	80035a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ee:	4b26      	ldr	r3, [pc, #152]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 80032f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCC_OscConfig+0x200>
 80032fa:	e015      	b.n	8003328 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032fc:	4b24      	ldr	r3, [pc, #144]	; (8003390 <HAL_RCC_OscConfig+0x2b4>)
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003302:	f7ff f801 	bl	8002308 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800330a:	f7fe fffd 	bl	8002308 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e144      	b.n	80035a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800331c:	4b1a      	ldr	r3, [pc, #104]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 800331e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f0      	bne.n	800330a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80a0 	beq.w	8003476 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003336:	2300      	movs	r3, #0
 8003338:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800333a:	4b13      	ldr	r3, [pc, #76]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10f      	bne.n	8003366 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	4b0f      	ldr	r3, [pc, #60]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	4a0e      	ldr	r2, [pc, #56]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 8003350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003354:	6413      	str	r3, [r2, #64]	; 0x40
 8003356:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <HAL_RCC_OscConfig+0x2ac>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335e:	60bb      	str	r3, [r7, #8]
 8003360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003362:	2301      	movs	r3, #1
 8003364:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003366:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_RCC_OscConfig+0x2b8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336e:	2b00      	cmp	r3, #0
 8003370:	d121      	bne.n	80033b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003372:	4b08      	ldr	r3, [pc, #32]	; (8003394 <HAL_RCC_OscConfig+0x2b8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a07      	ldr	r2, [pc, #28]	; (8003394 <HAL_RCC_OscConfig+0x2b8>)
 8003378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800337c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800337e:	f7fe ffc3 	bl	8002308 <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003384:	e011      	b.n	80033aa <HAL_RCC_OscConfig+0x2ce>
 8003386:	bf00      	nop
 8003388:	40023800 	.word	0x40023800
 800338c:	42470000 	.word	0x42470000
 8003390:	42470e80 	.word	0x42470e80
 8003394:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003398:	f7fe ffb6 	bl	8002308 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e0fd      	b.n	80035a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033aa:	4b81      	ldr	r3, [pc, #516]	; (80035b0 <HAL_RCC_OscConfig+0x4d4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d106      	bne.n	80033cc <HAL_RCC_OscConfig+0x2f0>
 80033be:	4b7d      	ldr	r3, [pc, #500]	; (80035b4 <HAL_RCC_OscConfig+0x4d8>)
 80033c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c2:	4a7c      	ldr	r2, [pc, #496]	; (80035b4 <HAL_RCC_OscConfig+0x4d8>)
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	6713      	str	r3, [r2, #112]	; 0x70
 80033ca:	e01c      	b.n	8003406 <HAL_RCC_OscConfig+0x32a>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	2b05      	cmp	r3, #5
 80033d2:	d10c      	bne.n	80033ee <HAL_RCC_OscConfig+0x312>
 80033d4:	4b77      	ldr	r3, [pc, #476]	; (80035b4 <HAL_RCC_OscConfig+0x4d8>)
 80033d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d8:	4a76      	ldr	r2, [pc, #472]	; (80035b4 <HAL_RCC_OscConfig+0x4d8>)
 80033da:	f043 0304 	orr.w	r3, r3, #4
 80033de:	6713      	str	r3, [r2, #112]	; 0x70
 80033e0:	4b74      	ldr	r3, [pc, #464]	; (80035b4 <HAL_RCC_OscConfig+0x4d8>)
 80033e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e4:	4a73      	ldr	r2, [pc, #460]	; (80035b4 <HAL_RCC_OscConfig+0x4d8>)
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	6713      	str	r3, [r2, #112]	; 0x70
 80033ec:	e00b      	b.n	8003406 <HAL_RCC_OscConfig+0x32a>
 80033ee:	4b71      	ldr	r3, [pc, #452]	; (80035b4 <HAL_RCC_OscConfig+0x4d8>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	4a70      	ldr	r2, [pc, #448]	; (80035b4 <HAL_RCC_OscConfig+0x4d8>)
 80033f4:	f023 0301 	bic.w	r3, r3, #1
 80033f8:	6713      	str	r3, [r2, #112]	; 0x70
 80033fa:	4b6e      	ldr	r3, [pc, #440]	; (80035b4 <HAL_RCC_OscConfig+0x4d8>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fe:	4a6d      	ldr	r2, [pc, #436]	; (80035b4 <HAL_RCC_OscConfig+0x4d8>)
 8003400:	f023 0304 	bic.w	r3, r3, #4
 8003404:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d015      	beq.n	800343a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340e:	f7fe ff7b 	bl	8002308 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003414:	e00a      	b.n	800342c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003416:	f7fe ff77 	bl	8002308 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	f241 3288 	movw	r2, #5000	; 0x1388
 8003424:	4293      	cmp	r3, r2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e0bc      	b.n	80035a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800342c:	4b61      	ldr	r3, [pc, #388]	; (80035b4 <HAL_RCC_OscConfig+0x4d8>)
 800342e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0ee      	beq.n	8003416 <HAL_RCC_OscConfig+0x33a>
 8003438:	e014      	b.n	8003464 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800343a:	f7fe ff65 	bl	8002308 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003440:	e00a      	b.n	8003458 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003442:	f7fe ff61 	bl	8002308 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003450:	4293      	cmp	r3, r2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e0a6      	b.n	80035a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003458:	4b56      	ldr	r3, [pc, #344]	; (80035b4 <HAL_RCC_OscConfig+0x4d8>)
 800345a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1ee      	bne.n	8003442 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003464:	7dfb      	ldrb	r3, [r7, #23]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d105      	bne.n	8003476 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346a:	4b52      	ldr	r3, [pc, #328]	; (80035b4 <HAL_RCC_OscConfig+0x4d8>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	4a51      	ldr	r2, [pc, #324]	; (80035b4 <HAL_RCC_OscConfig+0x4d8>)
 8003470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003474:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 8092 	beq.w	80035a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003480:	4b4c      	ldr	r3, [pc, #304]	; (80035b4 <HAL_RCC_OscConfig+0x4d8>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 030c 	and.w	r3, r3, #12
 8003488:	2b08      	cmp	r3, #8
 800348a:	d05c      	beq.n	8003546 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d141      	bne.n	8003518 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003494:	4b48      	ldr	r3, [pc, #288]	; (80035b8 <HAL_RCC_OscConfig+0x4dc>)
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349a:	f7fe ff35 	bl	8002308 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a2:	f7fe ff31 	bl	8002308 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e078      	b.n	80035a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b4:	4b3f      	ldr	r3, [pc, #252]	; (80035b4 <HAL_RCC_OscConfig+0x4d8>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1f0      	bne.n	80034a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	69da      	ldr	r2, [r3, #28]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	019b      	lsls	r3, r3, #6
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d6:	085b      	lsrs	r3, r3, #1
 80034d8:	3b01      	subs	r3, #1
 80034da:	041b      	lsls	r3, r3, #16
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	061b      	lsls	r3, r3, #24
 80034e4:	4933      	ldr	r1, [pc, #204]	; (80035b4 <HAL_RCC_OscConfig+0x4d8>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ea:	4b33      	ldr	r3, [pc, #204]	; (80035b8 <HAL_RCC_OscConfig+0x4dc>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7fe ff0a 	bl	8002308 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f8:	f7fe ff06 	bl	8002308 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e04d      	b.n	80035a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800350a:	4b2a      	ldr	r3, [pc, #168]	; (80035b4 <HAL_RCC_OscConfig+0x4d8>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCC_OscConfig+0x41c>
 8003516:	e045      	b.n	80035a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003518:	4b27      	ldr	r3, [pc, #156]	; (80035b8 <HAL_RCC_OscConfig+0x4dc>)
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351e:	f7fe fef3 	bl	8002308 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003526:	f7fe feef 	bl	8002308 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e036      	b.n	80035a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003538:	4b1e      	ldr	r3, [pc, #120]	; (80035b4 <HAL_RCC_OscConfig+0x4d8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1f0      	bne.n	8003526 <HAL_RCC_OscConfig+0x44a>
 8003544:	e02e      	b.n	80035a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d101      	bne.n	8003552 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e029      	b.n	80035a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003552:	4b18      	ldr	r3, [pc, #96]	; (80035b4 <HAL_RCC_OscConfig+0x4d8>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	429a      	cmp	r2, r3
 8003564:	d11c      	bne.n	80035a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d115      	bne.n	80035a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800357a:	4013      	ands	r3, r2
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003580:	4293      	cmp	r3, r2
 8003582:	d10d      	bne.n	80035a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800358e:	429a      	cmp	r2, r3
 8003590:	d106      	bne.n	80035a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800359c:	429a      	cmp	r2, r3
 800359e:	d001      	beq.n	80035a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40007000 	.word	0x40007000
 80035b4:	40023800 	.word	0x40023800
 80035b8:	42470060 	.word	0x42470060

080035bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e0cc      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035d0:	4b68      	ldr	r3, [pc, #416]	; (8003774 <HAL_RCC_ClockConfig+0x1b8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d90c      	bls.n	80035f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035de:	4b65      	ldr	r3, [pc, #404]	; (8003774 <HAL_RCC_ClockConfig+0x1b8>)
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e6:	4b63      	ldr	r3, [pc, #396]	; (8003774 <HAL_RCC_ClockConfig+0x1b8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d001      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0b8      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d020      	beq.n	8003646 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003610:	4b59      	ldr	r3, [pc, #356]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	4a58      	ldr	r2, [pc, #352]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800361a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003628:	4b53      	ldr	r3, [pc, #332]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	4a52      	ldr	r2, [pc, #328]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003632:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003634:	4b50      	ldr	r3, [pc, #320]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	494d      	ldr	r1, [pc, #308]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	4313      	orrs	r3, r2
 8003644:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d044      	beq.n	80036dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d107      	bne.n	800366a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365a:	4b47      	ldr	r3, [pc, #284]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d119      	bne.n	800369a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e07f      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d003      	beq.n	800367a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003676:	2b03      	cmp	r3, #3
 8003678:	d107      	bne.n	800368a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800367a:	4b3f      	ldr	r3, [pc, #252]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d109      	bne.n	800369a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e06f      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800368a:	4b3b      	ldr	r3, [pc, #236]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e067      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800369a:	4b37      	ldr	r3, [pc, #220]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f023 0203 	bic.w	r2, r3, #3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	4934      	ldr	r1, [pc, #208]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036ac:	f7fe fe2c 	bl	8002308 <HAL_GetTick>
 80036b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b2:	e00a      	b.n	80036ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b4:	f7fe fe28 	bl	8002308 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e04f      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ca:	4b2b      	ldr	r3, [pc, #172]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 020c 	and.w	r2, r3, #12
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	429a      	cmp	r2, r3
 80036da:	d1eb      	bne.n	80036b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036dc:	4b25      	ldr	r3, [pc, #148]	; (8003774 <HAL_RCC_ClockConfig+0x1b8>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 030f 	and.w	r3, r3, #15
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d20c      	bcs.n	8003704 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ea:	4b22      	ldr	r3, [pc, #136]	; (8003774 <HAL_RCC_ClockConfig+0x1b8>)
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f2:	4b20      	ldr	r3, [pc, #128]	; (8003774 <HAL_RCC_ClockConfig+0x1b8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d001      	beq.n	8003704 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e032      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d008      	beq.n	8003722 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003710:	4b19      	ldr	r3, [pc, #100]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	4916      	ldr	r1, [pc, #88]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	4313      	orrs	r3, r2
 8003720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d009      	beq.n	8003742 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800372e:	4b12      	ldr	r3, [pc, #72]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	490e      	ldr	r1, [pc, #56]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	4313      	orrs	r3, r2
 8003740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003742:	f000 f821 	bl	8003788 <HAL_RCC_GetSysClockFreq>
 8003746:	4601      	mov	r1, r0
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	4a0a      	ldr	r2, [pc, #40]	; (800377c <HAL_RCC_ClockConfig+0x1c0>)
 8003754:	5cd3      	ldrb	r3, [r2, r3]
 8003756:	fa21 f303 	lsr.w	r3, r1, r3
 800375a:	4a09      	ldr	r2, [pc, #36]	; (8003780 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800375e:	4b09      	ldr	r3, [pc, #36]	; (8003784 <HAL_RCC_ClockConfig+0x1c8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7fe fd8c 	bl	8002280 <HAL_InitTick>

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40023c00 	.word	0x40023c00
 8003778:	40023800 	.word	0x40023800
 800377c:	08004574 	.word	0x08004574
 8003780:	20012c04 	.word	0x20012c04
 8003784:	20012c08 	.word	0x20012c08

08003788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	2300      	movs	r3, #0
 8003798:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800379a:	2300      	movs	r3, #0
 800379c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800379e:	4b63      	ldr	r3, [pc, #396]	; (800392c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d007      	beq.n	80037ba <HAL_RCC_GetSysClockFreq+0x32>
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d008      	beq.n	80037c0 <HAL_RCC_GetSysClockFreq+0x38>
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f040 80b4 	bne.w	800391c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037b4:	4b5e      	ldr	r3, [pc, #376]	; (8003930 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80037b6:	60bb      	str	r3, [r7, #8]
       break;
 80037b8:	e0b3      	b.n	8003922 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ba:	4b5e      	ldr	r3, [pc, #376]	; (8003934 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80037bc:	60bb      	str	r3, [r7, #8]
      break;
 80037be:	e0b0      	b.n	8003922 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037c0:	4b5a      	ldr	r3, [pc, #360]	; (800392c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037ca:	4b58      	ldr	r3, [pc, #352]	; (800392c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d04a      	beq.n	800386c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037d6:	4b55      	ldr	r3, [pc, #340]	; (800392c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	099b      	lsrs	r3, r3, #6
 80037dc:	f04f 0400 	mov.w	r4, #0
 80037e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	ea03 0501 	and.w	r5, r3, r1
 80037ec:	ea04 0602 	and.w	r6, r4, r2
 80037f0:	4629      	mov	r1, r5
 80037f2:	4632      	mov	r2, r6
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	f04f 0400 	mov.w	r4, #0
 80037fc:	0154      	lsls	r4, r2, #5
 80037fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003802:	014b      	lsls	r3, r1, #5
 8003804:	4619      	mov	r1, r3
 8003806:	4622      	mov	r2, r4
 8003808:	1b49      	subs	r1, r1, r5
 800380a:	eb62 0206 	sbc.w	r2, r2, r6
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	f04f 0400 	mov.w	r4, #0
 8003816:	0194      	lsls	r4, r2, #6
 8003818:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800381c:	018b      	lsls	r3, r1, #6
 800381e:	1a5b      	subs	r3, r3, r1
 8003820:	eb64 0402 	sbc.w	r4, r4, r2
 8003824:	f04f 0100 	mov.w	r1, #0
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	00e2      	lsls	r2, r4, #3
 800382e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003832:	00d9      	lsls	r1, r3, #3
 8003834:	460b      	mov	r3, r1
 8003836:	4614      	mov	r4, r2
 8003838:	195b      	adds	r3, r3, r5
 800383a:	eb44 0406 	adc.w	r4, r4, r6
 800383e:	f04f 0100 	mov.w	r1, #0
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	0262      	lsls	r2, r4, #9
 8003848:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800384c:	0259      	lsls	r1, r3, #9
 800384e:	460b      	mov	r3, r1
 8003850:	4614      	mov	r4, r2
 8003852:	4618      	mov	r0, r3
 8003854:	4621      	mov	r1, r4
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f04f 0400 	mov.w	r4, #0
 800385c:	461a      	mov	r2, r3
 800385e:	4623      	mov	r3, r4
 8003860:	f7fc fcc4 	bl	80001ec <__aeabi_uldivmod>
 8003864:	4603      	mov	r3, r0
 8003866:	460c      	mov	r4, r1
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	e049      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800386c:	4b2f      	ldr	r3, [pc, #188]	; (800392c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	099b      	lsrs	r3, r3, #6
 8003872:	f04f 0400 	mov.w	r4, #0
 8003876:	f240 11ff 	movw	r1, #511	; 0x1ff
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	ea03 0501 	and.w	r5, r3, r1
 8003882:	ea04 0602 	and.w	r6, r4, r2
 8003886:	4629      	mov	r1, r5
 8003888:	4632      	mov	r2, r6
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	f04f 0400 	mov.w	r4, #0
 8003892:	0154      	lsls	r4, r2, #5
 8003894:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003898:	014b      	lsls	r3, r1, #5
 800389a:	4619      	mov	r1, r3
 800389c:	4622      	mov	r2, r4
 800389e:	1b49      	subs	r1, r1, r5
 80038a0:	eb62 0206 	sbc.w	r2, r2, r6
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	f04f 0400 	mov.w	r4, #0
 80038ac:	0194      	lsls	r4, r2, #6
 80038ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80038b2:	018b      	lsls	r3, r1, #6
 80038b4:	1a5b      	subs	r3, r3, r1
 80038b6:	eb64 0402 	sbc.w	r4, r4, r2
 80038ba:	f04f 0100 	mov.w	r1, #0
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	00e2      	lsls	r2, r4, #3
 80038c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80038c8:	00d9      	lsls	r1, r3, #3
 80038ca:	460b      	mov	r3, r1
 80038cc:	4614      	mov	r4, r2
 80038ce:	195b      	adds	r3, r3, r5
 80038d0:	eb44 0406 	adc.w	r4, r4, r6
 80038d4:	f04f 0100 	mov.w	r1, #0
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	02a2      	lsls	r2, r4, #10
 80038de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80038e2:	0299      	lsls	r1, r3, #10
 80038e4:	460b      	mov	r3, r1
 80038e6:	4614      	mov	r4, r2
 80038e8:	4618      	mov	r0, r3
 80038ea:	4621      	mov	r1, r4
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f04f 0400 	mov.w	r4, #0
 80038f2:	461a      	mov	r2, r3
 80038f4:	4623      	mov	r3, r4
 80038f6:	f7fc fc79 	bl	80001ec <__aeabi_uldivmod>
 80038fa:	4603      	mov	r3, r0
 80038fc:	460c      	mov	r4, r1
 80038fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003900:	4b0a      	ldr	r3, [pc, #40]	; (800392c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	0c1b      	lsrs	r3, r3, #16
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	3301      	adds	r3, #1
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	fbb2 f3f3 	udiv	r3, r2, r3
 8003918:	60bb      	str	r3, [r7, #8]
      break;
 800391a:	e002      	b.n	8003922 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800391c:	4b04      	ldr	r3, [pc, #16]	; (8003930 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800391e:	60bb      	str	r3, [r7, #8]
      break;
 8003920:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003922:	68bb      	ldr	r3, [r7, #8]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800392c:	40023800 	.word	0x40023800
 8003930:	00f42400 	.word	0x00f42400
 8003934:	007a1200 	.word	0x007a1200

08003938 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003940:	2300      	movs	r3, #0
 8003942:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10b      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800395c:	2b00      	cmp	r3, #0
 800395e:	d105      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003968:	2b00      	cmp	r3, #0
 800396a:	d075      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800396c:	4bad      	ldr	r3, [pc, #692]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003972:	f7fe fcc9 	bl	8002308 <HAL_GetTick>
 8003976:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003978:	e008      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800397a:	f7fe fcc5 	bl	8002308 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e18b      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800398c:	4ba6      	ldr	r3, [pc, #664]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f0      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d009      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	019a      	lsls	r2, r3, #6
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	071b      	lsls	r3, r3, #28
 80039b0:	499d      	ldr	r1, [pc, #628]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d01f      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039c4:	4b98      	ldr	r3, [pc, #608]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ca:	0f1b      	lsrs	r3, r3, #28
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	019a      	lsls	r2, r3, #6
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	061b      	lsls	r3, r3, #24
 80039de:	431a      	orrs	r2, r3
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	071b      	lsls	r3, r3, #28
 80039e4:	4990      	ldr	r1, [pc, #576]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80039ec:	4b8e      	ldr	r3, [pc, #568]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039f2:	f023 021f 	bic.w	r2, r3, #31
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	498a      	ldr	r1, [pc, #552]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00d      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	019a      	lsls	r2, r3, #6
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	061b      	lsls	r3, r3, #24
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	071b      	lsls	r3, r3, #28
 8003a24:	4980      	ldr	r1, [pc, #512]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a2c:	4b7d      	ldr	r3, [pc, #500]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a32:	f7fe fc69 	bl	8002308 <HAL_GetTick>
 8003a36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a38:	e008      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a3a:	f7fe fc65 	bl	8002308 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e12b      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a4c:	4b76      	ldr	r3, [pc, #472]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f0      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d105      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d079      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a70:	4b6e      	ldr	r3, [pc, #440]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a76:	f7fe fc47 	bl	8002308 <HAL_GetTick>
 8003a7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003a7e:	f7fe fc43 	bl	8002308 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e109      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a90:	4b65      	ldr	r3, [pc, #404]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a9c:	d0ef      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d020      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003aaa:	4b5f      	ldr	r3, [pc, #380]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab0:	0f1b      	lsrs	r3, r3, #28
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	019a      	lsls	r2, r3, #6
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	061b      	lsls	r3, r3, #24
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	071b      	lsls	r3, r3, #28
 8003aca:	4957      	ldr	r1, [pc, #348]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ad2:	4b55      	ldr	r3, [pc, #340]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ad8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	021b      	lsls	r3, r3, #8
 8003ae4:	4950      	ldr	r1, [pc, #320]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0308 	and.w	r3, r3, #8
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d01e      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003af8:	4b4b      	ldr	r3, [pc, #300]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afe:	0e1b      	lsrs	r3, r3, #24
 8003b00:	f003 030f 	and.w	r3, r3, #15
 8003b04:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	019a      	lsls	r2, r3, #6
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	061b      	lsls	r3, r3, #24
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	071b      	lsls	r3, r3, #28
 8003b18:	4943      	ldr	r1, [pc, #268]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b20:	4b41      	ldr	r3, [pc, #260]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	493e      	ldr	r1, [pc, #248]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b36:	4b3d      	ldr	r3, [pc, #244]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b3c:	f7fe fbe4 	bl	8002308 <HAL_GetTick>
 8003b40:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003b44:	f7fe fbe0 	bl	8002308 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e0a6      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b56:	4b34      	ldr	r3, [pc, #208]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b62:	d1ef      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0320 	and.w	r3, r3, #32
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 808d 	beq.w	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	4b2c      	ldr	r3, [pc, #176]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	4a2b      	ldr	r2, [pc, #172]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b80:	6413      	str	r3, [r2, #64]	; 0x40
 8003b82:	4b29      	ldr	r3, [pc, #164]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003b8e:	4b28      	ldr	r3, [pc, #160]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a27      	ldr	r2, [pc, #156]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b98:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b9a:	f7fe fbb5 	bl	8002308 <HAL_GetTick>
 8003b9e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003ba2:	f7fe fbb1 	bl	8002308 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e077      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003bb4:	4b1e      	ldr	r3, [pc, #120]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0f0      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bc0:	4b19      	ldr	r3, [pc, #100]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d039      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d032      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bde:	4b12      	ldr	r3, [pc, #72]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003be8:	4b12      	ldr	r3, [pc, #72]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bee:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003bf4:	4a0c      	ldr	r2, [pc, #48]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003bfa:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d11e      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c06:	f7fe fb7f 	bl	8002308 <HAL_GetTick>
 8003c0a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0c:	e014      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c0e:	f7fe fb7b 	bl	8002308 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d90b      	bls.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e03f      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8003c24:	42470068 	.word	0x42470068
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	42470070 	.word	0x42470070
 8003c30:	40007000 	.word	0x40007000
 8003c34:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c38:	4b1c      	ldr	r3, [pc, #112]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0e4      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c50:	d10d      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003c52:	4b16      	ldr	r3, [pc, #88]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c66:	4911      	ldr	r1, [pc, #68]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	608b      	str	r3, [r1, #8]
 8003c6c:	e005      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003c6e:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	4a0e      	ldr	r2, [pc, #56]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c74:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c78:	6093      	str	r3, [r2, #8]
 8003c7a:	4b0c      	ldr	r3, [pc, #48]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c86:	4909      	ldr	r1, [pc, #36]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0310 	and.w	r3, r3, #16
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d004      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003c9e:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003ca0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	424711e0 	.word	0x424711e0

08003cb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e056      	b.n	8003d74 <HAL_SPI_Init+0xc0>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d106      	bne.n	8003ce6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7fe f9d1 	bl	8002088 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2202      	movs	r2, #2
 8003cea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cfc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	ea42 0103 	orr.w	r1, r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	0c1b      	lsrs	r3, r3, #16
 8003d44:	f003 0104 	and.w	r1, r3, #4
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	69da      	ldr	r2, [r3, #28]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d62:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08a      	sub	sp, #40	; 0x28
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d90:	2300      	movs	r3, #0
 8003d92:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <HAL_SPI_Transmit+0x26>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	e125      	b.n	8003fee <HAL_SPI_Transmit+0x272>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003daa:	f7fe faad 	bl	8002308 <HAL_GetTick>
 8003dae:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d002      	beq.n	8003dc2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003dc0:	e10c      	b.n	8003fdc <HAL_SPI_Transmit+0x260>
  }

  if((pData == NULL ) || (Size == 0))
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <HAL_SPI_Transmit+0x52>
 8003dc8:	88fb      	ldrh	r3, [r7, #6]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d102      	bne.n	8003dd4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003dd2:	e103      	b.n	8003fdc <HAL_SPI_Transmit+0x260>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2203      	movs	r2, #3
 8003dd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	88fa      	ldrh	r2, [r7, #6]
 8003dec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	88fa      	ldrh	r2, [r7, #6]
 8003df2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e1a:	d107      	bne.n	8003e2c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e2a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e36:	2b40      	cmp	r3, #64	; 0x40
 8003e38:	d007      	beq.n	8003e4a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e52:	d147      	bne.n	8003ee4 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d004      	beq.n	8003e66 <HAL_SPI_Transmit+0xea>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d138      	bne.n	8003ed8 <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	881a      	ldrh	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	3302      	adds	r3, #2
 8003e74:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e84:	e028      	b.n	8003ed8 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d10f      	bne.n	8003eb4 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	881a      	ldrh	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	86da      	strh	r2, [r3, #54]	; 0x36
 8003eb2:	e011      	b.n	8003ed8 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00b      	beq.n	8003ed2 <HAL_SPI_Transmit+0x156>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_SPI_Transmit+0x15c>
 8003ec2:	f7fe fa21 	bl	8002308 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d802      	bhi.n	8003ed8 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ed6:	e081      	b.n	8003fdc <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1d1      	bne.n	8003e86 <HAL_SPI_Transmit+0x10a>
 8003ee2:	e048      	b.n	8003f76 <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d004      	beq.n	8003ef6 <HAL_SPI_Transmit+0x17a>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d13a      	bne.n	8003f6c <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	330c      	adds	r3, #12
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	7812      	ldrb	r2, [r2, #0]
 8003f00:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	3301      	adds	r3, #1
 8003f06:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f16:	e029      	b.n	8003f6c <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d110      	bne.n	8003f48 <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	330c      	adds	r3, #12
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	7812      	ldrb	r2, [r2, #0]
 8003f30:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	3301      	adds	r3, #1
 8003f36:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f46:	e011      	b.n	8003f6c <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00b      	beq.n	8003f66 <HAL_SPI_Transmit+0x1ea>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f54:	d00a      	beq.n	8003f6c <HAL_SPI_Transmit+0x1f0>
 8003f56:	f7fe f9d7 	bl	8002308 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d802      	bhi.n	8003f6c <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f6a:	e037      	b.n	8003fdc <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1d0      	bne.n	8003f18 <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	2102      	movs	r1, #2
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 f838 	bl	8003ff6 <SPI_WaitFlagStateUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f90:	e024      	b.n	8003fdc <HAL_SPI_Transmit+0x260>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	6839      	ldr	r1, [r7, #0]
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 f896 	bl	80040c8 <SPI_CheckFlag_BSY>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d005      	beq.n	8003fae <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003fac:	e016      	b.n	8003fdc <HAL_SPI_Transmit+0x260>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10a      	bne.n	8003fcc <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	617b      	str	r3, [r7, #20]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	617b      	str	r3, [r7, #20]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <HAL_SPI_Transmit+0x25e>
  {
    errorcode = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	77fb      	strb	r3, [r7, #31]
 8003fd8:	e000      	b.n	8003fdc <HAL_SPI_Transmit+0x260>
  }

error:
 8003fda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fec:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3720      	adds	r7, #32
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	60f8      	str	r0, [r7, #12]
 8003ffe:	60b9      	str	r1, [r7, #8]
 8004000:	607a      	str	r2, [r7, #4]
 8004002:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8004004:	e04d      	b.n	80040a2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400c:	d049      	beq.n	80040a2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d007      	beq.n	8004024 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8004014:	f7fe f978 	bl	8002308 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d83e      	bhi.n	80040a2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004032:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800403c:	d111      	bne.n	8004062 <SPI_WaitFlagStateUntilTimeout+0x6c>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004046:	d004      	beq.n	8004052 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004050:	d107      	bne.n	8004062 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004060:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800406a:	d110      	bne.n	800408e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6819      	ldr	r1, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800407a:	400b      	ands	r3, r1
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800408c:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e00e      	b.n	80040c0 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4013      	ands	r3, r2
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d101      	bne.n	80040b6 <SPI_WaitFlagStateUntilTimeout+0xc0>
 80040b2:	2201      	movs	r2, #1
 80040b4:	e000      	b.n	80040b8 <SPI_WaitFlagStateUntilTimeout+0xc2>
 80040b6:	2200      	movs	r2, #0
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d1a3      	bne.n	8004006 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2200      	movs	r2, #0
 80040dc:	2180      	movs	r1, #128	; 0x80
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f7ff ff89 	bl	8003ff6 <SPI_WaitFlagStateUntilTimeout>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d007      	beq.n	80040fa <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ee:	f043 0220 	orr.w	r2, r3, #32
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e000      	b.n	80040fc <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <__libc_init_array>:
 8004104:	b570      	push	{r4, r5, r6, lr}
 8004106:	4e0d      	ldr	r6, [pc, #52]	; (800413c <__libc_init_array+0x38>)
 8004108:	4c0d      	ldr	r4, [pc, #52]	; (8004140 <__libc_init_array+0x3c>)
 800410a:	1ba4      	subs	r4, r4, r6
 800410c:	10a4      	asrs	r4, r4, #2
 800410e:	2500      	movs	r5, #0
 8004110:	42a5      	cmp	r5, r4
 8004112:	d109      	bne.n	8004128 <__libc_init_array+0x24>
 8004114:	4e0b      	ldr	r6, [pc, #44]	; (8004144 <__libc_init_array+0x40>)
 8004116:	4c0c      	ldr	r4, [pc, #48]	; (8004148 <__libc_init_array+0x44>)
 8004118:	f000 f820 	bl	800415c <_init>
 800411c:	1ba4      	subs	r4, r4, r6
 800411e:	10a4      	asrs	r4, r4, #2
 8004120:	2500      	movs	r5, #0
 8004122:	42a5      	cmp	r5, r4
 8004124:	d105      	bne.n	8004132 <__libc_init_array+0x2e>
 8004126:	bd70      	pop	{r4, r5, r6, pc}
 8004128:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800412c:	4798      	blx	r3
 800412e:	3501      	adds	r5, #1
 8004130:	e7ee      	b.n	8004110 <__libc_init_array+0xc>
 8004132:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004136:	4798      	blx	r3
 8004138:	3501      	adds	r5, #1
 800413a:	e7f2      	b.n	8004122 <__libc_init_array+0x1e>
 800413c:	0800458c 	.word	0x0800458c
 8004140:	0800458c 	.word	0x0800458c
 8004144:	0800458c 	.word	0x0800458c
 8004148:	08004590 	.word	0x08004590

0800414c <memset>:
 800414c:	4402      	add	r2, r0
 800414e:	4603      	mov	r3, r0
 8004150:	4293      	cmp	r3, r2
 8004152:	d100      	bne.n	8004156 <memset+0xa>
 8004154:	4770      	bx	lr
 8004156:	f803 1b01 	strb.w	r1, [r3], #1
 800415a:	e7f9      	b.n	8004150 <memset+0x4>

0800415c <_init>:
 800415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415e:	bf00      	nop
 8004160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004162:	bc08      	pop	{r3}
 8004164:	469e      	mov	lr, r3
 8004166:	4770      	bx	lr

08004168 <_fini>:
 8004168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416a:	bf00      	nop
 800416c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800416e:	bc08      	pop	{r3}
 8004170:	469e      	mov	lr, r3
 8004172:	4770      	bx	lr
