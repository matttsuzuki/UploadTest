
PAMA_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005350  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  080054fc  080054fc  000154fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059d0  080059d0  00032c10  2**0
                  CONTENTS
  4 .ARM          00000008  080059d0  080059d0  000159d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059d8  080059d8  00032c10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059d8  080059d8  000159d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059dc  080059dc  000159dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00012c10  20000000  080059e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20012c10  080185f0  00032c10  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012d34  080185f0  00032d34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032c10  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de90  00000000  00000000  00032c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021af  00000000  00000000  00040ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  00042c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  00043728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e26  00000000  00000000  000440b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc08  00000000  00000000  00067ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3173  00000000  00000000  00075ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00148c59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029fc  00000000  00000000  00148cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20012c10 	.word	0x20012c10
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080054e4 	.word	0x080054e4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20012c14 	.word	0x20012c14
 80001e8:	080054e4 	.word	0x080054e4

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96e 	b.w	80004f0 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468c      	mov	ip, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	f040 8083 	bne.w	8000342 <__udivmoddi4+0x116>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d947      	bls.n	80002d2 <__udivmoddi4+0xa6>
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	b142      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000248:	f1c2 0020 	rsb	r0, r2, #32
 800024c:	fa24 f000 	lsr.w	r0, r4, r0
 8000250:	4091      	lsls	r1, r2
 8000252:	4097      	lsls	r7, r2
 8000254:	ea40 0c01 	orr.w	ip, r0, r1
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbbc f6f8 	udiv	r6, ip, r8
 8000264:	fa1f fe87 	uxth.w	lr, r7
 8000268:	fb08 c116 	mls	r1, r8, r6, ip
 800026c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000270:	fb06 f10e 	mul.w	r1, r6, lr
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	f106 30ff 	add.w	r0, r6, #4294967295
 800027e:	f080 8119 	bcs.w	80004b4 <__udivmoddi4+0x288>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8116 	bls.w	80004b4 <__udivmoddi4+0x288>
 8000288:	3e02      	subs	r6, #2
 800028a:	443b      	add	r3, r7
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0f8 	udiv	r0, r3, r8
 8000294:	fb08 3310 	mls	r3, r8, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a0:	45a6      	cmp	lr, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	193c      	adds	r4, r7, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8105 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 80002ae:	45a6      	cmp	lr, r4
 80002b0:	f240 8102 	bls.w	80004b8 <__udivmoddi4+0x28c>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002bc:	eba4 040e 	sub.w	r4, r4, lr
 80002c0:	2600      	movs	r6, #0
 80002c2:	b11d      	cbz	r5, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c5 4300 	strd	r4, r3, [r5]
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	b902      	cbnz	r2, 80002d6 <__udivmoddi4+0xaa>
 80002d4:	deff      	udf	#255	; 0xff
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d150      	bne.n	8000380 <__udivmoddi4+0x154>
 80002de:	1bcb      	subs	r3, r1, r7
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f f887 	uxth.w	r8, r7
 80002e8:	2601      	movs	r6, #1
 80002ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ee:	0c21      	lsrs	r1, r4, #16
 80002f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f8:	fb08 f30c 	mul.w	r3, r8, ip
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000300:	1879      	adds	r1, r7, r1
 8000302:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0xe2>
 8000308:	428b      	cmp	r3, r1
 800030a:	f200 80e9 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 800030e:	4684      	mov	ip, r0
 8000310:	1ac9      	subs	r1, r1, r3
 8000312:	b2a3      	uxth	r3, r4
 8000314:	fbb1 f0fe 	udiv	r0, r1, lr
 8000318:	fb0e 1110 	mls	r1, lr, r0, r1
 800031c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000320:	fb08 f800 	mul.w	r8, r8, r0
 8000324:	45a0      	cmp	r8, r4
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x10c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x10a>
 8000330:	45a0      	cmp	r8, r4
 8000332:	f200 80d9 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 8000336:	4618      	mov	r0, r3
 8000338:	eba4 0408 	sub.w	r4, r4, r8
 800033c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000340:	e7bf      	b.n	80002c2 <__udivmoddi4+0x96>
 8000342:	428b      	cmp	r3, r1
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0x12e>
 8000346:	2d00      	cmp	r5, #0
 8000348:	f000 80b1 	beq.w	80004ae <__udivmoddi4+0x282>
 800034c:	2600      	movs	r6, #0
 800034e:	e9c5 0100 	strd	r0, r1, [r5]
 8000352:	4630      	mov	r0, r6
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f683 	clz	r6, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x1cc>
 8000362:	428b      	cmp	r3, r1
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0x140>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80b8 	bhi.w	80004dc <__udivmoddi4+0x2b0>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb61 0103 	sbc.w	r1, r1, r3
 8000372:	2001      	movs	r0, #1
 8000374:	468c      	mov	ip, r1
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0a8      	beq.n	80002cc <__udivmoddi4+0xa0>
 800037a:	e9c5 4c00 	strd	r4, ip, [r5]
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0xa0>
 8000380:	f1c2 0320 	rsb	r3, r2, #32
 8000384:	fa20 f603 	lsr.w	r6, r0, r3
 8000388:	4097      	lsls	r7, r2
 800038a:	fa01 f002 	lsl.w	r0, r1, r2
 800038e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000392:	40d9      	lsrs	r1, r3
 8000394:	4330      	orrs	r0, r6
 8000396:	0c03      	lsrs	r3, r0, #16
 8000398:	fbb1 f6fe 	udiv	r6, r1, lr
 800039c:	fa1f f887 	uxth.w	r8, r7
 80003a0:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a8:	fb06 f108 	mul.w	r1, r6, r8
 80003ac:	4299      	cmp	r1, r3
 80003ae:	fa04 f402 	lsl.w	r4, r4, r2
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x19c>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ba:	f080 808d 	bcs.w	80004d8 <__udivmoddi4+0x2ac>
 80003be:	4299      	cmp	r1, r3
 80003c0:	f240 808a 	bls.w	80004d8 <__udivmoddi4+0x2ac>
 80003c4:	3e02      	subs	r6, #2
 80003c6:	443b      	add	r3, r7
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	b281      	uxth	r1, r0
 80003cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d8:	fb00 f308 	mul.w	r3, r0, r8
 80003dc:	428b      	cmp	r3, r1
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x1c4>
 80003e0:	1879      	adds	r1, r7, r1
 80003e2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003e6:	d273      	bcs.n	80004d0 <__udivmoddi4+0x2a4>
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d971      	bls.n	80004d0 <__udivmoddi4+0x2a4>
 80003ec:	3802      	subs	r0, #2
 80003ee:	4439      	add	r1, r7
 80003f0:	1acb      	subs	r3, r1, r3
 80003f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003f6:	e778      	b.n	80002ea <__udivmoddi4+0xbe>
 80003f8:	f1c6 0c20 	rsb	ip, r6, #32
 80003fc:	fa03 f406 	lsl.w	r4, r3, r6
 8000400:	fa22 f30c 	lsr.w	r3, r2, ip
 8000404:	431c      	orrs	r4, r3
 8000406:	fa20 f70c 	lsr.w	r7, r0, ip
 800040a:	fa01 f306 	lsl.w	r3, r1, r6
 800040e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000412:	fa21 f10c 	lsr.w	r1, r1, ip
 8000416:	431f      	orrs	r7, r3
 8000418:	0c3b      	lsrs	r3, r7, #16
 800041a:	fbb1 f9fe 	udiv	r9, r1, lr
 800041e:	fa1f f884 	uxth.w	r8, r4
 8000422:	fb0e 1119 	mls	r1, lr, r9, r1
 8000426:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042a:	fb09 fa08 	mul.w	sl, r9, r8
 800042e:	458a      	cmp	sl, r1
 8000430:	fa02 f206 	lsl.w	r2, r2, r6
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x220>
 800043a:	1861      	adds	r1, r4, r1
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d248      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 8000442:	458a      	cmp	sl, r1
 8000444:	d946      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	4421      	add	r1, r4
 800044c:	eba1 010a 	sub.w	r1, r1, sl
 8000450:	b2bf      	uxth	r7, r7
 8000452:	fbb1 f0fe 	udiv	r0, r1, lr
 8000456:	fb0e 1110 	mls	r1, lr, r0, r1
 800045a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45b8      	cmp	r8, r7
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x24a>
 8000466:	19e7      	adds	r7, r4, r7
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d22e      	bcs.n	80004cc <__udivmoddi4+0x2a0>
 800046e:	45b8      	cmp	r8, r7
 8000470:	d92c      	bls.n	80004cc <__udivmoddi4+0x2a0>
 8000472:	3802      	subs	r0, #2
 8000474:	4427      	add	r7, r4
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba7 0708 	sub.w	r7, r7, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454f      	cmp	r7, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	4649      	mov	r1, r9
 8000488:	d31a      	bcc.n	80004c0 <__udivmoddi4+0x294>
 800048a:	d017      	beq.n	80004bc <__udivmoddi4+0x290>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x27a>
 800048e:	ebb3 020e 	subs.w	r2, r3, lr
 8000492:	eb67 0701 	sbc.w	r7, r7, r1
 8000496:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049a:	40f2      	lsrs	r2, r6
 800049c:	ea4c 0202 	orr.w	r2, ip, r2
 80004a0:	40f7      	lsrs	r7, r6
 80004a2:	e9c5 2700 	strd	r2, r7, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e70b      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e9      	b.n	800028c <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fd      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004bc:	4543      	cmp	r3, r8
 80004be:	d2e5      	bcs.n	800048c <__udivmoddi4+0x260>
 80004c0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c4:	eb69 0104 	sbc.w	r1, r9, r4
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7df      	b.n	800048c <__udivmoddi4+0x260>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e7d2      	b.n	8000476 <__udivmoddi4+0x24a>
 80004d0:	4660      	mov	r0, ip
 80004d2:	e78d      	b.n	80003f0 <__udivmoddi4+0x1c4>
 80004d4:	4681      	mov	r9, r0
 80004d6:	e7b9      	b.n	800044c <__udivmoddi4+0x220>
 80004d8:	4666      	mov	r6, ip
 80004da:	e775      	b.n	80003c8 <__udivmoddi4+0x19c>
 80004dc:	4630      	mov	r0, r6
 80004de:	e74a      	b.n	8000376 <__udivmoddi4+0x14a>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	4439      	add	r1, r7
 80004e6:	e713      	b.n	8000310 <__udivmoddi4+0xe4>
 80004e8:	3802      	subs	r0, #2
 80004ea:	443c      	add	r4, r7
 80004ec:	e724      	b.n	8000338 <__udivmoddi4+0x10c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <LCD_A>:
		}
	}
}

//Matthew's Addition
void LCD_A(uint16_t x0, uint16_t y0) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	460a      	mov	r2, r1
 80004fe:	80fb      	strh	r3, [r7, #6]
 8000500:	4613      	mov	r3, r2
 8000502:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000504:	230f      	movs	r3, #15
 8000506:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000508:	2300      	movs	r3, #0
 800050a:	61fb      	str	r3, [r7, #28]
 800050c:	e030      	b.n	8000570 <LCD_A+0x7c>
		for(int dx = 0; dx <=width; dx++){
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
 8000512:	e026      	b.n	8000562 <LCD_A+0x6e>
			if ((dx <= 3 || dx >= 12) || (dy <= 3 || (dy >= 6 && dy <= 9))) {
 8000514:	69bb      	ldr	r3, [r7, #24]
 8000516:	2b03      	cmp	r3, #3
 8000518:	dd0b      	ble.n	8000532 <LCD_A+0x3e>
 800051a:	69bb      	ldr	r3, [r7, #24]
 800051c:	2b0b      	cmp	r3, #11
 800051e:	dc08      	bgt.n	8000532 <LCD_A+0x3e>
 8000520:	69fb      	ldr	r3, [r7, #28]
 8000522:	2b03      	cmp	r3, #3
 8000524:	dd05      	ble.n	8000532 <LCD_A+0x3e>
 8000526:	69fb      	ldr	r3, [r7, #28]
 8000528:	2b05      	cmp	r3, #5
 800052a:	dd17      	ble.n	800055c <LCD_A+0x68>
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	2b09      	cmp	r3, #9
 8000530:	dc14      	bgt.n	800055c <LCD_A+0x68>
				int y = y0 + dy;
 8000532:	88bb      	ldrh	r3, [r7, #4]
 8000534:	69fa      	ldr	r2, [r7, #28]
 8000536:	4413      	add	r3, r2
 8000538:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800053a:	88fb      	ldrh	r3, [r7, #6]
 800053c:	69ba      	ldr	r2, [r7, #24]
 800053e:	4413      	add	r3, r2
 8000540:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000542:	4b10      	ldr	r3, [pc, #64]	; (8000584 <LCD_A+0x90>)
 8000544:	7818      	ldrb	r0, [r3, #0]
 8000546:	693a      	ldr	r2, [r7, #16]
 8000548:	4613      	mov	r3, r2
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	1a9b      	subs	r3, r3, r2
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	461a      	mov	r2, r3
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	4413      	add	r3, r2
 8000556:	4619      	mov	r1, r3
 8000558:	f001 ff88 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800055c:	69bb      	ldr	r3, [r7, #24]
 800055e:	3301      	adds	r3, #1
 8000560:	61bb      	str	r3, [r7, #24]
 8000562:	7dfb      	ldrb	r3, [r7, #23]
 8000564:	69ba      	ldr	r2, [r7, #24]
 8000566:	429a      	cmp	r2, r3
 8000568:	ddd4      	ble.n	8000514 <LCD_A+0x20>
	for(int dy = 0; dy <= width; dy++){
 800056a:	69fb      	ldr	r3, [r7, #28]
 800056c:	3301      	adds	r3, #1
 800056e:	61fb      	str	r3, [r7, #28]
 8000570:	7dfb      	ldrb	r3, [r7, #23]
 8000572:	69fa      	ldr	r2, [r7, #28]
 8000574:	429a      	cmp	r2, r3
 8000576:	ddca      	ble.n	800050e <LCD_A+0x1a>
			}
		}
	}
}
 8000578:	bf00      	nop
 800057a:	bf00      	nop
 800057c:	3720      	adds	r7, #32
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000000 	.word	0x20000000

08000588 <LCD_B>:

void LCD_B(uint16_t x0, uint16_t y0) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	460a      	mov	r2, r1
 8000592:	80fb      	strh	r3, [r7, #6]
 8000594:	4613      	mov	r3, r2
 8000596:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000598:	230f      	movs	r3, #15
 800059a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 800059c:	2300      	movs	r3, #0
 800059e:	61fb      	str	r3, [r7, #28]
 80005a0:	e04b      	b.n	800063a <LCD_B+0xb2>
		for(int dx = 0; dx <=width; dx++){
 80005a2:	2300      	movs	r3, #0
 80005a4:	61bb      	str	r3, [r7, #24]
 80005a6:	e041      	b.n	800062c <LCD_B+0xa4>
			if ((dx <= 3) || (dy >= 6 && dy <= 9 && dx <= 11) || (dy <= 3 && dx <= 11) || (dy >= 12 && dx <= 11)|| (dx >= 12 && (dy >= 3 && dy <= 6)) || ((dx >= 12) && (dy >= 9 && dy <= 12))) {
 80005a8:	69bb      	ldr	r3, [r7, #24]
 80005aa:	2b03      	cmp	r3, #3
 80005ac:	dd26      	ble.n	80005fc <LCD_B+0x74>
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	2b05      	cmp	r3, #5
 80005b2:	dd05      	ble.n	80005c0 <LCD_B+0x38>
 80005b4:	69fb      	ldr	r3, [r7, #28]
 80005b6:	2b09      	cmp	r3, #9
 80005b8:	dc02      	bgt.n	80005c0 <LCD_B+0x38>
 80005ba:	69bb      	ldr	r3, [r7, #24]
 80005bc:	2b0b      	cmp	r3, #11
 80005be:	dd1d      	ble.n	80005fc <LCD_B+0x74>
 80005c0:	69fb      	ldr	r3, [r7, #28]
 80005c2:	2b03      	cmp	r3, #3
 80005c4:	dc02      	bgt.n	80005cc <LCD_B+0x44>
 80005c6:	69bb      	ldr	r3, [r7, #24]
 80005c8:	2b0b      	cmp	r3, #11
 80005ca:	dd17      	ble.n	80005fc <LCD_B+0x74>
 80005cc:	69fb      	ldr	r3, [r7, #28]
 80005ce:	2b0b      	cmp	r3, #11
 80005d0:	dd02      	ble.n	80005d8 <LCD_B+0x50>
 80005d2:	69bb      	ldr	r3, [r7, #24]
 80005d4:	2b0b      	cmp	r3, #11
 80005d6:	dd11      	ble.n	80005fc <LCD_B+0x74>
 80005d8:	69bb      	ldr	r3, [r7, #24]
 80005da:	2b0b      	cmp	r3, #11
 80005dc:	dd05      	ble.n	80005ea <LCD_B+0x62>
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	dd02      	ble.n	80005ea <LCD_B+0x62>
 80005e4:	69fb      	ldr	r3, [r7, #28]
 80005e6:	2b06      	cmp	r3, #6
 80005e8:	dd08      	ble.n	80005fc <LCD_B+0x74>
 80005ea:	69bb      	ldr	r3, [r7, #24]
 80005ec:	2b0b      	cmp	r3, #11
 80005ee:	dd1a      	ble.n	8000626 <LCD_B+0x9e>
 80005f0:	69fb      	ldr	r3, [r7, #28]
 80005f2:	2b08      	cmp	r3, #8
 80005f4:	dd17      	ble.n	8000626 <LCD_B+0x9e>
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	2b0c      	cmp	r3, #12
 80005fa:	dc14      	bgt.n	8000626 <LCD_B+0x9e>
				int y = y0 + dy;
 80005fc:	88bb      	ldrh	r3, [r7, #4]
 80005fe:	69fa      	ldr	r2, [r7, #28]
 8000600:	4413      	add	r3, r2
 8000602:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000604:	88fb      	ldrh	r3, [r7, #6]
 8000606:	69ba      	ldr	r2, [r7, #24]
 8000608:	4413      	add	r3, r2
 800060a:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <LCD_B+0xc4>)
 800060e:	7818      	ldrb	r0, [r3, #0]
 8000610:	693a      	ldr	r2, [r7, #16]
 8000612:	4613      	mov	r3, r2
 8000614:	011b      	lsls	r3, r3, #4
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	011b      	lsls	r3, r3, #4
 800061a:	461a      	mov	r2, r3
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	4413      	add	r3, r2
 8000620:	4619      	mov	r1, r3
 8000622:	f001 ff23 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000626:	69bb      	ldr	r3, [r7, #24]
 8000628:	3301      	adds	r3, #1
 800062a:	61bb      	str	r3, [r7, #24]
 800062c:	7dfb      	ldrb	r3, [r7, #23]
 800062e:	69ba      	ldr	r2, [r7, #24]
 8000630:	429a      	cmp	r2, r3
 8000632:	ddb9      	ble.n	80005a8 <LCD_B+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	3301      	adds	r3, #1
 8000638:	61fb      	str	r3, [r7, #28]
 800063a:	7dfb      	ldrb	r3, [r7, #23]
 800063c:	69fa      	ldr	r2, [r7, #28]
 800063e:	429a      	cmp	r2, r3
 8000640:	ddaf      	ble.n	80005a2 <LCD_B+0x1a>
			}
		}
	}
}
 8000642:	bf00      	nop
 8000644:	bf00      	nop
 8000646:	3720      	adds	r7, #32
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000000 	.word	0x20000000

08000650 <LCD_C>:

void LCD_C(uint16_t x0, uint16_t y0) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	460a      	mov	r2, r1
 800065a:	80fb      	strh	r3, [r7, #6]
 800065c:	4613      	mov	r3, r2
 800065e:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000660:	230f      	movs	r3, #15
 8000662:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]
 8000668:	e02a      	b.n	80006c0 <LCD_C+0x70>
		for(int dx = 0; dx <=width; dx++){
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
 800066e:	e020      	b.n	80006b2 <LCD_C+0x62>
			if ((dx <= 3) || (dy <= 3) || (dy >= 12)) {
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	2b03      	cmp	r3, #3
 8000674:	dd05      	ble.n	8000682 <LCD_C+0x32>
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	2b03      	cmp	r3, #3
 800067a:	dd02      	ble.n	8000682 <LCD_C+0x32>
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	2b0b      	cmp	r3, #11
 8000680:	dd14      	ble.n	80006ac <LCD_C+0x5c>
				int y = y0 + dy;
 8000682:	88bb      	ldrh	r3, [r7, #4]
 8000684:	69fa      	ldr	r2, [r7, #28]
 8000686:	4413      	add	r3, r2
 8000688:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800068a:	88fb      	ldrh	r3, [r7, #6]
 800068c:	69ba      	ldr	r2, [r7, #24]
 800068e:	4413      	add	r3, r2
 8000690:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <LCD_C+0x84>)
 8000694:	7818      	ldrb	r0, [r3, #0]
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	4613      	mov	r3, r2
 800069a:	011b      	lsls	r3, r3, #4
 800069c:	1a9b      	subs	r3, r3, r2
 800069e:	011b      	lsls	r3, r3, #4
 80006a0:	461a      	mov	r2, r3
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4413      	add	r3, r2
 80006a6:	4619      	mov	r1, r3
 80006a8:	f001 fee0 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80006ac:	69bb      	ldr	r3, [r7, #24]
 80006ae:	3301      	adds	r3, #1
 80006b0:	61bb      	str	r3, [r7, #24]
 80006b2:	7dfb      	ldrb	r3, [r7, #23]
 80006b4:	69ba      	ldr	r2, [r7, #24]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	ddda      	ble.n	8000670 <LCD_C+0x20>
	for(int dy = 0; dy <= width; dy++){
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	3301      	adds	r3, #1
 80006be:	61fb      	str	r3, [r7, #28]
 80006c0:	7dfb      	ldrb	r3, [r7, #23]
 80006c2:	69fa      	ldr	r2, [r7, #28]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	ddd0      	ble.n	800066a <LCD_C+0x1a>
			}
		}
	}
}
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	3720      	adds	r7, #32
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000000 	.word	0x20000000

080006d8 <LCD_D>:

void LCD_D(uint16_t x0, uint16_t y0) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	460a      	mov	r2, r1
 80006e2:	80fb      	strh	r3, [r7, #6]
 80006e4:	4613      	mov	r3, r2
 80006e6:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80006e8:	230f      	movs	r3, #15
 80006ea:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]
 80006f0:	e039      	b.n	8000766 <LCD_D+0x8e>
		for(int dx = 0; dx <=width; dx++){
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
 80006f6:	e02f      	b.n	8000758 <LCD_D+0x80>
			if ((dx <= 3) || (dy <= 3 && dx <= 11) || (dy >= 12 && dx <= 11) || (dx >= 12 && (dy >= 4 && dy <= 11))) {
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	2b03      	cmp	r3, #3
 80006fc:	dd14      	ble.n	8000728 <LCD_D+0x50>
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	2b03      	cmp	r3, #3
 8000702:	dc02      	bgt.n	800070a <LCD_D+0x32>
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	2b0b      	cmp	r3, #11
 8000708:	dd0e      	ble.n	8000728 <LCD_D+0x50>
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	2b0b      	cmp	r3, #11
 800070e:	dd02      	ble.n	8000716 <LCD_D+0x3e>
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	2b0b      	cmp	r3, #11
 8000714:	dd08      	ble.n	8000728 <LCD_D+0x50>
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	2b0b      	cmp	r3, #11
 800071a:	dd1a      	ble.n	8000752 <LCD_D+0x7a>
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	2b03      	cmp	r3, #3
 8000720:	dd17      	ble.n	8000752 <LCD_D+0x7a>
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	2b0b      	cmp	r3, #11
 8000726:	dc14      	bgt.n	8000752 <LCD_D+0x7a>
				int y = y0 + dy;
 8000728:	88bb      	ldrh	r3, [r7, #4]
 800072a:	69fa      	ldr	r2, [r7, #28]
 800072c:	4413      	add	r3, r2
 800072e:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000730:	88fb      	ldrh	r3, [r7, #6]
 8000732:	69ba      	ldr	r2, [r7, #24]
 8000734:	4413      	add	r3, r2
 8000736:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <LCD_D+0xa0>)
 800073a:	7818      	ldrb	r0, [r3, #0]
 800073c:	693a      	ldr	r2, [r7, #16]
 800073e:	4613      	mov	r3, r2
 8000740:	011b      	lsls	r3, r3, #4
 8000742:	1a9b      	subs	r3, r3, r2
 8000744:	011b      	lsls	r3, r3, #4
 8000746:	461a      	mov	r2, r3
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	4413      	add	r3, r2
 800074c:	4619      	mov	r1, r3
 800074e:	f001 fe8d 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000752:	69bb      	ldr	r3, [r7, #24]
 8000754:	3301      	adds	r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
 8000758:	7dfb      	ldrb	r3, [r7, #23]
 800075a:	69ba      	ldr	r2, [r7, #24]
 800075c:	429a      	cmp	r2, r3
 800075e:	ddcb      	ble.n	80006f8 <LCD_D+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	3301      	adds	r3, #1
 8000764:	61fb      	str	r3, [r7, #28]
 8000766:	7dfb      	ldrb	r3, [r7, #23]
 8000768:	69fa      	ldr	r2, [r7, #28]
 800076a:	429a      	cmp	r2, r3
 800076c:	ddc1      	ble.n	80006f2 <LCD_D+0x1a>
			}
		}
	}
}
 800076e:	bf00      	nop
 8000770:	bf00      	nop
 8000772:	3720      	adds	r7, #32
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000000 	.word	0x20000000

0800077c <LCD_E>:

void LCD_E(uint16_t x0, uint16_t y0) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	460a      	mov	r2, r1
 8000786:	80fb      	strh	r3, [r7, #6]
 8000788:	4613      	mov	r3, r2
 800078a:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 800078c:	230f      	movs	r3, #15
 800078e:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
 8000794:	e036      	b.n	8000804 <LCD_E+0x88>
		for(int dx = 0; dx <=width; dx++){
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	e02c      	b.n	80007f6 <LCD_E+0x7a>
			if ((dx < 4) || (dy <= 3 || dy == 6 || dy == 7 || dy == 8 || dy == 9|| dy >= 12)) {
 800079c:	69bb      	ldr	r3, [r7, #24]
 800079e:	2b03      	cmp	r3, #3
 80007a0:	dd11      	ble.n	80007c6 <LCD_E+0x4a>
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	2b03      	cmp	r3, #3
 80007a6:	dd0e      	ble.n	80007c6 <LCD_E+0x4a>
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	2b06      	cmp	r3, #6
 80007ac:	d00b      	beq.n	80007c6 <LCD_E+0x4a>
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	2b07      	cmp	r3, #7
 80007b2:	d008      	beq.n	80007c6 <LCD_E+0x4a>
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	2b08      	cmp	r3, #8
 80007b8:	d005      	beq.n	80007c6 <LCD_E+0x4a>
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	2b09      	cmp	r3, #9
 80007be:	d002      	beq.n	80007c6 <LCD_E+0x4a>
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	2b0b      	cmp	r3, #11
 80007c4:	dd14      	ble.n	80007f0 <LCD_E+0x74>
				int y = y0 + dy;
 80007c6:	88bb      	ldrh	r3, [r7, #4]
 80007c8:	69fa      	ldr	r2, [r7, #28]
 80007ca:	4413      	add	r3, r2
 80007cc:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	69ba      	ldr	r2, [r7, #24]
 80007d2:	4413      	add	r3, r2
 80007d4:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <LCD_E+0x9c>)
 80007d8:	7818      	ldrb	r0, [r3, #0]
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	4613      	mov	r3, r2
 80007de:	011b      	lsls	r3, r3, #4
 80007e0:	1a9b      	subs	r3, r3, r2
 80007e2:	011b      	lsls	r3, r3, #4
 80007e4:	461a      	mov	r2, r3
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	4413      	add	r3, r2
 80007ea:	4619      	mov	r1, r3
 80007ec:	f001 fe3e 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	3301      	adds	r3, #1
 80007f4:	61bb      	str	r3, [r7, #24]
 80007f6:	7dfb      	ldrb	r3, [r7, #23]
 80007f8:	69ba      	ldr	r2, [r7, #24]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	ddce      	ble.n	800079c <LCD_E+0x20>
	for(int dy = 0; dy <= width; dy++){
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3301      	adds	r3, #1
 8000802:	61fb      	str	r3, [r7, #28]
 8000804:	7dfb      	ldrb	r3, [r7, #23]
 8000806:	69fa      	ldr	r2, [r7, #28]
 8000808:	429a      	cmp	r2, r3
 800080a:	ddc4      	ble.n	8000796 <LCD_E+0x1a>
			}
		}
	}
}
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	3720      	adds	r7, #32
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000000 	.word	0x20000000

0800081c <LCD_F>:

void LCD_F(uint16_t x0, uint16_t y0) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	460a      	mov	r2, r1
 8000826:	80fb      	strh	r3, [r7, #6]
 8000828:	4613      	mov	r3, r2
 800082a:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 800082c:	230f      	movs	r3, #15
 800082e:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
 8000834:	e030      	b.n	8000898 <LCD_F+0x7c>
		for(int dx = 0; dx <=width; dx++){
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
 800083a:	e026      	b.n	800088a <LCD_F+0x6e>
			if ((dx <= 3) || (dy <= 3) || (dy >= 6 && dy <= 9 && dx <= 11)) {
 800083c:	69bb      	ldr	r3, [r7, #24]
 800083e:	2b03      	cmp	r3, #3
 8000840:	dd0b      	ble.n	800085a <LCD_F+0x3e>
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	2b03      	cmp	r3, #3
 8000846:	dd08      	ble.n	800085a <LCD_F+0x3e>
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	2b05      	cmp	r3, #5
 800084c:	dd1a      	ble.n	8000884 <LCD_F+0x68>
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	2b09      	cmp	r3, #9
 8000852:	dc17      	bgt.n	8000884 <LCD_F+0x68>
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	2b0b      	cmp	r3, #11
 8000858:	dc14      	bgt.n	8000884 <LCD_F+0x68>
				int y = y0 + dy;
 800085a:	88bb      	ldrh	r3, [r7, #4]
 800085c:	69fa      	ldr	r2, [r7, #28]
 800085e:	4413      	add	r3, r2
 8000860:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000862:	88fb      	ldrh	r3, [r7, #6]
 8000864:	69ba      	ldr	r2, [r7, #24]
 8000866:	4413      	add	r3, r2
 8000868:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <LCD_F+0x90>)
 800086c:	7818      	ldrb	r0, [r3, #0]
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	4613      	mov	r3, r2
 8000872:	011b      	lsls	r3, r3, #4
 8000874:	1a9b      	subs	r3, r3, r2
 8000876:	011b      	lsls	r3, r3, #4
 8000878:	461a      	mov	r2, r3
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	4413      	add	r3, r2
 800087e:	4619      	mov	r1, r3
 8000880:	f001 fdf4 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	3301      	adds	r3, #1
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	7dfb      	ldrb	r3, [r7, #23]
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	429a      	cmp	r2, r3
 8000890:	ddd4      	ble.n	800083c <LCD_F+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3301      	adds	r3, #1
 8000896:	61fb      	str	r3, [r7, #28]
 8000898:	7dfb      	ldrb	r3, [r7, #23]
 800089a:	69fa      	ldr	r2, [r7, #28]
 800089c:	429a      	cmp	r2, r3
 800089e:	ddca      	ble.n	8000836 <LCD_F+0x1a>
			}
		}
	}
}
 80008a0:	bf00      	nop
 80008a2:	bf00      	nop
 80008a4:	3720      	adds	r7, #32
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000000 	.word	0x20000000

080008b0 <LCD_G>:

void LCD_G(uint16_t x0, uint16_t y0) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	460a      	mov	r2, r1
 80008ba:	80fb      	strh	r3, [r7, #6]
 80008bc:	4613      	mov	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80008c0:	230f      	movs	r3, #15
 80008c2:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
 80008c8:	e039      	b.n	800093e <LCD_G+0x8e>
		for(int dx = 0; dx <=width; dx++){
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]
 80008ce:	e02f      	b.n	8000930 <LCD_G+0x80>
			if ((dx <= 3) || (dy <= 3) || (dy >= 12) || (dy >= 6 && dx >= 12) || (dy >= 6 && dy <= 9 && dx >= 5)) {
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	2b03      	cmp	r3, #3
 80008d4:	dd14      	ble.n	8000900 <LCD_G+0x50>
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	2b03      	cmp	r3, #3
 80008da:	dd11      	ble.n	8000900 <LCD_G+0x50>
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	2b0b      	cmp	r3, #11
 80008e0:	dc0e      	bgt.n	8000900 <LCD_G+0x50>
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	2b05      	cmp	r3, #5
 80008e6:	dd02      	ble.n	80008ee <LCD_G+0x3e>
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	2b0b      	cmp	r3, #11
 80008ec:	dc08      	bgt.n	8000900 <LCD_G+0x50>
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	2b05      	cmp	r3, #5
 80008f2:	dd1a      	ble.n	800092a <LCD_G+0x7a>
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	2b09      	cmp	r3, #9
 80008f8:	dc17      	bgt.n	800092a <LCD_G+0x7a>
 80008fa:	69bb      	ldr	r3, [r7, #24]
 80008fc:	2b04      	cmp	r3, #4
 80008fe:	dd14      	ble.n	800092a <LCD_G+0x7a>
				int y = y0 + dy;
 8000900:	88bb      	ldrh	r3, [r7, #4]
 8000902:	69fa      	ldr	r2, [r7, #28]
 8000904:	4413      	add	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000908:	88fb      	ldrh	r3, [r7, #6]
 800090a:	69ba      	ldr	r2, [r7, #24]
 800090c:	4413      	add	r3, r2
 800090e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <LCD_G+0xa0>)
 8000912:	7818      	ldrb	r0, [r3, #0]
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	4613      	mov	r3, r2
 8000918:	011b      	lsls	r3, r3, #4
 800091a:	1a9b      	subs	r3, r3, r2
 800091c:	011b      	lsls	r3, r3, #4
 800091e:	461a      	mov	r2, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	4413      	add	r3, r2
 8000924:	4619      	mov	r1, r3
 8000926:	f001 fda1 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	3301      	adds	r3, #1
 800092e:	61bb      	str	r3, [r7, #24]
 8000930:	7dfb      	ldrb	r3, [r7, #23]
 8000932:	69ba      	ldr	r2, [r7, #24]
 8000934:	429a      	cmp	r2, r3
 8000936:	ddcb      	ble.n	80008d0 <LCD_G+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	3301      	adds	r3, #1
 800093c:	61fb      	str	r3, [r7, #28]
 800093e:	7dfb      	ldrb	r3, [r7, #23]
 8000940:	69fa      	ldr	r2, [r7, #28]
 8000942:	429a      	cmp	r2, r3
 8000944:	ddc1      	ble.n	80008ca <LCD_G+0x1a>
			}
		}
	}
}
 8000946:	bf00      	nop
 8000948:	bf00      	nop
 800094a:	3720      	adds	r7, #32
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000000 	.word	0x20000000

08000954 <LCD_H>:

void LCD_H(uint16_t x0, uint16_t y0) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	460a      	mov	r2, r1
 800095e:	80fb      	strh	r3, [r7, #6]
 8000960:	4613      	mov	r3, r2
 8000962:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000964:	230f      	movs	r3, #15
 8000966:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
 800096c:	e033      	b.n	80009d6 <LCD_H+0x82>
		for(int dx = 0; dx <=width; dx++){
 800096e:	2300      	movs	r3, #0
 8000970:	61bb      	str	r3, [r7, #24]
 8000972:	e029      	b.n	80009c8 <LCD_H+0x74>
			if ((dx <= 3 || dx >= 12) || (dy == 6 || dy == 7 || dy == 8 || dy == 9)) {
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	2b03      	cmp	r3, #3
 8000978:	dd0e      	ble.n	8000998 <LCD_H+0x44>
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	2b0b      	cmp	r3, #11
 800097e:	dc0b      	bgt.n	8000998 <LCD_H+0x44>
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	2b06      	cmp	r3, #6
 8000984:	d008      	beq.n	8000998 <LCD_H+0x44>
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	2b07      	cmp	r3, #7
 800098a:	d005      	beq.n	8000998 <LCD_H+0x44>
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	2b08      	cmp	r3, #8
 8000990:	d002      	beq.n	8000998 <LCD_H+0x44>
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	2b09      	cmp	r3, #9
 8000996:	d114      	bne.n	80009c2 <LCD_H+0x6e>
				int y = y0 + dy;
 8000998:	88bb      	ldrh	r3, [r7, #4]
 800099a:	69fa      	ldr	r2, [r7, #28]
 800099c:	4413      	add	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80009a0:	88fb      	ldrh	r3, [r7, #6]
 80009a2:	69ba      	ldr	r2, [r7, #24]
 80009a4:	4413      	add	r3, r2
 80009a6:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <LCD_H+0x94>)
 80009aa:	7818      	ldrb	r0, [r3, #0]
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4613      	mov	r3, r2
 80009b0:	011b      	lsls	r3, r3, #4
 80009b2:	1a9b      	subs	r3, r3, r2
 80009b4:	011b      	lsls	r3, r3, #4
 80009b6:	461a      	mov	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	4413      	add	r3, r2
 80009bc:	4619      	mov	r1, r3
 80009be:	f001 fd55 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	3301      	adds	r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	7dfb      	ldrb	r3, [r7, #23]
 80009ca:	69ba      	ldr	r2, [r7, #24]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	ddd1      	ble.n	8000974 <LCD_H+0x20>
	for(int dy = 0; dy <= width; dy++){
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	3301      	adds	r3, #1
 80009d4:	61fb      	str	r3, [r7, #28]
 80009d6:	7dfb      	ldrb	r3, [r7, #23]
 80009d8:	69fa      	ldr	r2, [r7, #28]
 80009da:	429a      	cmp	r2, r3
 80009dc:	ddc7      	ble.n	800096e <LCD_H+0x1a>
			}
		}
	}
}
 80009de:	bf00      	nop
 80009e0:	bf00      	nop
 80009e2:	3720      	adds	r7, #32
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000000 	.word	0x20000000

080009ec <LCD_I>:

void LCD_I(uint16_t x0, uint16_t y0) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	460a      	mov	r2, r1
 80009f6:	80fb      	strh	r3, [r7, #6]
 80009f8:	4613      	mov	r3, r2
 80009fa:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80009fc:	230f      	movs	r3, #15
 80009fe:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
 8000a04:	e02d      	b.n	8000a62 <LCD_I+0x76>
		for(int dx = 0; dx <=width; dx++){
 8000a06:	2300      	movs	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
 8000a0a:	e023      	b.n	8000a54 <LCD_I+0x68>
			if ((dy <= 3) || (dy >= 12) || (dx >= 6 && dx <= 9)) {
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	dd08      	ble.n	8000a24 <LCD_I+0x38>
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	2b0b      	cmp	r3, #11
 8000a16:	dc05      	bgt.n	8000a24 <LCD_I+0x38>
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	2b05      	cmp	r3, #5
 8000a1c:	dd17      	ble.n	8000a4e <LCD_I+0x62>
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	2b09      	cmp	r3, #9
 8000a22:	dc14      	bgt.n	8000a4e <LCD_I+0x62>
				int y = y0 + dy;
 8000a24:	88bb      	ldrh	r3, [r7, #4]
 8000a26:	69fa      	ldr	r2, [r7, #28]
 8000a28:	4413      	add	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000a2c:	88fb      	ldrh	r3, [r7, #6]
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	4413      	add	r3, r2
 8000a32:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <LCD_I+0x88>)
 8000a36:	7818      	ldrb	r0, [r3, #0]
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	011b      	lsls	r3, r3, #4
 8000a3e:	1a9b      	subs	r3, r3, r2
 8000a40:	011b      	lsls	r3, r3, #4
 8000a42:	461a      	mov	r2, r3
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	4413      	add	r3, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f001 fd0f 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	3301      	adds	r3, #1
 8000a52:	61bb      	str	r3, [r7, #24]
 8000a54:	7dfb      	ldrb	r3, [r7, #23]
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	ddd7      	ble.n	8000a0c <LCD_I+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	61fb      	str	r3, [r7, #28]
 8000a62:	7dfb      	ldrb	r3, [r7, #23]
 8000a64:	69fa      	ldr	r2, [r7, #28]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	ddcd      	ble.n	8000a06 <LCD_I+0x1a>
			}
		}
	}
}
 8000a6a:	bf00      	nop
 8000a6c:	bf00      	nop
 8000a6e:	3720      	adds	r7, #32
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000000 	.word	0x20000000

08000a78 <LCD_J>:

void LCD_J(uint16_t x0, uint16_t y0) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	460a      	mov	r2, r1
 8000a82:	80fb      	strh	r3, [r7, #6]
 8000a84:	4613      	mov	r3, r2
 8000a86:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000a88:	230f      	movs	r3, #15
 8000a8a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
 8000a90:	e030      	b.n	8000af4 <LCD_J+0x7c>
		for(int dx = 0; dx <=width; dx++){
 8000a92:	2300      	movs	r3, #0
 8000a94:	61bb      	str	r3, [r7, #24]
 8000a96:	e026      	b.n	8000ae6 <LCD_J+0x6e>
			if ((dy <= 3) || (dx >= 6 && dx <= 9) || (dx <= 9 && dy >= 12)) {
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	dd0b      	ble.n	8000ab6 <LCD_J+0x3e>
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	2b05      	cmp	r3, #5
 8000aa2:	dd02      	ble.n	8000aaa <LCD_J+0x32>
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	2b09      	cmp	r3, #9
 8000aa8:	dd05      	ble.n	8000ab6 <LCD_J+0x3e>
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	2b09      	cmp	r3, #9
 8000aae:	dc17      	bgt.n	8000ae0 <LCD_J+0x68>
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	2b0b      	cmp	r3, #11
 8000ab4:	dd14      	ble.n	8000ae0 <LCD_J+0x68>
				int y = y0 + dy;
 8000ab6:	88bb      	ldrh	r3, [r7, #4]
 8000ab8:	69fa      	ldr	r2, [r7, #28]
 8000aba:	4413      	add	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	69ba      	ldr	r2, [r7, #24]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <LCD_J+0x90>)
 8000ac8:	7818      	ldrb	r0, [r3, #0]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4613      	mov	r3, r2
 8000ace:	011b      	lsls	r3, r3, #4
 8000ad0:	1a9b      	subs	r3, r3, r2
 8000ad2:	011b      	lsls	r3, r3, #4
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	4413      	add	r3, r2
 8000ada:	4619      	mov	r1, r3
 8000adc:	f001 fcc6 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	61bb      	str	r3, [r7, #24]
 8000ae6:	7dfb      	ldrb	r3, [r7, #23]
 8000ae8:	69ba      	ldr	r2, [r7, #24]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	ddd4      	ble.n	8000a98 <LCD_J+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3301      	adds	r3, #1
 8000af2:	61fb      	str	r3, [r7, #28]
 8000af4:	7dfb      	ldrb	r3, [r7, #23]
 8000af6:	69fa      	ldr	r2, [r7, #28]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	ddca      	ble.n	8000a92 <LCD_J+0x1a>
			}
		}
	}
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	3720      	adds	r7, #32
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000000 	.word	0x20000000

08000b0c <LCD_K>:

void LCD_K(uint16_t x0, uint16_t y0) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	460a      	mov	r2, r1
 8000b16:	80fb      	strh	r3, [r7, #6]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
 8000b24:	e054      	b.n	8000bd0 <LCD_K+0xc4>
		for(int dx = 0; dx <=width; dx++){
 8000b26:	2300      	movs	r3, #0
 8000b28:	61bb      	str	r3, [r7, #24]
 8000b2a:	e04a      	b.n	8000bc2 <LCD_K+0xb6>
			if ((dx <= 3) || (dx >= 12 && dy >= 12) || (dx >= 8 && dx <= 11 && dy >= 8 && dy <= 11) || (dx >= 4 && dx <= 7 && dy >= 4 && dy <= 7) || (dx >= 11 && dy <= 3) || (dx >= 8 && dx <= 11 && dy >= 4 && dy <= 7)) {
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	2b03      	cmp	r3, #3
 8000b30:	dd2f      	ble.n	8000b92 <LCD_K+0x86>
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	2b0b      	cmp	r3, #11
 8000b36:	dd02      	ble.n	8000b3e <LCD_K+0x32>
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	2b0b      	cmp	r3, #11
 8000b3c:	dc29      	bgt.n	8000b92 <LCD_K+0x86>
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	2b07      	cmp	r3, #7
 8000b42:	dd08      	ble.n	8000b56 <LCD_K+0x4a>
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	2b0b      	cmp	r3, #11
 8000b48:	dc05      	bgt.n	8000b56 <LCD_K+0x4a>
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	2b07      	cmp	r3, #7
 8000b4e:	dd02      	ble.n	8000b56 <LCD_K+0x4a>
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	2b0b      	cmp	r3, #11
 8000b54:	dd1d      	ble.n	8000b92 <LCD_K+0x86>
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	2b03      	cmp	r3, #3
 8000b5a:	dd08      	ble.n	8000b6e <LCD_K+0x62>
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	2b07      	cmp	r3, #7
 8000b60:	dc05      	bgt.n	8000b6e <LCD_K+0x62>
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	2b03      	cmp	r3, #3
 8000b66:	dd02      	ble.n	8000b6e <LCD_K+0x62>
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	2b07      	cmp	r3, #7
 8000b6c:	dd11      	ble.n	8000b92 <LCD_K+0x86>
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	2b0a      	cmp	r3, #10
 8000b72:	dd02      	ble.n	8000b7a <LCD_K+0x6e>
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	2b03      	cmp	r3, #3
 8000b78:	dd0b      	ble.n	8000b92 <LCD_K+0x86>
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	2b07      	cmp	r3, #7
 8000b7e:	dd1d      	ble.n	8000bbc <LCD_K+0xb0>
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	2b0b      	cmp	r3, #11
 8000b84:	dc1a      	bgt.n	8000bbc <LCD_K+0xb0>
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	2b03      	cmp	r3, #3
 8000b8a:	dd17      	ble.n	8000bbc <LCD_K+0xb0>
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	2b07      	cmp	r3, #7
 8000b90:	dc14      	bgt.n	8000bbc <LCD_K+0xb0>
				int y = y0 + dy;
 8000b92:	88bb      	ldrh	r3, [r7, #4]
 8000b94:	69fa      	ldr	r2, [r7, #28]
 8000b96:	4413      	add	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000b9a:	88fb      	ldrh	r3, [r7, #6]
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <LCD_K+0xd8>)
 8000ba4:	7818      	ldrb	r0, [r3, #0]
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	011b      	lsls	r3, r3, #4
 8000bac:	1a9b      	subs	r3, r3, r2
 8000bae:	011b      	lsls	r3, r3, #4
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f001 fc58 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	61bb      	str	r3, [r7, #24]
 8000bc2:	7dfb      	ldrb	r3, [r7, #23]
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	ddb0      	ble.n	8000b2c <LCD_K+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	61fb      	str	r3, [r7, #28]
 8000bd0:	7dfb      	ldrb	r3, [r7, #23]
 8000bd2:	69fa      	ldr	r2, [r7, #28]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	dda6      	ble.n	8000b26 <LCD_K+0x1a>
			}
		}
	}
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	3720      	adds	r7, #32
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000000 	.word	0x20000000

08000be8 <LCD_L>:

void LCD_L(uint16_t x0, uint16_t y0) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	80fb      	strh	r3, [r7, #6]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
 8000c00:	e027      	b.n	8000c52 <LCD_L+0x6a>
		for(int dx = 0; dx <=width; dx++){
 8000c02:	2300      	movs	r3, #0
 8000c04:	61bb      	str	r3, [r7, #24]
 8000c06:	e01d      	b.n	8000c44 <LCD_L+0x5c>
			if ((dx <= 3) || (dy >= 12)) {
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	dd02      	ble.n	8000c14 <LCD_L+0x2c>
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	2b0b      	cmp	r3, #11
 8000c12:	dd14      	ble.n	8000c3e <LCD_L+0x56>
				int y = y0 + dy;
 8000c14:	88bb      	ldrh	r3, [r7, #4]
 8000c16:	69fa      	ldr	r2, [r7, #28]
 8000c18:	4413      	add	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	4413      	add	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <LCD_L+0x7c>)
 8000c26:	7818      	ldrb	r0, [r3, #0]
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	011b      	lsls	r3, r3, #4
 8000c2e:	1a9b      	subs	r3, r3, r2
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	461a      	mov	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f001 fc17 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	3301      	adds	r3, #1
 8000c42:	61bb      	str	r3, [r7, #24]
 8000c44:	7dfb      	ldrb	r3, [r7, #23]
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	dddd      	ble.n	8000c08 <LCD_L+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	61fb      	str	r3, [r7, #28]
 8000c52:	7dfb      	ldrb	r3, [r7, #23]
 8000c54:	69fa      	ldr	r2, [r7, #28]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	ddd3      	ble.n	8000c02 <LCD_L+0x1a>
			}
		}
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	bf00      	nop
 8000c5e:	3720      	adds	r7, #32
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000000 	.word	0x20000000

08000c68 <LCD_M>:

void LCD_M(uint16_t x0, uint16_t y0) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	460a      	mov	r2, r1
 8000c72:	80fb      	strh	r3, [r7, #6]
 8000c74:	4613      	mov	r3, r2
 8000c76:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000c78:	230f      	movs	r3, #15
 8000c7a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
 8000c80:	e04b      	b.n	8000d1a <LCD_M+0xb2>
		for(int dx = 0; dx <=width; dx++){
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
 8000c86:	e041      	b.n	8000d0c <LCD_M+0xa4>
			if ((dx <= 3) || (dx >= 12) || ((dx >= 6 && dx <= 9) && (dy >= 6 && dy <= 9)) || ((dx >= 3 && dx <= 6) && (dy >= 3 && dy <= 6)) || ((dx >= 9 && dx <= 12) && (dy >= 3 && dy <= 6))) {
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	dd26      	ble.n	8000cdc <LCD_M+0x74>
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	2b0b      	cmp	r3, #11
 8000c92:	dc23      	bgt.n	8000cdc <LCD_M+0x74>
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	2b05      	cmp	r3, #5
 8000c98:	dd08      	ble.n	8000cac <LCD_M+0x44>
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	2b09      	cmp	r3, #9
 8000c9e:	dc05      	bgt.n	8000cac <LCD_M+0x44>
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	2b05      	cmp	r3, #5
 8000ca4:	dd02      	ble.n	8000cac <LCD_M+0x44>
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	2b09      	cmp	r3, #9
 8000caa:	dd17      	ble.n	8000cdc <LCD_M+0x74>
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	dd08      	ble.n	8000cc4 <LCD_M+0x5c>
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	2b06      	cmp	r3, #6
 8000cb6:	dc05      	bgt.n	8000cc4 <LCD_M+0x5c>
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	dd02      	ble.n	8000cc4 <LCD_M+0x5c>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	2b06      	cmp	r3, #6
 8000cc2:	dd0b      	ble.n	8000cdc <LCD_M+0x74>
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	2b08      	cmp	r3, #8
 8000cc8:	dd1d      	ble.n	8000d06 <LCD_M+0x9e>
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	2b0c      	cmp	r3, #12
 8000cce:	dc1a      	bgt.n	8000d06 <LCD_M+0x9e>
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	dd17      	ble.n	8000d06 <LCD_M+0x9e>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	2b06      	cmp	r3, #6
 8000cda:	dc14      	bgt.n	8000d06 <LCD_M+0x9e>
				int y = y0 + dy;
 8000cdc:	88bb      	ldrh	r3, [r7, #4]
 8000cde:	69fa      	ldr	r2, [r7, #28]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4413      	add	r3, r2
 8000cea:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <LCD_M+0xc4>)
 8000cee:	7818      	ldrb	r0, [r3, #0]
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	011b      	lsls	r3, r3, #4
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	011b      	lsls	r3, r3, #4
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4619      	mov	r1, r3
 8000d02:	f001 fbb3 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	61bb      	str	r3, [r7, #24]
 8000d0c:	7dfb      	ldrb	r3, [r7, #23]
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	ddb9      	ble.n	8000c88 <LCD_M+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	3301      	adds	r3, #1
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	7dfb      	ldrb	r3, [r7, #23]
 8000d1c:	69fa      	ldr	r2, [r7, #28]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	ddaf      	ble.n	8000c82 <LCD_M+0x1a>
			}
		}
	}
}
 8000d22:	bf00      	nop
 8000d24:	bf00      	nop
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000000 	.word	0x20000000

08000d30 <LCD_N>:

void LCD_N(uint16_t x0, uint16_t y0) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b088      	sub	sp, #32
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	460a      	mov	r2, r1
 8000d3a:	80fb      	strh	r3, [r7, #6]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000d40:	230f      	movs	r3, #15
 8000d42:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
 8000d48:	e04b      	b.n	8000de2 <LCD_N+0xb2>
		for(int dx = 0; dx <=width; dx++){
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61bb      	str	r3, [r7, #24]
 8000d4e:	e041      	b.n	8000dd4 <LCD_N+0xa4>
			if ((dx <= 3) || (dx >= 12) || ((dx >= 6 && dx <= 9) && (dy >= 6 && dy <= 9)) || ((dx >= 3 && dx <= 6) && (dy >= 3 && dy <= 6)) || ((dx >= 9 && dx <= 12) && (dy >= 9 && dy <= 12))) {
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	dd26      	ble.n	8000da4 <LCD_N+0x74>
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	2b0b      	cmp	r3, #11
 8000d5a:	dc23      	bgt.n	8000da4 <LCD_N+0x74>
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	2b05      	cmp	r3, #5
 8000d60:	dd08      	ble.n	8000d74 <LCD_N+0x44>
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	2b09      	cmp	r3, #9
 8000d66:	dc05      	bgt.n	8000d74 <LCD_N+0x44>
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	2b05      	cmp	r3, #5
 8000d6c:	dd02      	ble.n	8000d74 <LCD_N+0x44>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	2b09      	cmp	r3, #9
 8000d72:	dd17      	ble.n	8000da4 <LCD_N+0x74>
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	dd08      	ble.n	8000d8c <LCD_N+0x5c>
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	2b06      	cmp	r3, #6
 8000d7e:	dc05      	bgt.n	8000d8c <LCD_N+0x5c>
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	dd02      	ble.n	8000d8c <LCD_N+0x5c>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	2b06      	cmp	r3, #6
 8000d8a:	dd0b      	ble.n	8000da4 <LCD_N+0x74>
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	2b08      	cmp	r3, #8
 8000d90:	dd1d      	ble.n	8000dce <LCD_N+0x9e>
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	2b0c      	cmp	r3, #12
 8000d96:	dc1a      	bgt.n	8000dce <LCD_N+0x9e>
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	2b08      	cmp	r3, #8
 8000d9c:	dd17      	ble.n	8000dce <LCD_N+0x9e>
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	2b0c      	cmp	r3, #12
 8000da2:	dc14      	bgt.n	8000dce <LCD_N+0x9e>
				int y = y0 + dy;
 8000da4:	88bb      	ldrh	r3, [r7, #4]
 8000da6:	69fa      	ldr	r2, [r7, #28]
 8000da8:	4413      	add	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4413      	add	r3, r2
 8000db2:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <LCD_N+0xc4>)
 8000db6:	7818      	ldrb	r0, [r3, #0]
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	011b      	lsls	r3, r3, #4
 8000dbe:	1a9b      	subs	r3, r3, r2
 8000dc0:	011b      	lsls	r3, r3, #4
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f001 fb4f 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	61bb      	str	r3, [r7, #24]
 8000dd4:	7dfb      	ldrb	r3, [r7, #23]
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	ddb9      	ble.n	8000d50 <LCD_N+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	3301      	adds	r3, #1
 8000de0:	61fb      	str	r3, [r7, #28]
 8000de2:	7dfb      	ldrb	r3, [r7, #23]
 8000de4:	69fa      	ldr	r2, [r7, #28]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	ddaf      	ble.n	8000d4a <LCD_N+0x1a>
			}
		}
	}
}
 8000dea:	bf00      	nop
 8000dec:	bf00      	nop
 8000dee:	3720      	adds	r7, #32
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000000 	.word	0x20000000

08000df8 <LCD_O>:

void LCD_O(uint16_t x0, uint16_t y0) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	460a      	mov	r2, r1
 8000e02:	80fb      	strh	r3, [r7, #6]
 8000e04:	4613      	mov	r3, r2
 8000e06:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000e08:	230f      	movs	r3, #15
 8000e0a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
 8000e10:	e02d      	b.n	8000e6e <LCD_O+0x76>
		for(int dx = 0; dx <=width; dx++){
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
 8000e16:	e023      	b.n	8000e60 <LCD_O+0x68>
			if ((dx <= 3 || dx >= 12) || (dy <= 3 || dy >= 12)) {
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	dd08      	ble.n	8000e30 <LCD_O+0x38>
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	2b0b      	cmp	r3, #11
 8000e22:	dc05      	bgt.n	8000e30 <LCD_O+0x38>
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	dd02      	ble.n	8000e30 <LCD_O+0x38>
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	2b0b      	cmp	r3, #11
 8000e2e:	dd14      	ble.n	8000e5a <LCD_O+0x62>
				int y = y0 + dy;
 8000e30:	88bb      	ldrh	r3, [r7, #4]
 8000e32:	69fa      	ldr	r2, [r7, #28]
 8000e34:	4413      	add	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <LCD_O+0x88>)
 8000e42:	7818      	ldrb	r0, [r3, #0]
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4613      	mov	r3, r2
 8000e48:	011b      	lsls	r3, r3, #4
 8000e4a:	1a9b      	subs	r3, r3, r2
 8000e4c:	011b      	lsls	r3, r3, #4
 8000e4e:	461a      	mov	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4413      	add	r3, r2
 8000e54:	4619      	mov	r1, r3
 8000e56:	f001 fb09 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	61bb      	str	r3, [r7, #24]
 8000e60:	7dfb      	ldrb	r3, [r7, #23]
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	ddd7      	ble.n	8000e18 <LCD_O+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	61fb      	str	r3, [r7, #28]
 8000e6e:	7dfb      	ldrb	r3, [r7, #23]
 8000e70:	69fa      	ldr	r2, [r7, #28]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	ddcd      	ble.n	8000e12 <LCD_O+0x1a>
			}
		}
	}
}
 8000e76:	bf00      	nop
 8000e78:	bf00      	nop
 8000e7a:	3720      	adds	r7, #32
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000000 	.word	0x20000000

08000e84 <LCD_P>:

void LCD_P(uint16_t x0, uint16_t y0) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	460a      	mov	r2, r1
 8000e8e:	80fb      	strh	r3, [r7, #6]
 8000e90:	4613      	mov	r3, r2
 8000e92:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000e94:	230f      	movs	r3, #15
 8000e96:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
 8000e9c:	e03c      	b.n	8000f18 <LCD_P+0x94>
		for(int dx = 0; dx <=width; dx++){
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
 8000ea2:	e032      	b.n	8000f0a <LCD_P+0x86>
			if ((dx <= 3) || (dy <= 3 && dx <= 11) || ((dy >= 6 && dy <= 9) && dx <= 11) || (dx >= 12 && (dy >= 3 && dy <= 6))) {
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	dd17      	ble.n	8000eda <LCD_P+0x56>
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	2b03      	cmp	r3, #3
 8000eae:	dc02      	bgt.n	8000eb6 <LCD_P+0x32>
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	2b0b      	cmp	r3, #11
 8000eb4:	dd11      	ble.n	8000eda <LCD_P+0x56>
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	2b05      	cmp	r3, #5
 8000eba:	dd05      	ble.n	8000ec8 <LCD_P+0x44>
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	2b09      	cmp	r3, #9
 8000ec0:	dc02      	bgt.n	8000ec8 <LCD_P+0x44>
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	2b0b      	cmp	r3, #11
 8000ec6:	dd08      	ble.n	8000eda <LCD_P+0x56>
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	2b0b      	cmp	r3, #11
 8000ecc:	dd1a      	ble.n	8000f04 <LCD_P+0x80>
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	dd17      	ble.n	8000f04 <LCD_P+0x80>
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	dc14      	bgt.n	8000f04 <LCD_P+0x80>
				int y = y0 + dy;
 8000eda:	88bb      	ldrh	r3, [r7, #4]
 8000edc:	69fa      	ldr	r2, [r7, #28]
 8000ede:	4413      	add	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <LCD_P+0xa8>)
 8000eec:	7818      	ldrb	r0, [r3, #0]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	011b      	lsls	r3, r3, #4
 8000ef4:	1a9b      	subs	r3, r3, r2
 8000ef6:	011b      	lsls	r3, r3, #4
 8000ef8:	461a      	mov	r2, r3
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	4413      	add	r3, r2
 8000efe:	4619      	mov	r1, r3
 8000f00:	f001 fab4 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	3301      	adds	r3, #1
 8000f08:	61bb      	str	r3, [r7, #24]
 8000f0a:	7dfb      	ldrb	r3, [r7, #23]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	ddc8      	ble.n	8000ea4 <LCD_P+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3301      	adds	r3, #1
 8000f16:	61fb      	str	r3, [r7, #28]
 8000f18:	7dfb      	ldrb	r3, [r7, #23]
 8000f1a:	69fa      	ldr	r2, [r7, #28]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	ddbe      	ble.n	8000e9e <LCD_P+0x1a>
			}
		}
	}
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3720      	adds	r7, #32
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000000 	.word	0x20000000

08000f30 <LCD_Q>:

void LCD_Q(uint16_t x0, uint16_t y0) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	460a      	mov	r2, r1
 8000f3a:	80fb      	strh	r3, [r7, #6]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000f40:	230f      	movs	r3, #15
 8000f42:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
 8000f48:	e039      	b.n	8000fbe <LCD_Q+0x8e>
		for(int dx = 0; dx <=width; dx++){
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
 8000f4e:	e02f      	b.n	8000fb0 <LCD_Q+0x80>
			if ((dx <= 3)||(dx >= 12) || (dy <= 3) || (dy >= 12) || (dx >= 8 && dx <= 11 && dy >= 8 && dy <= 11)) {
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	dd14      	ble.n	8000f80 <LCD_Q+0x50>
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	2b0b      	cmp	r3, #11
 8000f5a:	dc11      	bgt.n	8000f80 <LCD_Q+0x50>
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	dd0e      	ble.n	8000f80 <LCD_Q+0x50>
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	2b0b      	cmp	r3, #11
 8000f66:	dc0b      	bgt.n	8000f80 <LCD_Q+0x50>
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	2b07      	cmp	r3, #7
 8000f6c:	dd1d      	ble.n	8000faa <LCD_Q+0x7a>
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	2b0b      	cmp	r3, #11
 8000f72:	dc1a      	bgt.n	8000faa <LCD_Q+0x7a>
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	2b07      	cmp	r3, #7
 8000f78:	dd17      	ble.n	8000faa <LCD_Q+0x7a>
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	2b0b      	cmp	r3, #11
 8000f7e:	dc14      	bgt.n	8000faa <LCD_Q+0x7a>
				int y = y0 + dy;
 8000f80:	88bb      	ldrh	r3, [r7, #4]
 8000f82:	69fa      	ldr	r2, [r7, #28]
 8000f84:	4413      	add	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <LCD_Q+0xa0>)
 8000f92:	7818      	ldrb	r0, [r3, #0]
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4613      	mov	r3, r2
 8000f98:	011b      	lsls	r3, r3, #4
 8000f9a:	1a9b      	subs	r3, r3, r2
 8000f9c:	011b      	lsls	r3, r3, #4
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f001 fa61 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	3301      	adds	r3, #1
 8000fae:	61bb      	str	r3, [r7, #24]
 8000fb0:	7dfb      	ldrb	r3, [r7, #23]
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	ddcb      	ble.n	8000f50 <LCD_Q+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	61fb      	str	r3, [r7, #28]
 8000fbe:	7dfb      	ldrb	r3, [r7, #23]
 8000fc0:	69fa      	ldr	r2, [r7, #28]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	ddc1      	ble.n	8000f4a <LCD_Q+0x1a>
			}
		}
	}
}
 8000fc6:	bf00      	nop
 8000fc8:	bf00      	nop
 8000fca:	3720      	adds	r7, #32
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000000 	.word	0x20000000

08000fd4 <LCD_R>:

void LCD_R(uint16_t x0, uint16_t y0) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	460a      	mov	r2, r1
 8000fde:	80fb      	strh	r3, [r7, #6]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
 8000fec:	e04e      	b.n	800108c <LCD_R+0xb8>
		for(int dx = 0; dx <=width; dx++){
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
 8000ff2:	e044      	b.n	800107e <LCD_R+0xaa>
			if ((dx <= 3) || (dy <= 3 && dx <= 11) || ((dy >= 6 && dy <= 9) && dx <= 11) || (dx >= 12 && (dy >= 3 && dy <= 6))|| (dx >= 12 && dy >= 12) || (dx >= 8 && dx <= 11 && dy >= 8 && dy <= 11)) {
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	dd29      	ble.n	800104e <LCD_R+0x7a>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	2b03      	cmp	r3, #3
 8000ffe:	dc02      	bgt.n	8001006 <LCD_R+0x32>
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	2b0b      	cmp	r3, #11
 8001004:	dd23      	ble.n	800104e <LCD_R+0x7a>
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	2b05      	cmp	r3, #5
 800100a:	dd05      	ble.n	8001018 <LCD_R+0x44>
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	2b09      	cmp	r3, #9
 8001010:	dc02      	bgt.n	8001018 <LCD_R+0x44>
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	2b0b      	cmp	r3, #11
 8001016:	dd1a      	ble.n	800104e <LCD_R+0x7a>
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	2b0b      	cmp	r3, #11
 800101c:	dd05      	ble.n	800102a <LCD_R+0x56>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	2b02      	cmp	r3, #2
 8001022:	dd02      	ble.n	800102a <LCD_R+0x56>
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	2b06      	cmp	r3, #6
 8001028:	dd11      	ble.n	800104e <LCD_R+0x7a>
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	2b0b      	cmp	r3, #11
 800102e:	dd02      	ble.n	8001036 <LCD_R+0x62>
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	2b0b      	cmp	r3, #11
 8001034:	dc0b      	bgt.n	800104e <LCD_R+0x7a>
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	2b07      	cmp	r3, #7
 800103a:	dd1d      	ble.n	8001078 <LCD_R+0xa4>
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	2b0b      	cmp	r3, #11
 8001040:	dc1a      	bgt.n	8001078 <LCD_R+0xa4>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	2b07      	cmp	r3, #7
 8001046:	dd17      	ble.n	8001078 <LCD_R+0xa4>
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	2b0b      	cmp	r3, #11
 800104c:	dc14      	bgt.n	8001078 <LCD_R+0xa4>
				int y = y0 + dy;
 800104e:	88bb      	ldrh	r3, [r7, #4]
 8001050:	69fa      	ldr	r2, [r7, #28]
 8001052:	4413      	add	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4413      	add	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <LCD_R+0xcc>)
 8001060:	7818      	ldrb	r0, [r3, #0]
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4613      	mov	r3, r2
 8001066:	011b      	lsls	r3, r3, #4
 8001068:	1a9b      	subs	r3, r3, r2
 800106a:	011b      	lsls	r3, r3, #4
 800106c:	461a      	mov	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f001 f9fa 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	3301      	adds	r3, #1
 800107c:	61bb      	str	r3, [r7, #24]
 800107e:	7dfb      	ldrb	r3, [r7, #23]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	429a      	cmp	r2, r3
 8001084:	ddb6      	ble.n	8000ff4 <LCD_R+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3301      	adds	r3, #1
 800108a:	61fb      	str	r3, [r7, #28]
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	69fa      	ldr	r2, [r7, #28]
 8001090:	429a      	cmp	r2, r3
 8001092:	ddac      	ble.n	8000fee <LCD_R+0x1a>
			}
		}
	}
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000000 	.word	0x20000000

080010a4 <LCD_S>:

void LCD_S(uint16_t x0, uint16_t y0) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	460a      	mov	r2, r1
 80010ae:	80fb      	strh	r3, [r7, #6]
 80010b0:	4613      	mov	r3, r2
 80010b2:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80010b4:	230f      	movs	r3, #15
 80010b6:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
 80010bc:	e03f      	b.n	800113e <LCD_S+0x9a>
		for(int dx = 0; dx <=width; dx++){
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
 80010c2:	e035      	b.n	8001130 <LCD_S+0x8c>
			if ((dx <= 3 && dy <= 9) || (dx >= 12 && dy >= 6) || (dy <= 3 || dy == 6 || dy == 7 || dy == 8 || dy ==9 || dy >= 12)) {
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	dc02      	bgt.n	80010d0 <LCD_S+0x2c>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	2b09      	cmp	r3, #9
 80010ce:	dd17      	ble.n	8001100 <LCD_S+0x5c>
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	2b0b      	cmp	r3, #11
 80010d4:	dd02      	ble.n	80010dc <LCD_S+0x38>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	2b05      	cmp	r3, #5
 80010da:	dc11      	bgt.n	8001100 <LCD_S+0x5c>
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	2b03      	cmp	r3, #3
 80010e0:	dd0e      	ble.n	8001100 <LCD_S+0x5c>
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	2b06      	cmp	r3, #6
 80010e6:	d00b      	beq.n	8001100 <LCD_S+0x5c>
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	2b07      	cmp	r3, #7
 80010ec:	d008      	beq.n	8001100 <LCD_S+0x5c>
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	2b08      	cmp	r3, #8
 80010f2:	d005      	beq.n	8001100 <LCD_S+0x5c>
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	2b09      	cmp	r3, #9
 80010f8:	d002      	beq.n	8001100 <LCD_S+0x5c>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	2b0b      	cmp	r3, #11
 80010fe:	dd14      	ble.n	800112a <LCD_S+0x86>
				int y = y0 + dy;
 8001100:	88bb      	ldrh	r3, [r7, #4]
 8001102:	69fa      	ldr	r2, [r7, #28]
 8001104:	4413      	add	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4413      	add	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <LCD_S+0xac>)
 8001112:	7818      	ldrb	r0, [r3, #0]
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4613      	mov	r3, r2
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	1a9b      	subs	r3, r3, r2
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	461a      	mov	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f001 f9a1 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	3301      	adds	r3, #1
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	7dfb      	ldrb	r3, [r7, #23]
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	429a      	cmp	r2, r3
 8001136:	ddc5      	ble.n	80010c4 <LCD_S+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	3301      	adds	r3, #1
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	7dfb      	ldrb	r3, [r7, #23]
 8001140:	69fa      	ldr	r2, [r7, #28]
 8001142:	429a      	cmp	r2, r3
 8001144:	ddbb      	ble.n	80010be <LCD_S+0x1a>
			}
		}
	}
}
 8001146:	bf00      	nop
 8001148:	bf00      	nop
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000000 	.word	0x20000000

08001154 <LCD_T>:

void LCD_T(uint16_t x0, uint16_t y0) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	460a      	mov	r2, r1
 800115e:	80fb      	strh	r3, [r7, #6]
 8001160:	4613      	mov	r3, r2
 8001162:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001164:	230f      	movs	r3, #15
 8001166:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
 800116c:	e02a      	b.n	80011c4 <LCD_T+0x70>
		for(int dx = 0; dx <=width; dx++){
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
 8001172:	e020      	b.n	80011b6 <LCD_T+0x62>
			if ((dy <= 3) || (dx >= 6 && dx <= 9)) {
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	2b03      	cmp	r3, #3
 8001178:	dd05      	ble.n	8001186 <LCD_T+0x32>
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	2b05      	cmp	r3, #5
 800117e:	dd17      	ble.n	80011b0 <LCD_T+0x5c>
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	2b09      	cmp	r3, #9
 8001184:	dc14      	bgt.n	80011b0 <LCD_T+0x5c>
				int y = y0 + dy;
 8001186:	88bb      	ldrh	r3, [r7, #4]
 8001188:	69fa      	ldr	r2, [r7, #28]
 800118a:	4413      	add	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4413      	add	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <LCD_T+0x84>)
 8001198:	7818      	ldrb	r0, [r3, #0]
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4613      	mov	r3, r2
 800119e:	011b      	lsls	r3, r3, #4
 80011a0:	1a9b      	subs	r3, r3, r2
 80011a2:	011b      	lsls	r3, r3, #4
 80011a4:	461a      	mov	r2, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4413      	add	r3, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f001 f95e 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	3301      	adds	r3, #1
 80011b4:	61bb      	str	r3, [r7, #24]
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	ddda      	ble.n	8001174 <LCD_T+0x20>
	for(int dy = 0; dy <= width; dy++){
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3301      	adds	r3, #1
 80011c2:	61fb      	str	r3, [r7, #28]
 80011c4:	7dfb      	ldrb	r3, [r7, #23]
 80011c6:	69fa      	ldr	r2, [r7, #28]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	ddd0      	ble.n	800116e <LCD_T+0x1a>
			}
		}
	}
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3720      	adds	r7, #32
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000000 	.word	0x20000000

080011dc <LCD_U>:

void LCD_U(uint16_t x0, uint16_t y0) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	460a      	mov	r2, r1
 80011e6:	80fb      	strh	r3, [r7, #6]
 80011e8:	4613      	mov	r3, r2
 80011ea:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80011ec:	230f      	movs	r3, #15
 80011ee:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	e02a      	b.n	800124c <LCD_U+0x70>
		for(int dx = 0; dx <=width; dx++){
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
 80011fa:	e020      	b.n	800123e <LCD_U+0x62>
			if ((dx <= 3) || (dx >= 12) || (dy >= 12)) {
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	2b03      	cmp	r3, #3
 8001200:	dd05      	ble.n	800120e <LCD_U+0x32>
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	2b0b      	cmp	r3, #11
 8001206:	dc02      	bgt.n	800120e <LCD_U+0x32>
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	2b0b      	cmp	r3, #11
 800120c:	dd14      	ble.n	8001238 <LCD_U+0x5c>
				int y = y0 + dy;
 800120e:	88bb      	ldrh	r3, [r7, #4]
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	4413      	add	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4413      	add	r3, r2
 800121c:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <LCD_U+0x84>)
 8001220:	7818      	ldrb	r0, [r3, #0]
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4613      	mov	r3, r2
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	1a9b      	subs	r3, r3, r2
 800122a:	011b      	lsls	r3, r3, #4
 800122c:	461a      	mov	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4413      	add	r3, r2
 8001232:	4619      	mov	r1, r3
 8001234:	f001 f91a 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	3301      	adds	r3, #1
 800123c:	61bb      	str	r3, [r7, #24]
 800123e:	7dfb      	ldrb	r3, [r7, #23]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	429a      	cmp	r2, r3
 8001244:	ddda      	ble.n	80011fc <LCD_U+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3301      	adds	r3, #1
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	7dfb      	ldrb	r3, [r7, #23]
 800124e:	69fa      	ldr	r2, [r7, #28]
 8001250:	429a      	cmp	r2, r3
 8001252:	ddd0      	ble.n	80011f6 <LCD_U+0x1a>
			}
		}
	}
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000000 	.word	0x20000000

08001264 <LCD_V>:

void LCD_V(uint16_t x0, uint16_t y0) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	460a      	mov	r2, r1
 800126e:	80fb      	strh	r3, [r7, #6]
 8001270:	4613      	mov	r3, r2
 8001272:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001274:	230f      	movs	r3, #15
 8001276:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
 800127c:	e066      	b.n	800134c <LCD_V+0xe8>
		for(int dx = 0; dx <=width; dx++){
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
 8001282:	e05c      	b.n	800133e <LCD_V+0xda>
			if ((dx <= 3 && dy <= 3) || (dx >= 12 && dy <= 3) || (dx >= 6 && dx <= 9 && dy >= 12) || (dy >= 4 && dy <= 7 && dx >= 2 && dx <= 5) || (dy >= 8 && dy <= 11 && dx >= 4 && dx <= 7) || (dy >= 4 && dy <= 7 && dx >= 10 && dx <= 13) || (dy >= 8 && dy <= 11 && dx >= 8 && dx <= 11) ) {
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	2b03      	cmp	r3, #3
 8001288:	dc02      	bgt.n	8001290 <LCD_V+0x2c>
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	2b03      	cmp	r3, #3
 800128e:	dd3e      	ble.n	800130e <LCD_V+0xaa>
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	2b0b      	cmp	r3, #11
 8001294:	dd02      	ble.n	800129c <LCD_V+0x38>
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	2b03      	cmp	r3, #3
 800129a:	dd38      	ble.n	800130e <LCD_V+0xaa>
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	2b05      	cmp	r3, #5
 80012a0:	dd05      	ble.n	80012ae <LCD_V+0x4a>
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	2b09      	cmp	r3, #9
 80012a6:	dc02      	bgt.n	80012ae <LCD_V+0x4a>
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	2b0b      	cmp	r3, #11
 80012ac:	dc2f      	bgt.n	800130e <LCD_V+0xaa>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	dd08      	ble.n	80012c6 <LCD_V+0x62>
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	2b07      	cmp	r3, #7
 80012b8:	dc05      	bgt.n	80012c6 <LCD_V+0x62>
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	dd02      	ble.n	80012c6 <LCD_V+0x62>
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	2b05      	cmp	r3, #5
 80012c4:	dd23      	ble.n	800130e <LCD_V+0xaa>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	2b07      	cmp	r3, #7
 80012ca:	dd08      	ble.n	80012de <LCD_V+0x7a>
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	2b0b      	cmp	r3, #11
 80012d0:	dc05      	bgt.n	80012de <LCD_V+0x7a>
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	dd02      	ble.n	80012de <LCD_V+0x7a>
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	2b07      	cmp	r3, #7
 80012dc:	dd17      	ble.n	800130e <LCD_V+0xaa>
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	dd08      	ble.n	80012f6 <LCD_V+0x92>
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	2b07      	cmp	r3, #7
 80012e8:	dc05      	bgt.n	80012f6 <LCD_V+0x92>
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	2b09      	cmp	r3, #9
 80012ee:	dd02      	ble.n	80012f6 <LCD_V+0x92>
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	2b0d      	cmp	r3, #13
 80012f4:	dd0b      	ble.n	800130e <LCD_V+0xaa>
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	2b07      	cmp	r3, #7
 80012fa:	dd1d      	ble.n	8001338 <LCD_V+0xd4>
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	2b0b      	cmp	r3, #11
 8001300:	dc1a      	bgt.n	8001338 <LCD_V+0xd4>
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	2b07      	cmp	r3, #7
 8001306:	dd17      	ble.n	8001338 <LCD_V+0xd4>
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	2b0b      	cmp	r3, #11
 800130c:	dc14      	bgt.n	8001338 <LCD_V+0xd4>
				int y = y0 + dy;
 800130e:	88bb      	ldrh	r3, [r7, #4]
 8001310:	69fa      	ldr	r2, [r7, #28]
 8001312:	4413      	add	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4413      	add	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <LCD_V+0xfc>)
 8001320:	7818      	ldrb	r0, [r3, #0]
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4613      	mov	r3, r2
 8001326:	011b      	lsls	r3, r3, #4
 8001328:	1a9b      	subs	r3, r3, r2
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	461a      	mov	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4413      	add	r3, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f001 f89a 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	3301      	adds	r3, #1
 800133c:	61bb      	str	r3, [r7, #24]
 800133e:	7dfb      	ldrb	r3, [r7, #23]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	429a      	cmp	r2, r3
 8001344:	dd9e      	ble.n	8001284 <LCD_V+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3301      	adds	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	7dfb      	ldrb	r3, [r7, #23]
 800134e:	69fa      	ldr	r2, [r7, #28]
 8001350:	429a      	cmp	r2, r3
 8001352:	dd94      	ble.n	800127e <LCD_V+0x1a>
			}
		}
	}
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3720      	adds	r7, #32
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000000 	.word	0x20000000

08001364 <LCD_W>:

void LCD_W(uint16_t x0, uint16_t y0) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	460a      	mov	r2, r1
 800136e:	80fb      	strh	r3, [r7, #6]
 8001370:	4613      	mov	r3, r2
 8001372:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001374:	230f      	movs	r3, #15
 8001376:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
 800137c:	e081      	b.n	8001482 <LCD_W+0x11e>
		for(int dx = 0; dx <=width; dx++){
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
 8001382:	e077      	b.n	8001474 <LCD_W+0x110>
			if ((dx <= 3 && dy <= 3) || (dx >= 12 && dy <= 3) || (dy >= 4 && dy <= 7 && dx >= 1 && dx <= 4) || (dy >= 8 && dy <= 11 && dx >= 2 && dx <= 5)  || (dy >= 12 && dy <= 15 && dx >= 3 && dx <= 6)|| (dy >= 4 && dy <= 7 && dx >= 11 && dx <= 14) || (dy >= 8 && dy <= 11 && dx >= 10 && dx <= 13) || (dy >= 12 && dy <= 15 && dx >= 9 && dx <= 12) || (dx >= 6 && dx <= 9 && dy >= 6 && dy <= 11)) {
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	2b03      	cmp	r3, #3
 8001388:	dc02      	bgt.n	8001390 <LCD_W+0x2c>
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	2b03      	cmp	r3, #3
 800138e:	dd59      	ble.n	8001444 <LCD_W+0xe0>
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	2b0b      	cmp	r3, #11
 8001394:	dd02      	ble.n	800139c <LCD_W+0x38>
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	2b03      	cmp	r3, #3
 800139a:	dd53      	ble.n	8001444 <LCD_W+0xe0>
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	2b03      	cmp	r3, #3
 80013a0:	dd08      	ble.n	80013b4 <LCD_W+0x50>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	2b07      	cmp	r3, #7
 80013a6:	dc05      	bgt.n	80013b4 <LCD_W+0x50>
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	dd02      	ble.n	80013b4 <LCD_W+0x50>
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	dd47      	ble.n	8001444 <LCD_W+0xe0>
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	2b07      	cmp	r3, #7
 80013b8:	dd08      	ble.n	80013cc <LCD_W+0x68>
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	2b0b      	cmp	r3, #11
 80013be:	dc05      	bgt.n	80013cc <LCD_W+0x68>
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	dd02      	ble.n	80013cc <LCD_W+0x68>
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	2b05      	cmp	r3, #5
 80013ca:	dd3b      	ble.n	8001444 <LCD_W+0xe0>
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	2b0b      	cmp	r3, #11
 80013d0:	dd08      	ble.n	80013e4 <LCD_W+0x80>
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	2b0f      	cmp	r3, #15
 80013d6:	dc05      	bgt.n	80013e4 <LCD_W+0x80>
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	dd02      	ble.n	80013e4 <LCD_W+0x80>
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	2b06      	cmp	r3, #6
 80013e2:	dd2f      	ble.n	8001444 <LCD_W+0xe0>
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	dd08      	ble.n	80013fc <LCD_W+0x98>
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	2b07      	cmp	r3, #7
 80013ee:	dc05      	bgt.n	80013fc <LCD_W+0x98>
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	2b0a      	cmp	r3, #10
 80013f4:	dd02      	ble.n	80013fc <LCD_W+0x98>
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	2b0e      	cmp	r3, #14
 80013fa:	dd23      	ble.n	8001444 <LCD_W+0xe0>
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	2b07      	cmp	r3, #7
 8001400:	dd08      	ble.n	8001414 <LCD_W+0xb0>
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	2b0b      	cmp	r3, #11
 8001406:	dc05      	bgt.n	8001414 <LCD_W+0xb0>
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	2b09      	cmp	r3, #9
 800140c:	dd02      	ble.n	8001414 <LCD_W+0xb0>
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	2b0d      	cmp	r3, #13
 8001412:	dd17      	ble.n	8001444 <LCD_W+0xe0>
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	2b0b      	cmp	r3, #11
 8001418:	dd08      	ble.n	800142c <LCD_W+0xc8>
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	2b0f      	cmp	r3, #15
 800141e:	dc05      	bgt.n	800142c <LCD_W+0xc8>
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	2b08      	cmp	r3, #8
 8001424:	dd02      	ble.n	800142c <LCD_W+0xc8>
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	2b0c      	cmp	r3, #12
 800142a:	dd0b      	ble.n	8001444 <LCD_W+0xe0>
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	2b05      	cmp	r3, #5
 8001430:	dd1d      	ble.n	800146e <LCD_W+0x10a>
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2b09      	cmp	r3, #9
 8001436:	dc1a      	bgt.n	800146e <LCD_W+0x10a>
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	2b05      	cmp	r3, #5
 800143c:	dd17      	ble.n	800146e <LCD_W+0x10a>
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	2b0b      	cmp	r3, #11
 8001442:	dc14      	bgt.n	800146e <LCD_W+0x10a>
				int y = y0 + dy;
 8001444:	88bb      	ldrh	r3, [r7, #4]
 8001446:	69fa      	ldr	r2, [r7, #28]
 8001448:	4413      	add	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4413      	add	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <LCD_W+0x134>)
 8001456:	7818      	ldrb	r0, [r3, #0]
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4613      	mov	r3, r2
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	1a9b      	subs	r3, r3, r2
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	461a      	mov	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4413      	add	r3, r2
 8001468:	4619      	mov	r1, r3
 800146a:	f000 ffff 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	3301      	adds	r3, #1
 8001472:	61bb      	str	r3, [r7, #24]
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	429a      	cmp	r2, r3
 800147a:	dd83      	ble.n	8001384 <LCD_W+0x20>
	for(int dy = 0; dy <= width; dy++){
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	3301      	adds	r3, #1
 8001480:	61fb      	str	r3, [r7, #28]
 8001482:	7dfb      	ldrb	r3, [r7, #23]
 8001484:	69fa      	ldr	r2, [r7, #28]
 8001486:	429a      	cmp	r2, r3
 8001488:	f77f af79 	ble.w	800137e <LCD_W+0x1a>
			}
		}
	}
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3720      	adds	r7, #32
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000000 	.word	0x20000000

0800149c <LCD_X>:

void LCD_X(uint16_t x0, uint16_t y0) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	460a      	mov	r2, r1
 80014a6:	80fb      	strh	r3, [r7, #6]
 80014a8:	4613      	mov	r3, r2
 80014aa:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80014ac:	230f      	movs	r3, #15
 80014ae:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
 80014b4:	e045      	b.n	8001542 <LCD_X+0xa6>
		for(int dx = 0; dx <=width; dx++){
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
 80014ba:	e03b      	b.n	8001534 <LCD_X+0x98>
			if ((dx <= 3 && dy <= 3) || (dx >= 12 && dy <= 3) || (dx <= 3 && dy >= 12) || (dx >= 12 && dy >= 12) || (dy >= 4 && dy <= 11 && dx >= 4 && dx <= 11)) {
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	dc02      	bgt.n	80014c8 <LCD_X+0x2c>
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	dd1d      	ble.n	8001504 <LCD_X+0x68>
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	2b0b      	cmp	r3, #11
 80014cc:	dd02      	ble.n	80014d4 <LCD_X+0x38>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	dd17      	ble.n	8001504 <LCD_X+0x68>
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	dc02      	bgt.n	80014e0 <LCD_X+0x44>
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	2b0b      	cmp	r3, #11
 80014de:	dc11      	bgt.n	8001504 <LCD_X+0x68>
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	2b0b      	cmp	r3, #11
 80014e4:	dd02      	ble.n	80014ec <LCD_X+0x50>
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	2b0b      	cmp	r3, #11
 80014ea:	dc0b      	bgt.n	8001504 <LCD_X+0x68>
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	dd1d      	ble.n	800152e <LCD_X+0x92>
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	2b0b      	cmp	r3, #11
 80014f6:	dc1a      	bgt.n	800152e <LCD_X+0x92>
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	dd17      	ble.n	800152e <LCD_X+0x92>
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	2b0b      	cmp	r3, #11
 8001502:	dc14      	bgt.n	800152e <LCD_X+0x92>
				int y = y0 + dy;
 8001504:	88bb      	ldrh	r3, [r7, #4]
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	4413      	add	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4413      	add	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <LCD_X+0xb8>)
 8001516:	7818      	ldrb	r0, [r3, #0]
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4613      	mov	r3, r2
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	1a9b      	subs	r3, r3, r2
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f000 ff9f 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	3301      	adds	r3, #1
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	7dfb      	ldrb	r3, [r7, #23]
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	429a      	cmp	r2, r3
 800153a:	ddbf      	ble.n	80014bc <LCD_X+0x20>
	for(int dy = 0; dy <= width; dy++){
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	3301      	adds	r3, #1
 8001540:	61fb      	str	r3, [r7, #28]
 8001542:	7dfb      	ldrb	r3, [r7, #23]
 8001544:	69fa      	ldr	r2, [r7, #28]
 8001546:	429a      	cmp	r2, r3
 8001548:	ddb5      	ble.n	80014b6 <LCD_X+0x1a>
			}
		}
	}
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000000 	.word	0x20000000

08001558 <LCD_Y>:

void LCD_Y(uint16_t x0, uint16_t y0) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	460a      	mov	r2, r1
 8001562:	80fb      	strh	r3, [r7, #6]
 8001564:	4613      	mov	r3, r2
 8001566:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001568:	230f      	movs	r3, #15
 800156a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
 8001570:	e04e      	b.n	8001610 <LCD_Y+0xb8>
		for(int dx = 0; dx <=width; dx++){
 8001572:	2300      	movs	r3, #0
 8001574:	61bb      	str	r3, [r7, #24]
 8001576:	e044      	b.n	8001602 <LCD_Y+0xaa>
			if ((dx >= 6 && dx <= 9 && dy >= 8) || (dx <= 3 && dy <= 3) || (dx >= 12 && dy <= 3) || (dx >= 4 && dx <= 7 && dy >= 4 && dy <= 7) || (dx >= 8 && dx <= 11 && dy >= 4 && dy <= 7)) {
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	2b05      	cmp	r3, #5
 800157c:	dd05      	ble.n	800158a <LCD_Y+0x32>
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	2b09      	cmp	r3, #9
 8001582:	dc02      	bgt.n	800158a <LCD_Y+0x32>
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	2b07      	cmp	r3, #7
 8001588:	dc23      	bgt.n	80015d2 <LCD_Y+0x7a>
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	2b03      	cmp	r3, #3
 800158e:	dc02      	bgt.n	8001596 <LCD_Y+0x3e>
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	2b03      	cmp	r3, #3
 8001594:	dd1d      	ble.n	80015d2 <LCD_Y+0x7a>
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	2b0b      	cmp	r3, #11
 800159a:	dd02      	ble.n	80015a2 <LCD_Y+0x4a>
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	2b03      	cmp	r3, #3
 80015a0:	dd17      	ble.n	80015d2 <LCD_Y+0x7a>
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	dd08      	ble.n	80015ba <LCD_Y+0x62>
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2b07      	cmp	r3, #7
 80015ac:	dc05      	bgt.n	80015ba <LCD_Y+0x62>
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	dd02      	ble.n	80015ba <LCD_Y+0x62>
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	2b07      	cmp	r3, #7
 80015b8:	dd0b      	ble.n	80015d2 <LCD_Y+0x7a>
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	2b07      	cmp	r3, #7
 80015be:	dd1d      	ble.n	80015fc <LCD_Y+0xa4>
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	2b0b      	cmp	r3, #11
 80015c4:	dc1a      	bgt.n	80015fc <LCD_Y+0xa4>
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	dd17      	ble.n	80015fc <LCD_Y+0xa4>
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	2b07      	cmp	r3, #7
 80015d0:	dc14      	bgt.n	80015fc <LCD_Y+0xa4>
				int y = y0 + dy;
 80015d2:	88bb      	ldrh	r3, [r7, #4]
 80015d4:	69fa      	ldr	r2, [r7, #28]
 80015d6:	4413      	add	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4413      	add	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <LCD_Y+0xcc>)
 80015e4:	7818      	ldrb	r0, [r3, #0]
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4613      	mov	r3, r2
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	461a      	mov	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4413      	add	r3, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f000 ff38 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	3301      	adds	r3, #1
 8001600:	61bb      	str	r3, [r7, #24]
 8001602:	7dfb      	ldrb	r3, [r7, #23]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	429a      	cmp	r2, r3
 8001608:	ddb6      	ble.n	8001578 <LCD_Y+0x20>
	for(int dy = 0; dy <= width; dy++){
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3301      	adds	r3, #1
 800160e:	61fb      	str	r3, [r7, #28]
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	429a      	cmp	r2, r3
 8001616:	ddac      	ble.n	8001572 <LCD_Y+0x1a>
			}
		}
	}
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	3720      	adds	r7, #32
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000000 	.word	0x20000000

08001628 <LCD_Z>:

void LCD_Z(uint16_t x0, uint16_t y0) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	460a      	mov	r2, r1
 8001632:	80fb      	strh	r3, [r7, #6]
 8001634:	4613      	mov	r3, r2
 8001636:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001638:	230f      	movs	r3, #15
 800163a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	e03f      	b.n	80016c2 <LCD_Z+0x9a>
		for(int dx = 0; dx <=width; dx++){
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	e035      	b.n	80016b4 <LCD_Z+0x8c>
			if (dy <= 3 || dy >= 12 || (dy >= 4 && dy <= 7 && dx >= 8 && dx <= 11) || (dy >= 8 && dy <= 11 && dx >= 4 && dx <= 7)) {
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	2b03      	cmp	r3, #3
 800164c:	dd1a      	ble.n	8001684 <LCD_Z+0x5c>
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	2b0b      	cmp	r3, #11
 8001652:	dc17      	bgt.n	8001684 <LCD_Z+0x5c>
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	2b03      	cmp	r3, #3
 8001658:	dd08      	ble.n	800166c <LCD_Z+0x44>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	2b07      	cmp	r3, #7
 800165e:	dc05      	bgt.n	800166c <LCD_Z+0x44>
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2b07      	cmp	r3, #7
 8001664:	dd02      	ble.n	800166c <LCD_Z+0x44>
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	2b0b      	cmp	r3, #11
 800166a:	dd0b      	ble.n	8001684 <LCD_Z+0x5c>
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	2b07      	cmp	r3, #7
 8001670:	dd1d      	ble.n	80016ae <LCD_Z+0x86>
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	2b0b      	cmp	r3, #11
 8001676:	dc1a      	bgt.n	80016ae <LCD_Z+0x86>
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	2b03      	cmp	r3, #3
 800167c:	dd17      	ble.n	80016ae <LCD_Z+0x86>
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	2b07      	cmp	r3, #7
 8001682:	dc14      	bgt.n	80016ae <LCD_Z+0x86>
				int y = y0 + dy;
 8001684:	88bb      	ldrh	r3, [r7, #4]
 8001686:	69fa      	ldr	r2, [r7, #28]
 8001688:	4413      	add	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4413      	add	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <LCD_Z+0xac>)
 8001696:	7818      	ldrb	r0, [r3, #0]
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4613      	mov	r3, r2
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	1a9b      	subs	r3, r3, r2
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	461a      	mov	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4413      	add	r3, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	f000 fedf 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	3301      	adds	r3, #1
 80016b2:	61bb      	str	r3, [r7, #24]
 80016b4:	7dfb      	ldrb	r3, [r7, #23]
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	ddc5      	ble.n	8001648 <LCD_Z+0x20>
	for(int dy = 0; dy <= width; dy++){
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	3301      	adds	r3, #1
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	7dfb      	ldrb	r3, [r7, #23]
 80016c4:	69fa      	ldr	r2, [r7, #28]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	ddbb      	ble.n	8001642 <LCD_Z+0x1a>
			}
		}
	}
}
 80016ca:	bf00      	nop
 80016cc:	bf00      	nop
 80016ce:	3720      	adds	r7, #32
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000000 	.word	0x20000000

080016d8 <LCD_0>:

void LCD_0(uint16_t x0, uint16_t y0) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	460a      	mov	r2, r1
 80016e2:	80fb      	strh	r3, [r7, #6]
 80016e4:	4613      	mov	r3, r2
 80016e6:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80016e8:	230f      	movs	r3, #15
 80016ea:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80016ec:	2300      	movs	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]
 80016f0:	e02d      	b.n	800174e <LCD_0+0x76>
		for(int dx = 0; dx <=width; dx++){
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
 80016f6:	e023      	b.n	8001740 <LCD_0+0x68>
			if ((dx <= 3 || dx >= 12) || (dy <= 3 || dy >= 12)) {
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	dd08      	ble.n	8001710 <LCD_0+0x38>
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	2b0b      	cmp	r3, #11
 8001702:	dc05      	bgt.n	8001710 <LCD_0+0x38>
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	2b03      	cmp	r3, #3
 8001708:	dd02      	ble.n	8001710 <LCD_0+0x38>
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	2b0b      	cmp	r3, #11
 800170e:	dd14      	ble.n	800173a <LCD_0+0x62>
				int y = y0 + dy;
 8001710:	88bb      	ldrh	r3, [r7, #4]
 8001712:	69fa      	ldr	r2, [r7, #28]
 8001714:	4413      	add	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4413      	add	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <LCD_0+0x88>)
 8001722:	7818      	ldrb	r0, [r3, #0]
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4613      	mov	r3, r2
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	1a9b      	subs	r3, r3, r2
 800172c:	011b      	lsls	r3, r3, #4
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	4619      	mov	r1, r3
 8001736:	f000 fe99 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	3301      	adds	r3, #1
 800173e:	61bb      	str	r3, [r7, #24]
 8001740:	7dfb      	ldrb	r3, [r7, #23]
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	429a      	cmp	r2, r3
 8001746:	ddd7      	ble.n	80016f8 <LCD_0+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	3301      	adds	r3, #1
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	7dfb      	ldrb	r3, [r7, #23]
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	429a      	cmp	r2, r3
 8001754:	ddcd      	ble.n	80016f2 <LCD_0+0x1a>
			}
		}
	}
}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	3720      	adds	r7, #32
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000000 	.word	0x20000000

08001764 <LCD_1>:

void LCD_1(uint16_t x0, uint16_t y0) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	460a      	mov	r2, r1
 800176e:	80fb      	strh	r3, [r7, #6]
 8001770:	4613      	mov	r3, r2
 8001772:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001774:	230f      	movs	r3, #15
 8001776:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
 800177c:	e027      	b.n	80017ce <LCD_1+0x6a>
		for(int dx = 0; dx <=width; dx++){
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	e01d      	b.n	80017c0 <LCD_1+0x5c>
			if (dx >= 6 && dx <= 9) {
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2b05      	cmp	r3, #5
 8001788:	dd17      	ble.n	80017ba <LCD_1+0x56>
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	2b09      	cmp	r3, #9
 800178e:	dc14      	bgt.n	80017ba <LCD_1+0x56>
				int y = y0 + dy;
 8001790:	88bb      	ldrh	r3, [r7, #4]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	4413      	add	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4413      	add	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <LCD_1+0x7c>)
 80017a2:	7818      	ldrb	r0, [r3, #0]
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4613      	mov	r3, r2
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	1a9b      	subs	r3, r3, r2
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	461a      	mov	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4413      	add	r3, r2
 80017b4:	4619      	mov	r1, r3
 80017b6:	f000 fe59 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	3301      	adds	r3, #1
 80017be:	61bb      	str	r3, [r7, #24]
 80017c0:	7dfb      	ldrb	r3, [r7, #23]
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dddd      	ble.n	8001784 <LCD_1+0x20>
	for(int dy = 0; dy <= width; dy++){
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	3301      	adds	r3, #1
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	7dfb      	ldrb	r3, [r7, #23]
 80017d0:	69fa      	ldr	r2, [r7, #28]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	ddd3      	ble.n	800177e <LCD_1+0x1a>
			}
		}
	}
}
 80017d6:	bf00      	nop
 80017d8:	bf00      	nop
 80017da:	3720      	adds	r7, #32
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000000 	.word	0x20000000

080017e4 <LCD_2>:

void LCD_2(uint16_t x0, uint16_t y0) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	460a      	mov	r2, r1
 80017ee:	80fb      	strh	r3, [r7, #6]
 80017f0:	4613      	mov	r3, r2
 80017f2:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80017f4:	230f      	movs	r3, #15
 80017f6:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	e039      	b.n	8001872 <LCD_2+0x8e>
		for(int dx = 0; dx <=width; dx++){
 80017fe:	2300      	movs	r3, #0
 8001800:	61bb      	str	r3, [r7, #24]
 8001802:	e02f      	b.n	8001864 <LCD_2+0x80>
			if (dy <= 3 || dy >= 12|| (dx >= 12 && dy <= 5) || (dx <= 3 && dy >= 10) || (dy >= 6 && dy <= 9)) {
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	2b03      	cmp	r3, #3
 8001808:	dd14      	ble.n	8001834 <LCD_2+0x50>
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	2b0b      	cmp	r3, #11
 800180e:	dc11      	bgt.n	8001834 <LCD_2+0x50>
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	2b0b      	cmp	r3, #11
 8001814:	dd02      	ble.n	800181c <LCD_2+0x38>
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	2b05      	cmp	r3, #5
 800181a:	dd0b      	ble.n	8001834 <LCD_2+0x50>
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	2b03      	cmp	r3, #3
 8001820:	dc02      	bgt.n	8001828 <LCD_2+0x44>
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	2b09      	cmp	r3, #9
 8001826:	dc05      	bgt.n	8001834 <LCD_2+0x50>
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	2b05      	cmp	r3, #5
 800182c:	dd17      	ble.n	800185e <LCD_2+0x7a>
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	2b09      	cmp	r3, #9
 8001832:	dc14      	bgt.n	800185e <LCD_2+0x7a>
				int y = y0 + dy;
 8001834:	88bb      	ldrh	r3, [r7, #4]
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	4413      	add	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800183c:	88fb      	ldrh	r3, [r7, #6]
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4413      	add	r3, r2
 8001842:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <LCD_2+0xa0>)
 8001846:	7818      	ldrb	r0, [r3, #0]
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4613      	mov	r3, r2
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	1a9b      	subs	r3, r3, r2
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	461a      	mov	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	4619      	mov	r1, r3
 800185a:	f000 fe07 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	3301      	adds	r3, #1
 8001862:	61bb      	str	r3, [r7, #24]
 8001864:	7dfb      	ldrb	r3, [r7, #23]
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	429a      	cmp	r2, r3
 800186a:	ddcb      	ble.n	8001804 <LCD_2+0x20>
	for(int dy = 0; dy <= width; dy++){
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	3301      	adds	r3, #1
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	7dfb      	ldrb	r3, [r7, #23]
 8001874:	69fa      	ldr	r2, [r7, #28]
 8001876:	429a      	cmp	r2, r3
 8001878:	ddc1      	ble.n	80017fe <LCD_2+0x1a>
			}
		}
	}
}
 800187a:	bf00      	nop
 800187c:	bf00      	nop
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000000 	.word	0x20000000

08001888 <LCD_3>:

void LCD_3(uint16_t x0, uint16_t y0) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	460a      	mov	r2, r1
 8001892:	80fb      	strh	r3, [r7, #6]
 8001894:	4613      	mov	r3, r2
 8001896:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001898:	230f      	movs	r3, #15
 800189a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
 80018a0:	e030      	b.n	8001904 <LCD_3+0x7c>
		for(int dx = 0; dx <=width; dx++){
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
 80018a6:	e026      	b.n	80018f6 <LCD_3+0x6e>
			if (dy <= 3 || dy >= 12 || (dy >= 6 && dy <= 9) || (dx >= 12)) {
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	dd0b      	ble.n	80018c6 <LCD_3+0x3e>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	2b0b      	cmp	r3, #11
 80018b2:	dc08      	bgt.n	80018c6 <LCD_3+0x3e>
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	2b05      	cmp	r3, #5
 80018b8:	dd02      	ble.n	80018c0 <LCD_3+0x38>
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	2b09      	cmp	r3, #9
 80018be:	dd02      	ble.n	80018c6 <LCD_3+0x3e>
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2b0b      	cmp	r3, #11
 80018c4:	dd14      	ble.n	80018f0 <LCD_3+0x68>
				int y = y0 + dy;
 80018c6:	88bb      	ldrh	r3, [r7, #4]
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	4413      	add	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4413      	add	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <LCD_3+0x90>)
 80018d8:	7818      	ldrb	r0, [r3, #0]
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4613      	mov	r3, r2
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	1a9b      	subs	r3, r3, r2
 80018e2:	011b      	lsls	r3, r3, #4
 80018e4:	461a      	mov	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4413      	add	r3, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f000 fdbe 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	3301      	adds	r3, #1
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	7dfb      	ldrb	r3, [r7, #23]
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	ddd4      	ble.n	80018a8 <LCD_3+0x20>
	for(int dy = 0; dy <= width; dy++){
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3301      	adds	r3, #1
 8001902:	61fb      	str	r3, [r7, #28]
 8001904:	7dfb      	ldrb	r3, [r7, #23]
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	429a      	cmp	r2, r3
 800190a:	ddca      	ble.n	80018a2 <LCD_3+0x1a>
			}
		}
	}
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3720      	adds	r7, #32
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000000 	.word	0x20000000

0800191c <LCD_4>:

void LCD_4(uint16_t x0, uint16_t y0) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	460a      	mov	r2, r1
 8001926:	80fb      	strh	r3, [r7, #6]
 8001928:	4613      	mov	r3, r2
 800192a:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 800192c:	230f      	movs	r3, #15
 800192e:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	e033      	b.n	800199e <LCD_4+0x82>
		for(int dx = 0; dx <=width; dx++){
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	e029      	b.n	8001990 <LCD_4+0x74>
			if ((dx <= 3 && dy <= 9) || (dy >= 6 && dy <= 9) || (dx >= 10 && dx <= 13)) {
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2b03      	cmp	r3, #3
 8001940:	dc02      	bgt.n	8001948 <LCD_4+0x2c>
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	2b09      	cmp	r3, #9
 8001946:	dd0b      	ble.n	8001960 <LCD_4+0x44>
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	2b05      	cmp	r3, #5
 800194c:	dd02      	ble.n	8001954 <LCD_4+0x38>
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	2b09      	cmp	r3, #9
 8001952:	dd05      	ble.n	8001960 <LCD_4+0x44>
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	2b09      	cmp	r3, #9
 8001958:	dd17      	ble.n	800198a <LCD_4+0x6e>
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	2b0d      	cmp	r3, #13
 800195e:	dc14      	bgt.n	800198a <LCD_4+0x6e>
				int y = y0 + dy;
 8001960:	88bb      	ldrh	r3, [r7, #4]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	4413      	add	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4413      	add	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <LCD_4+0x94>)
 8001972:	7818      	ldrb	r0, [r3, #0]
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4613      	mov	r3, r2
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	1a9b      	subs	r3, r3, r2
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	461a      	mov	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4413      	add	r3, r2
 8001984:	4619      	mov	r1, r3
 8001986:	f000 fd71 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	3301      	adds	r3, #1
 800198e:	61bb      	str	r3, [r7, #24]
 8001990:	7dfb      	ldrb	r3, [r7, #23]
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	429a      	cmp	r2, r3
 8001996:	ddd1      	ble.n	800193c <LCD_4+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	3301      	adds	r3, #1
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	7dfb      	ldrb	r3, [r7, #23]
 80019a0:	69fa      	ldr	r2, [r7, #28]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	ddc7      	ble.n	8001936 <LCD_4+0x1a>
			}
		}
	}
}
 80019a6:	bf00      	nop
 80019a8:	bf00      	nop
 80019aa:	3720      	adds	r7, #32
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000000 	.word	0x20000000

080019b4 <LCD_5>:

void LCD_5(uint16_t x0, uint16_t y0) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	460a      	mov	r2, r1
 80019be:	80fb      	strh	r3, [r7, #6]
 80019c0:	4613      	mov	r3, r2
 80019c2:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80019c4:	230f      	movs	r3, #15
 80019c6:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
 80019cc:	e039      	b.n	8001a42 <LCD_5+0x8e>
		for(int dx = 0; dx <=width; dx++){
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	e02f      	b.n	8001a34 <LCD_5+0x80>
			if (dy <= 3 || dy >= 12|| (dy >= 6 && dy <= 9) || (dx >= 12 && dy >= 6) || (dx <= 3 && dy <= 9)) {
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	dd14      	ble.n	8001a04 <LCD_5+0x50>
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	2b0b      	cmp	r3, #11
 80019de:	dc11      	bgt.n	8001a04 <LCD_5+0x50>
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	2b05      	cmp	r3, #5
 80019e4:	dd02      	ble.n	80019ec <LCD_5+0x38>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	2b09      	cmp	r3, #9
 80019ea:	dd0b      	ble.n	8001a04 <LCD_5+0x50>
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	2b0b      	cmp	r3, #11
 80019f0:	dd02      	ble.n	80019f8 <LCD_5+0x44>
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	2b05      	cmp	r3, #5
 80019f6:	dc05      	bgt.n	8001a04 <LCD_5+0x50>
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	dc17      	bgt.n	8001a2e <LCD_5+0x7a>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	2b09      	cmp	r3, #9
 8001a02:	dc14      	bgt.n	8001a2e <LCD_5+0x7a>
				int y = y0 + dy;
 8001a04:	88bb      	ldrh	r3, [r7, #4]
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	4413      	add	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001a0c:	88fb      	ldrh	r3, [r7, #6]
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4413      	add	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <LCD_5+0xa0>)
 8001a16:	7818      	ldrb	r0, [r3, #0]
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	461a      	mov	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f000 fd1f 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	3301      	adds	r3, #1
 8001a32:	61bb      	str	r3, [r7, #24]
 8001a34:	7dfb      	ldrb	r3, [r7, #23]
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	ddcb      	ble.n	80019d4 <LCD_5+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	7dfb      	ldrb	r3, [r7, #23]
 8001a44:	69fa      	ldr	r2, [r7, #28]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	ddc1      	ble.n	80019ce <LCD_5+0x1a>
			}
		}
	}
}
 8001a4a:	bf00      	nop
 8001a4c:	bf00      	nop
 8001a4e:	3720      	adds	r7, #32
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000000 	.word	0x20000000

08001a58 <LCD_6>:

void LCD_6(uint16_t x0, uint16_t y0) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	460a      	mov	r2, r1
 8001a62:	80fb      	strh	r3, [r7, #6]
 8001a64:	4613      	mov	r3, r2
 8001a66:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001a68:	230f      	movs	r3, #15
 8001a6a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
 8001a70:	e036      	b.n	8001ae0 <LCD_6+0x88>
		for(int dx = 0; dx <=width; dx++){
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
 8001a76:	e02c      	b.n	8001ad2 <LCD_6+0x7a>
			if (dy <= 3 || dx <= 3 || dy >= 12 || (dy >= 6 && dy <= 9) || (dx >= 12 && dy >= 6)) {
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	dd11      	ble.n	8001aa2 <LCD_6+0x4a>
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	dd0e      	ble.n	8001aa2 <LCD_6+0x4a>
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	2b0b      	cmp	r3, #11
 8001a88:	dc0b      	bgt.n	8001aa2 <LCD_6+0x4a>
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	dd02      	ble.n	8001a96 <LCD_6+0x3e>
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	2b09      	cmp	r3, #9
 8001a94:	dd05      	ble.n	8001aa2 <LCD_6+0x4a>
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	2b0b      	cmp	r3, #11
 8001a9a:	dd17      	ble.n	8001acc <LCD_6+0x74>
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	2b05      	cmp	r3, #5
 8001aa0:	dd14      	ble.n	8001acc <LCD_6+0x74>
				int y = y0 + dy;
 8001aa2:	88bb      	ldrh	r3, [r7, #4]
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4413      	add	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <LCD_6+0x9c>)
 8001ab4:	7818      	ldrb	r0, [r3, #0]
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	1a9b      	subs	r3, r3, r2
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f000 fcd0 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	61bb      	str	r3, [r7, #24]
 8001ad2:	7dfb      	ldrb	r3, [r7, #23]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	ddce      	ble.n	8001a78 <LCD_6+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3301      	adds	r3, #1
 8001ade:	61fb      	str	r3, [r7, #28]
 8001ae0:	7dfb      	ldrb	r3, [r7, #23]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	ddc4      	ble.n	8001a72 <LCD_6+0x1a>
			}
		}
	}
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	3720      	adds	r7, #32
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000000 	.word	0x20000000

08001af8 <LCD_7>:

void LCD_7(uint16_t x0, uint16_t y0) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	460a      	mov	r2, r1
 8001b02:	80fb      	strh	r3, [r7, #6]
 8001b04:	4613      	mov	r3, r2
 8001b06:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001b08:	230f      	movs	r3, #15
 8001b0a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
 8001b10:	e042      	b.n	8001b98 <LCD_7+0xa0>
		for(int dx = 0; dx <=width; dx++){
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
 8001b16:	e038      	b.n	8001b8a <LCD_7+0x92>
			if ((dy <= 3) || (dx <= 3 && dy >= 12) || (dy >= 4 && dy <= 7 && dx >= 8 && dx <= 11) || (dy >= 8 && dy <= 11 && dx >= 4 && dx <= 7)) {
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	dd1d      	ble.n	8001b5a <LCD_7+0x62>
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	dc02      	bgt.n	8001b2a <LCD_7+0x32>
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	2b0b      	cmp	r3, #11
 8001b28:	dc17      	bgt.n	8001b5a <LCD_7+0x62>
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	dd08      	ble.n	8001b42 <LCD_7+0x4a>
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	2b07      	cmp	r3, #7
 8001b34:	dc05      	bgt.n	8001b42 <LCD_7+0x4a>
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	2b07      	cmp	r3, #7
 8001b3a:	dd02      	ble.n	8001b42 <LCD_7+0x4a>
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	2b0b      	cmp	r3, #11
 8001b40:	dd0b      	ble.n	8001b5a <LCD_7+0x62>
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	2b07      	cmp	r3, #7
 8001b46:	dd1d      	ble.n	8001b84 <LCD_7+0x8c>
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	2b0b      	cmp	r3, #11
 8001b4c:	dc1a      	bgt.n	8001b84 <LCD_7+0x8c>
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	dd17      	ble.n	8001b84 <LCD_7+0x8c>
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	2b07      	cmp	r3, #7
 8001b58:	dc14      	bgt.n	8001b84 <LCD_7+0x8c>
				int y = y0 + dy;
 8001b5a:	88bb      	ldrh	r3, [r7, #4]
 8001b5c:	69fa      	ldr	r2, [r7, #28]
 8001b5e:	4413      	add	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4413      	add	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <LCD_7+0xb4>)
 8001b6c:	7818      	ldrb	r0, [r3, #0]
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4613      	mov	r3, r2
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	1a9b      	subs	r3, r3, r2
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	461a      	mov	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f000 fc74 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	3301      	adds	r3, #1
 8001b88:	61bb      	str	r3, [r7, #24]
 8001b8a:	7dfb      	ldrb	r3, [r7, #23]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	ddc2      	ble.n	8001b18 <LCD_7+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3301      	adds	r3, #1
 8001b96:	61fb      	str	r3, [r7, #28]
 8001b98:	7dfb      	ldrb	r3, [r7, #23]
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	ddb8      	ble.n	8001b12 <LCD_7+0x1a>
			}
		}
	}
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3720      	adds	r7, #32
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000000 	.word	0x20000000

08001bb0 <LCD_8>:

void LCD_8(uint16_t x0, uint16_t y0) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	460a      	mov	r2, r1
 8001bba:	80fb      	strh	r3, [r7, #6]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001bc0:	230f      	movs	r3, #15
 8001bc2:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
 8001bc8:	e033      	b.n	8001c32 <LCD_8+0x82>
		for(int dx = 0; dx <=width; dx++){
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
 8001bce:	e029      	b.n	8001c24 <LCD_8+0x74>
			if (dy <= 3 || dy >= 12 || (dy >= 6 && dy <= 9) || (dx >= 12) || (dx <= 3)) {
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	dd0e      	ble.n	8001bf4 <LCD_8+0x44>
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	2b0b      	cmp	r3, #11
 8001bda:	dc0b      	bgt.n	8001bf4 <LCD_8+0x44>
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	2b05      	cmp	r3, #5
 8001be0:	dd02      	ble.n	8001be8 <LCD_8+0x38>
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	2b09      	cmp	r3, #9
 8001be6:	dd05      	ble.n	8001bf4 <LCD_8+0x44>
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	2b0b      	cmp	r3, #11
 8001bec:	dc02      	bgt.n	8001bf4 <LCD_8+0x44>
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	dc14      	bgt.n	8001c1e <LCD_8+0x6e>
				int y = y0 + dy;
 8001bf4:	88bb      	ldrh	r3, [r7, #4]
 8001bf6:	69fa      	ldr	r2, [r7, #28]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4413      	add	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <LCD_8+0x94>)
 8001c06:	7818      	ldrb	r0, [r3, #0]
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	1a9b      	subs	r3, r3, r2
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	461a      	mov	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f000 fc27 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	3301      	adds	r3, #1
 8001c22:	61bb      	str	r3, [r7, #24]
 8001c24:	7dfb      	ldrb	r3, [r7, #23]
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	ddd1      	ble.n	8001bd0 <LCD_8+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	7dfb      	ldrb	r3, [r7, #23]
 8001c34:	69fa      	ldr	r2, [r7, #28]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	ddc7      	ble.n	8001bca <LCD_8+0x1a>
			}
		}
	}
}
 8001c3a:	bf00      	nop
 8001c3c:	bf00      	nop
 8001c3e:	3720      	adds	r7, #32
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000000 	.word	0x20000000

08001c48 <LCD_9>:

void LCD_9(uint16_t x0, uint16_t y0) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460a      	mov	r2, r1
 8001c52:	80fb      	strh	r3, [r7, #6]
 8001c54:	4613      	mov	r3, r2
 8001c56:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001c58:	230f      	movs	r3, #15
 8001c5a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
 8001c60:	e036      	b.n	8001cd0 <LCD_9+0x88>
		for(int dx = 0; dx <=width; dx++){
 8001c62:	2300      	movs	r3, #0
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	e02c      	b.n	8001cc2 <LCD_9+0x7a>
			if ((dx <= 3 && dy <= 9) || (dy >= 6 && dy <= 9) || (dx >= 12) || (dy <= 3) || (dy >= 12)) {
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	dc02      	bgt.n	8001c74 <LCD_9+0x2c>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	2b09      	cmp	r3, #9
 8001c72:	dd0e      	ble.n	8001c92 <LCD_9+0x4a>
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	2b05      	cmp	r3, #5
 8001c78:	dd02      	ble.n	8001c80 <LCD_9+0x38>
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	2b09      	cmp	r3, #9
 8001c7e:	dd08      	ble.n	8001c92 <LCD_9+0x4a>
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	2b0b      	cmp	r3, #11
 8001c84:	dc05      	bgt.n	8001c92 <LCD_9+0x4a>
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	dd02      	ble.n	8001c92 <LCD_9+0x4a>
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	2b0b      	cmp	r3, #11
 8001c90:	dd14      	ble.n	8001cbc <LCD_9+0x74>
				int y = y0 + dy;
 8001c92:	88bb      	ldrh	r3, [r7, #4]
 8001c94:	69fa      	ldr	r2, [r7, #28]
 8001c96:	4413      	add	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001c9a:	88fb      	ldrh	r3, [r7, #6]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <LCD_9+0x9c>)
 8001ca4:	7818      	ldrb	r0, [r3, #0]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	1a9b      	subs	r3, r3, r2
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f000 fbd8 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	61bb      	str	r3, [r7, #24]
 8001cc2:	7dfb      	ldrb	r3, [r7, #23]
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	ddce      	ble.n	8001c68 <LCD_9+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	61fb      	str	r3, [r7, #28]
 8001cd0:	7dfb      	ldrb	r3, [r7, #23]
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	ddc4      	ble.n	8001c62 <LCD_9+0x1a>
			}
		}
	}
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	3720      	adds	r7, #32
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000000 	.word	0x20000000

08001ce8 <LCD_Period>:

void LCD_Period(uint16_t x0, uint16_t y0) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	80fb      	strh	r3, [r7, #6]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001cf8:	230f      	movs	r3, #15
 8001cfa:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
 8001d00:	e02d      	b.n	8001d5e <LCD_Period+0x76>
		for(int dx = 0; dx <=width; dx++){
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
 8001d06:	e023      	b.n	8001d50 <LCD_Period+0x68>
			if ((dx >= 3 && dx <= 6) && (dy >= 12 && dy <= 15)) {
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	dd1d      	ble.n	8001d4a <LCD_Period+0x62>
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	2b06      	cmp	r3, #6
 8001d12:	dc1a      	bgt.n	8001d4a <LCD_Period+0x62>
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	2b0b      	cmp	r3, #11
 8001d18:	dd17      	ble.n	8001d4a <LCD_Period+0x62>
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	2b0f      	cmp	r3, #15
 8001d1e:	dc14      	bgt.n	8001d4a <LCD_Period+0x62>
				int y = y0 + dy;
 8001d20:	88bb      	ldrh	r3, [r7, #4]
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	4413      	add	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001d28:	88fb      	ldrh	r3, [r7, #6]
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <LCD_Period+0x88>)
 8001d32:	7818      	ldrb	r0, [r3, #0]
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4613      	mov	r3, r2
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	1a9b      	subs	r3, r3, r2
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	461a      	mov	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4413      	add	r3, r2
 8001d44:	4619      	mov	r1, r3
 8001d46:	f000 fb91 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	61bb      	str	r3, [r7, #24]
 8001d50:	7dfb      	ldrb	r3, [r7, #23]
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	ddd7      	ble.n	8001d08 <LCD_Period+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	61fb      	str	r3, [r7, #28]
 8001d5e:	7dfb      	ldrb	r3, [r7, #23]
 8001d60:	69fa      	ldr	r2, [r7, #28]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	ddcd      	ble.n	8001d02 <LCD_Period+0x1a>
			}
		}
	}
}
 8001d66:	bf00      	nop
 8001d68:	bf00      	nop
 8001d6a:	3720      	adds	r7, #32
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000000 	.word	0x20000000

08001d74 <LCD_Colon>:

void LCD_Colon(uint16_t x0, uint16_t y0) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	460a      	mov	r2, r1
 8001d7e:	80fb      	strh	r3, [r7, #6]
 8001d80:	4613      	mov	r3, r2
 8001d82:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001d84:	230f      	movs	r3, #15
 8001d86:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61fb      	str	r3, [r7, #28]
 8001d8c:	e033      	b.n	8001df6 <LCD_Colon+0x82>
		for(int dx = 0; dx <=width; dx++){
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
 8001d92:	e029      	b.n	8001de8 <LCD_Colon+0x74>
			if ((dx >= 6 && dx <= 9) && ((dy >= 3 && dy <= 6)|| (dy >= 10 && dy <= 13))) {
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	2b05      	cmp	r3, #5
 8001d98:	dd23      	ble.n	8001de2 <LCD_Colon+0x6e>
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	2b09      	cmp	r3, #9
 8001d9e:	dc20      	bgt.n	8001de2 <LCD_Colon+0x6e>
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	dd02      	ble.n	8001dac <LCD_Colon+0x38>
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	2b06      	cmp	r3, #6
 8001daa:	dd05      	ble.n	8001db8 <LCD_Colon+0x44>
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	2b09      	cmp	r3, #9
 8001db0:	dd17      	ble.n	8001de2 <LCD_Colon+0x6e>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	2b0d      	cmp	r3, #13
 8001db6:	dc14      	bgt.n	8001de2 <LCD_Colon+0x6e>
				int y = y0 + dy;
 8001db8:	88bb      	ldrh	r3, [r7, #4]
 8001dba:	69fa      	ldr	r2, [r7, #28]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001dc0:	88fb      	ldrh	r3, [r7, #6]
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <LCD_Colon+0x94>)
 8001dca:	7818      	ldrb	r0, [r3, #0]
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	011b      	lsls	r3, r3, #4
 8001dd2:	1a9b      	subs	r3, r3, r2
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4413      	add	r3, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f000 fb45 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	3301      	adds	r3, #1
 8001de6:	61bb      	str	r3, [r7, #24]
 8001de8:	7dfb      	ldrb	r3, [r7, #23]
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	ddd1      	ble.n	8001d94 <LCD_Colon+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	3301      	adds	r3, #1
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	7dfb      	ldrb	r3, [r7, #23]
 8001df8:	69fa      	ldr	r2, [r7, #28]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	ddc7      	ble.n	8001d8e <LCD_Colon+0x1a>
			}
		}
	}
}
 8001dfe:	bf00      	nop
 8001e00:	bf00      	nop
 8001e02:	3720      	adds	r7, #32
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000000 	.word	0x20000000

08001e0c <LCD_ClearTime>:

void LCD_ClearTime(void){
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  	  LCD_ClearChar(0, 0);
 8001e10:	2100      	movs	r1, #0
 8001e12:	2000      	movs	r0, #0
 8001e14:	f000 fb54 	bl	80024c0 <LCD_ClearChar>
  	  LCD_ClearChar(18, 0);
 8001e18:	2100      	movs	r1, #0
 8001e1a:	2012      	movs	r0, #18
 8001e1c:	f000 fb50 	bl	80024c0 <LCD_ClearChar>
  	  LCD_ClearChar(36, 0);
 8001e20:	2100      	movs	r1, #0
 8001e22:	2024      	movs	r0, #36	; 0x24
 8001e24:	f000 fb4c 	bl	80024c0 <LCD_ClearChar>
  	  LCD_ClearChar(54, 0);
 8001e28:	2100      	movs	r1, #0
 8001e2a:	2036      	movs	r0, #54	; 0x36
 8001e2c:	f000 fb48 	bl	80024c0 <LCD_ClearChar>
  	  LCD_ClearChar(72, 0);
 8001e30:	2100      	movs	r1, #0
 8001e32:	2048      	movs	r0, #72	; 0x48
 8001e34:	f000 fb44 	bl	80024c0 <LCD_ClearChar>
}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <LCD_GpioInit>:
extern SPI_HandleTypeDef hspi5;
extern LTDC_HandleTypeDef hltdc;

uint8_t GRAM[LCD_WIDTH * LCD_HEIGHT] = {30, 30, 30, 10, 123, 123, 123, 123, 123, 123};

void LCD_GpioInit() {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0
	MX_SPI5_Init();
 8001e42:	f001 f9eb 	bl	800321c <MX_SPI5_Init>
	// Enable Port Clock
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <LCD_GpioInit+0x90>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a1f      	ldr	r2, [pc, #124]	; (8001ecc <LCD_GpioInit+0x90>)
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <LCD_GpioInit+0x90>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <LCD_GpioInit+0x90>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a18      	ldr	r2, [pc, #96]	; (8001ecc <LCD_GpioInit+0x90>)
 8001e6c:	f043 0308 	orr.w	r3, r3, #8
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <LCD_GpioInit+0x90>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	607b      	str	r3, [r7, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
	// Initialize NCS and DCX Port
	GPIO_InitTypeDef Gpio_InitStruct;
	Gpio_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	613b      	str	r3, [r7, #16]
	Gpio_InitStruct.Pull = GPIO_PULLUP;
 8001e82:	2301      	movs	r3, #1
 8001e84:	617b      	str	r3, [r7, #20]
	Gpio_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e86:	2303      	movs	r3, #3
 8001e88:	61bb      	str	r3, [r7, #24]
	Gpio_InitStruct.Pin = LCD_NCS_PIN;
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LCD_NCS_GPIO, &Gpio_InitStruct);
 8001e8e:	f107 030c 	add.w	r3, r7, #12
 8001e92:	4619      	mov	r1, r3
 8001e94:	480e      	ldr	r0, [pc, #56]	; (8001ed0 <LCD_GpioInit+0x94>)
 8001e96:	f001 fc7b 	bl	8003790 <HAL_GPIO_Init>
	Gpio_InitStruct.Pin = LCD_DCX_PIN;
 8001e9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e9e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LCD_DCX_GPIO, &Gpio_InitStruct);
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	480b      	ldr	r0, [pc, #44]	; (8001ed4 <LCD_GpioInit+0x98>)
 8001ea8:	f001 fc72 	bl	8003790 <HAL_GPIO_Init>
	// Initialize NCS and DCX value
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
 8001eac:	2201      	movs	r2, #1
 8001eae:	2104      	movs	r1, #4
 8001eb0:	4807      	ldr	r0, [pc, #28]	; (8001ed0 <LCD_GpioInit+0x94>)
 8001eb2:	f001 fe19 	bl	8003ae8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, GPIO_PIN_SET);
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ebc:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <LCD_GpioInit+0x98>)
 8001ebe:	f001 fe13 	bl	8003ae8 <HAL_GPIO_WritePin>
}
 8001ec2:	bf00      	nop
 8001ec4:	3720      	adds	r7, #32
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40020800 	.word	0x40020800
 8001ed4:	40020c00 	.word	0x40020c00

08001ed8 <LCD_LtdcInit>:


void LCD_LtdcInit() {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
	MX_LTDC_Init();
 8001edc:	f000 fb28 	bl	8002530 <MX_LTDC_Init>
	HAL_LTDC_SetAddress(&hltdc, (uint32_t)GRAM, LTDC_LAYER_1);
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <LCD_LtdcInit+0x38>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	480b      	ldr	r0, [pc, #44]	; (8001f14 <LCD_LtdcInit+0x3c>)
 8001ee8:	f001 fffb 	bl	8003ee2 <HAL_LTDC_SetAddress>
	HAL_LTDC_ConfigCLUT(&hltdc, CLUT, 256, LTDC_LAYER_1);
 8001eec:	2300      	movs	r3, #0
 8001eee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ef2:	4909      	ldr	r1, [pc, #36]	; (8001f18 <LCD_LtdcInit+0x40>)
 8001ef4:	4807      	ldr	r0, [pc, #28]	; (8001f14 <LCD_LtdcInit+0x3c>)
 8001ef6:	f001 ff47 	bl	8003d88 <HAL_LTDC_ConfigCLUT>
	HAL_LTDC_EnableCLUT(&hltdc, LTDC_LAYER_1);
 8001efa:	2100      	movs	r1, #0
 8001efc:	4805      	ldr	r0, [pc, #20]	; (8001f14 <LCD_LtdcInit+0x3c>)
 8001efe:	f001 ffb7 	bl	8003e70 <HAL_LTDC_EnableCLUT>
	HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8001f02:	2102      	movs	r1, #2
 8001f04:	4803      	ldr	r0, [pc, #12]	; (8001f14 <LCD_LtdcInit+0x3c>)
 8001f06:	f002 f822 	bl	8003f4e <HAL_LTDC_Reload>
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000004 	.word	0x20000004
 8001f14:	20012c30 	.word	0x20012c30
 8001f18:	08005598 	.word	0x08005598

08001f1c <LCD_DispInit_Spi>:

void LCD_DispInit_Spi() {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
	//SOFTWARE RESET
	LCD_WriteCommand(0x01);
 8001f20:	2001      	movs	r0, #1
 8001f22:	f000 fa47 	bl	80023b4 <LCD_WriteCommand>
	HAL_Delay(1000);
 8001f26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f2a:	f001 fafb 	bl	8003524 <HAL_Delay>

	//POWER CONTROL A
	LCD_WriteCommand(0xCB);
 8001f2e:	20cb      	movs	r0, #203	; 0xcb
 8001f30:	f000 fa40 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x39);
 8001f34:	2039      	movs	r0, #57	; 0x39
 8001f36:	f000 fa6b 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x2C);
 8001f3a:	202c      	movs	r0, #44	; 0x2c
 8001f3c:	f000 fa68 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x00);
 8001f40:	2000      	movs	r0, #0
 8001f42:	f000 fa65 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x34);
 8001f46:	2034      	movs	r0, #52	; 0x34
 8001f48:	f000 fa62 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x02);
 8001f4c:	2002      	movs	r0, #2
 8001f4e:	f000 fa5f 	bl	8002410 <LCD_WriteData>

	//POWER CONTROL B
	LCD_WriteCommand(0xCF);
 8001f52:	20cf      	movs	r0, #207	; 0xcf
 8001f54:	f000 fa2e 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f000 fa59 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0xC1);
 8001f5e:	20c1      	movs	r0, #193	; 0xc1
 8001f60:	f000 fa56 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x30);
 8001f64:	2030      	movs	r0, #48	; 0x30
 8001f66:	f000 fa53 	bl	8002410 <LCD_WriteData>

	//DRIVER TIMING CONTROL A
	LCD_WriteCommand(0xE8);
 8001f6a:	20e8      	movs	r0, #232	; 0xe8
 8001f6c:	f000 fa22 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x85);
 8001f70:	2085      	movs	r0, #133	; 0x85
 8001f72:	f000 fa4d 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x00);
 8001f76:	2000      	movs	r0, #0
 8001f78:	f000 fa4a 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x78);
 8001f7c:	2078      	movs	r0, #120	; 0x78
 8001f7e:	f000 fa47 	bl	8002410 <LCD_WriteData>

	//DRIVER TIMING CONTROL B
	LCD_WriteCommand(0xEA);
 8001f82:	20ea      	movs	r0, #234	; 0xea
 8001f84:	f000 fa16 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f000 fa41 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x00);
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f000 fa3e 	bl	8002410 <LCD_WriteData>

	//POWER ON SEQUENCE CONTROL
	LCD_WriteCommand(0xED);
 8001f94:	20ed      	movs	r0, #237	; 0xed
 8001f96:	f000 fa0d 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x64);
 8001f9a:	2064      	movs	r0, #100	; 0x64
 8001f9c:	f000 fa38 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x03);
 8001fa0:	2003      	movs	r0, #3
 8001fa2:	f000 fa35 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x12);
 8001fa6:	2012      	movs	r0, #18
 8001fa8:	f000 fa32 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x81);
 8001fac:	2081      	movs	r0, #129	; 0x81
 8001fae:	f000 fa2f 	bl	8002410 <LCD_WriteData>

	//PUMP RATIO CONTROL
	LCD_WriteCommand(0xF7);
 8001fb2:	20f7      	movs	r0, #247	; 0xf7
 8001fb4:	f000 f9fe 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x20);
 8001fb8:	2020      	movs	r0, #32
 8001fba:	f000 fa29 	bl	8002410 <LCD_WriteData>

	//POWER CONTROL,VRH[5:0]
	LCD_WriteCommand(0xC0);
 8001fbe:	20c0      	movs	r0, #192	; 0xc0
 8001fc0:	f000 f9f8 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x23);
 8001fc4:	2023      	movs	r0, #35	; 0x23
 8001fc6:	f000 fa23 	bl	8002410 <LCD_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	LCD_WriteCommand(0xC1);
 8001fca:	20c1      	movs	r0, #193	; 0xc1
 8001fcc:	f000 f9f2 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 8001fd0:	2010      	movs	r0, #16
 8001fd2:	f000 fa1d 	bl	8002410 <LCD_WriteData>

	//VCM CONTROL
	LCD_WriteCommand(0xC5);
 8001fd6:	20c5      	movs	r0, #197	; 0xc5
 8001fd8:	f000 f9ec 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x3E);
 8001fdc:	203e      	movs	r0, #62	; 0x3e
 8001fde:	f000 fa17 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x28);
 8001fe2:	2028      	movs	r0, #40	; 0x28
 8001fe4:	f000 fa14 	bl	8002410 <LCD_WriteData>

	//VCM CONTROL 2
	LCD_WriteCommand(0xC7);
 8001fe8:	20c7      	movs	r0, #199	; 0xc7
 8001fea:	f000 f9e3 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x86);
 8001fee:	2086      	movs	r0, #134	; 0x86
 8001ff0:	f000 fa0e 	bl	8002410 <LCD_WriteData>

	//MEMORY ACCESS CONTROL
	LCD_WriteCommand(0x36);
 8001ff4:	2036      	movs	r0, #54	; 0x36
 8001ff6:	f000 f9dd 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x48);
 8001ffa:	2048      	movs	r0, #72	; 0x48
 8001ffc:	f000 fa08 	bl	8002410 <LCD_WriteData>

	//PIXEL FORMAT
	LCD_WriteCommand(0x3A);
 8002000:	203a      	movs	r0, #58	; 0x3a
 8002002:	f000 f9d7 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x55);
 8002006:	2055      	movs	r0, #85	; 0x55
 8002008:	f000 fa02 	bl	8002410 <LCD_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	LCD_WriteCommand(0xB1);
 800200c:	20b1      	movs	r0, #177	; 0xb1
 800200e:	f000 f9d1 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8002012:	2000      	movs	r0, #0
 8002014:	f000 f9fc 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x18);
 8002018:	2018      	movs	r0, #24
 800201a:	f000 f9f9 	bl	8002410 <LCD_WriteData>

	//DISPLAY FUNCTION CONTROL
	LCD_WriteCommand(0xB6);
 800201e:	20b6      	movs	r0, #182	; 0xb6
 8002020:	f000 f9c8 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x08);
 8002024:	2008      	movs	r0, #8
 8002026:	f000 f9f3 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x82);
 800202a:	2082      	movs	r0, #130	; 0x82
 800202c:	f000 f9f0 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x27);
 8002030:	2027      	movs	r0, #39	; 0x27
 8002032:	f000 f9ed 	bl	8002410 <LCD_WriteData>

	//3GAMMA FUNCTION DISABLE
	LCD_WriteCommand(0xF2);
 8002036:	20f2      	movs	r0, #242	; 0xf2
 8002038:	f000 f9bc 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800203c:	2000      	movs	r0, #0
 800203e:	f000 f9e7 	bl	8002410 <LCD_WriteData>

	//GAMMA CURVE SELECTED
	LCD_WriteCommand(0x26);
 8002042:	2026      	movs	r0, #38	; 0x26
 8002044:	f000 f9b6 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 8002048:	2001      	movs	r0, #1
 800204a:	f000 f9e1 	bl	8002410 <LCD_WriteData>

	//POSITIVE GAMMA CORRECTION
	LCD_WriteCommand(0xE0);
 800204e:	20e0      	movs	r0, #224	; 0xe0
 8002050:	f000 f9b0 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x0F);
 8002054:	200f      	movs	r0, #15
 8002056:	f000 f9db 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x31);
 800205a:	2031      	movs	r0, #49	; 0x31
 800205c:	f000 f9d8 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x2B);
 8002060:	202b      	movs	r0, #43	; 0x2b
 8002062:	f000 f9d5 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x0C);
 8002066:	200c      	movs	r0, #12
 8002068:	f000 f9d2 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x0E);
 800206c:	200e      	movs	r0, #14
 800206e:	f000 f9cf 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x08);
 8002072:	2008      	movs	r0, #8
 8002074:	f000 f9cc 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x4E);
 8002078:	204e      	movs	r0, #78	; 0x4e
 800207a:	f000 f9c9 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0xF1);
 800207e:	20f1      	movs	r0, #241	; 0xf1
 8002080:	f000 f9c6 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x37);
 8002084:	2037      	movs	r0, #55	; 0x37
 8002086:	f000 f9c3 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x07);
 800208a:	2007      	movs	r0, #7
 800208c:	f000 f9c0 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x10);
 8002090:	2010      	movs	r0, #16
 8002092:	f000 f9bd 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x03);
 8002096:	2003      	movs	r0, #3
 8002098:	f000 f9ba 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x0E);
 800209c:	200e      	movs	r0, #14
 800209e:	f000 f9b7 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x09);
 80020a2:	2009      	movs	r0, #9
 80020a4:	f000 f9b4 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x00);
 80020a8:	2000      	movs	r0, #0
 80020aa:	f000 f9b1 	bl	8002410 <LCD_WriteData>

	//NEGATIVE GAMMA CORRECTION
	LCD_WriteCommand(0xE1);
 80020ae:	20e1      	movs	r0, #225	; 0xe1
 80020b0:	f000 f980 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80020b4:	2000      	movs	r0, #0
 80020b6:	f000 f9ab 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x0E);
 80020ba:	200e      	movs	r0, #14
 80020bc:	f000 f9a8 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x14);
 80020c0:	2014      	movs	r0, #20
 80020c2:	f000 f9a5 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x03);
 80020c6:	2003      	movs	r0, #3
 80020c8:	f000 f9a2 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x11);
 80020cc:	2011      	movs	r0, #17
 80020ce:	f000 f99f 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x07);
 80020d2:	2007      	movs	r0, #7
 80020d4:	f000 f99c 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x31);
 80020d8:	2031      	movs	r0, #49	; 0x31
 80020da:	f000 f999 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0xC1);
 80020de:	20c1      	movs	r0, #193	; 0xc1
 80020e0:	f000 f996 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x48);
 80020e4:	2048      	movs	r0, #72	; 0x48
 80020e6:	f000 f993 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x08);
 80020ea:	2008      	movs	r0, #8
 80020ec:	f000 f990 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x0F);
 80020f0:	200f      	movs	r0, #15
 80020f2:	f000 f98d 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x0C);
 80020f6:	200c      	movs	r0, #12
 80020f8:	f000 f98a 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x31);
 80020fc:	2031      	movs	r0, #49	; 0x31
 80020fe:	f000 f987 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x36);
 8002102:	2036      	movs	r0, #54	; 0x36
 8002104:	f000 f984 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x0F);
 8002108:	200f      	movs	r0, #15
 800210a:	f000 f981 	bl	8002410 <LCD_WriteData>

	//EXIT SLEEP
	LCD_WriteCommand(0x11);
 800210e:	2011      	movs	r0, #17
 8002110:	f000 f950 	bl	80023b4 <LCD_WriteCommand>
	HAL_Delay(120);
 8002114:	2078      	movs	r0, #120	; 0x78
 8002116:	f001 fa05 	bl	8003524 <HAL_Delay>

	//TURN ON DISPLAY
	LCD_WriteCommand(0x29);
 800211a:	2029      	movs	r0, #41	; 0x29
 800211c:	f000 f94a 	bl	80023b4 <LCD_WriteCommand>
}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}

08002124 <LCD_DispInit_Ltdc>:

void LCD_DispInit_Ltdc() {
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
	LCD_WriteCommand(0xCA);
 8002128:	20ca      	movs	r0, #202	; 0xca
 800212a:	f000 f943 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0xC3);
 800212e:	20c3      	movs	r0, #195	; 0xc3
 8002130:	f000 f96e 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x08);
 8002134:	2008      	movs	r0, #8
 8002136:	f000 f96b 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x50);
 800213a:	2050      	movs	r0, #80	; 0x50
 800213c:	f000 f968 	bl	8002410 <LCD_WriteData>

	// LCD_POWERB
	LCD_WriteCommand(LCD_POWERB);
 8002140:	20cf      	movs	r0, #207	; 0xcf
 8002142:	f000 f937 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8002146:	2000      	movs	r0, #0
 8002148:	f000 f962 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0xC1);
 800214c:	20c1      	movs	r0, #193	; 0xc1
 800214e:	f000 f95f 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x30);
 8002152:	2030      	movs	r0, #48	; 0x30
 8002154:	f000 f95c 	bl	8002410 <LCD_WriteData>

	// LCD_POWER_SEQ
	LCD_WriteCommand(LCD_POWER_SEQ);
 8002158:	20ed      	movs	r0, #237	; 0xed
 800215a:	f000 f92b 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x64);
 800215e:	2064      	movs	r0, #100	; 0x64
 8002160:	f000 f956 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x03);
 8002164:	2003      	movs	r0, #3
 8002166:	f000 f953 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x12);
 800216a:	2012      	movs	r0, #18
 800216c:	f000 f950 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x81);
 8002170:	2081      	movs	r0, #129	; 0x81
 8002172:	f000 f94d 	bl	8002410 <LCD_WriteData>

	// LCD_DTCA
	LCD_WriteCommand(LCD_DTCA);
 8002176:	20e8      	movs	r0, #232	; 0xe8
 8002178:	f000 f91c 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x85);
 800217c:	2085      	movs	r0, #133	; 0x85
 800217e:	f000 f947 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x00);
 8002182:	2000      	movs	r0, #0
 8002184:	f000 f944 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x78);
 8002188:	2078      	movs	r0, #120	; 0x78
 800218a:	f000 f941 	bl	8002410 <LCD_WriteData>

	// LCD_POWERA
	LCD_WriteCommand(LCD_POWERA);
 800218e:	20cb      	movs	r0, #203	; 0xcb
 8002190:	f000 f910 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x39);
 8002194:	2039      	movs	r0, #57	; 0x39
 8002196:	f000 f93b 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x2C);
 800219a:	202c      	movs	r0, #44	; 0x2c
 800219c:	f000 f938 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x00);
 80021a0:	2000      	movs	r0, #0
 80021a2:	f000 f935 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x34);
 80021a6:	2034      	movs	r0, #52	; 0x34
 80021a8:	f000 f932 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x02);
 80021ac:	2002      	movs	r0, #2
 80021ae:	f000 f92f 	bl	8002410 <LCD_WriteData>

	// LCD_RPC
	LCD_WriteCommand(LCD_PRC);
 80021b2:	20f7      	movs	r0, #247	; 0xf7
 80021b4:	f000 f8fe 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x20);
 80021b8:	2020      	movs	r0, #32
 80021ba:	f000 f929 	bl	8002410 <LCD_WriteData>

	// LCD_DTCB
	LCD_WriteCommand(LCD_DTCB);
 80021be:	20ea      	movs	r0, #234	; 0xea
 80021c0:	f000 f8f8 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80021c4:	2000      	movs	r0, #0
 80021c6:	f000 f923 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x00);
 80021ca:	2000      	movs	r0, #0
 80021cc:	f000 f920 	bl	8002410 <LCD_WriteData>

	// LCD_FRMCTR1
	LCD_WriteCommand(LCD_FRMCTR1);
 80021d0:	20b1      	movs	r0, #177	; 0xb1
 80021d2:	f000 f8ef 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80021d6:	2000      	movs	r0, #0
 80021d8:	f000 f91a 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x1B);
 80021dc:	201b      	movs	r0, #27
 80021de:	f000 f917 	bl	8002410 <LCD_WriteData>

	// LCD_DFC
	LCD_WriteCommand(LCD_DFC);
 80021e2:	20b6      	movs	r0, #182	; 0xb6
 80021e4:	f000 f8e6 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 80021e8:	200a      	movs	r0, #10
 80021ea:	f000 f911 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0xA2);
 80021ee:	20a2      	movs	r0, #162	; 0xa2
 80021f0:	f000 f90e 	bl	8002410 <LCD_WriteData>

	// LCD_POWER1
	LCD_WriteCommand(LCD_POWER1);
 80021f4:	20c0      	movs	r0, #192	; 0xc0
 80021f6:	f000 f8dd 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 80021fa:	2010      	movs	r0, #16
 80021fc:	f000 f908 	bl	8002410 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER2);
 8002200:	20c1      	movs	r0, #193	; 0xc1
 8002202:	f000 f8d7 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 8002206:	2010      	movs	r0, #16
 8002208:	f000 f902 	bl	8002410 <LCD_WriteData>

	// LCD_VCOM
	LCD_WriteCommand(LCD_VCOM1);
 800220c:	20c5      	movs	r0, #197	; 0xc5
 800220e:	f000 f8d1 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x45);
 8002212:	2045      	movs	r0, #69	; 0x45
 8002214:	f000 f8fc 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x15);
 8002218:	2015      	movs	r0, #21
 800221a:	f000 f8f9 	bl	8002410 <LCD_WriteData>
	LCD_WriteCommand(LCD_VCOM2);
 800221e:	20c7      	movs	r0, #199	; 0xc7
 8002220:	f000 f8c8 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x90);
 8002224:	2090      	movs	r0, #144	; 0x90
 8002226:	f000 f8f3 	bl	8002410 <LCD_WriteData>

	// LCD_MAC
	LCD_WriteCommand(LCD_MAC);
 800222a:	2036      	movs	r0, #54	; 0x36
 800222c:	f000 f8c2 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0xC8);
 8002230:	20c8      	movs	r0, #200	; 0xc8
 8002232:	f000 f8ed 	bl	8002410 <LCD_WriteData>

	// LCD_GAMMA
	LCD_WriteCommand(LCD_3GAMMA_EN);
 8002236:	20f2      	movs	r0, #242	; 0xf2
 8002238:	f000 f8bc 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800223c:	2000      	movs	r0, #0
 800223e:	f000 f8e7 	bl	8002410 <LCD_WriteData>

	// LCD_RGB_INTERFACE
	LCD_WriteCommand(LCD_RGB_INTERFACE);
 8002242:	20b0      	movs	r0, #176	; 0xb0
 8002244:	f000 f8b6 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0xC2);
 8002248:	20c2      	movs	r0, #194	; 0xc2
 800224a:	f000 f8e1 	bl	8002410 <LCD_WriteData>

	// LCD_DFC
	LCD_WriteCommand(LCD_DFC);
 800224e:	20b6      	movs	r0, #182	; 0xb6
 8002250:	f000 f8b0 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 8002254:	200a      	movs	r0, #10
 8002256:	f000 f8db 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0xA7);
 800225a:	20a7      	movs	r0, #167	; 0xa7
 800225c:	f000 f8d8 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x27);
 8002260:	2027      	movs	r0, #39	; 0x27
 8002262:	f000 f8d5 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x04);
 8002266:	2004      	movs	r0, #4
 8002268:	f000 f8d2 	bl	8002410 <LCD_WriteData>

	// COLUMN_ADDR
	LCD_WriteCommand(LCD_COLUMN_ADDR);
 800226c:	202a      	movs	r0, #42	; 0x2a
 800226e:	f000 f8a1 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8002272:	2000      	movs	r0, #0
 8002274:	f000 f8cc 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x00);
 8002278:	2000      	movs	r0, #0
 800227a:	f000 f8c9 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x00);
 800227e:	2000      	movs	r0, #0
 8002280:	f000 f8c6 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0xEF);
 8002284:	20ef      	movs	r0, #239	; 0xef
 8002286:	f000 f8c3 	bl	8002410 <LCD_WriteData>

	// PAGE_ADDR
	LCD_WriteCommand(LCD_PAGE_ADDR);
 800228a:	202b      	movs	r0, #43	; 0x2b
 800228c:	f000 f892 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8002290:	2000      	movs	r0, #0
 8002292:	f000 f8bd 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x00);
 8002296:	2000      	movs	r0, #0
 8002298:	f000 f8ba 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x01);
 800229c:	2001      	movs	r0, #1
 800229e:	f000 f8b7 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x3F);
 80022a2:	203f      	movs	r0, #63	; 0x3f
 80022a4:	f000 f8b4 	bl	8002410 <LCD_WriteData>

	// INERFACE
	LCD_WriteCommand(LCD_INTERFACE);
 80022a8:	20f6      	movs	r0, #246	; 0xf6
 80022aa:	f000 f883 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 80022ae:	2001      	movs	r0, #1
 80022b0:	f000 f8ae 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x00);
 80022b4:	2000      	movs	r0, #0
 80022b6:	f000 f8ab 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x06);
 80022ba:	2006      	movs	r0, #6
 80022bc:	f000 f8a8 	bl	8002410 <LCD_WriteData>

	// LCD_GRAM
	LCD_WriteCommand(LCD_GRAM);
 80022c0:	202c      	movs	r0, #44	; 0x2c
 80022c2:	f000 f877 	bl	80023b4 <LCD_WriteCommand>
	HAL_Delay(200);
 80022c6:	20c8      	movs	r0, #200	; 0xc8
 80022c8:	f001 f92c 	bl	8003524 <HAL_Delay>

	// LCD_GAMMA
	LCD_WriteCommand(LCD_GAMMA);
 80022cc:	2026      	movs	r0, #38	; 0x26
 80022ce:	f000 f871 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 80022d2:	2001      	movs	r0, #1
 80022d4:	f000 f89c 	bl	8002410 <LCD_WriteData>

	// LCD_PGAMMA
	LCD_WriteCommand(LCD_PGAMMA);
 80022d8:	20e0      	movs	r0, #224	; 0xe0
 80022da:	f000 f86b 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x0F);
 80022de:	200f      	movs	r0, #15
 80022e0:	f000 f896 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x29);
 80022e4:	2029      	movs	r0, #41	; 0x29
 80022e6:	f000 f893 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x24);
 80022ea:	2024      	movs	r0, #36	; 0x24
 80022ec:	f000 f890 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x0C);
 80022f0:	200c      	movs	r0, #12
 80022f2:	f000 f88d 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x0E);
 80022f6:	200e      	movs	r0, #14
 80022f8:	f000 f88a 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x09);
 80022fc:	2009      	movs	r0, #9
 80022fe:	f000 f887 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x4E);
 8002302:	204e      	movs	r0, #78	; 0x4e
 8002304:	f000 f884 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x78);
 8002308:	2078      	movs	r0, #120	; 0x78
 800230a:	f000 f881 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x3C);
 800230e:	203c      	movs	r0, #60	; 0x3c
 8002310:	f000 f87e 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x09);
 8002314:	2009      	movs	r0, #9
 8002316:	f000 f87b 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x13);
 800231a:	2013      	movs	r0, #19
 800231c:	f000 f878 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x05);
 8002320:	2005      	movs	r0, #5
 8002322:	f000 f875 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x17);
 8002326:	2017      	movs	r0, #23
 8002328:	f000 f872 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x11);
 800232c:	2011      	movs	r0, #17
 800232e:	f000 f86f 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x00);
 8002332:	2000      	movs	r0, #0
 8002334:	f000 f86c 	bl	8002410 <LCD_WriteData>
	LCD_WriteCommand(LCD_NGAMMA);
 8002338:	20e1      	movs	r0, #225	; 0xe1
 800233a:	f000 f83b 	bl	80023b4 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800233e:	2000      	movs	r0, #0
 8002340:	f000 f866 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x16);
 8002344:	2016      	movs	r0, #22
 8002346:	f000 f863 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x1B);
 800234a:	201b      	movs	r0, #27
 800234c:	f000 f860 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x04);
 8002350:	2004      	movs	r0, #4
 8002352:	f000 f85d 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x11);
 8002356:	2011      	movs	r0, #17
 8002358:	f000 f85a 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x07);
 800235c:	2007      	movs	r0, #7
 800235e:	f000 f857 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x31);
 8002362:	2031      	movs	r0, #49	; 0x31
 8002364:	f000 f854 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x33);
 8002368:	2033      	movs	r0, #51	; 0x33
 800236a:	f000 f851 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x42);
 800236e:	2042      	movs	r0, #66	; 0x42
 8002370:	f000 f84e 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x05);
 8002374:	2005      	movs	r0, #5
 8002376:	f000 f84b 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x0C);
 800237a:	200c      	movs	r0, #12
 800237c:	f000 f848 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x0A);
 8002380:	200a      	movs	r0, #10
 8002382:	f000 f845 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x28);
 8002386:	2028      	movs	r0, #40	; 0x28
 8002388:	f000 f842 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x2F);
 800238c:	202f      	movs	r0, #47	; 0x2f
 800238e:	f000 f83f 	bl	8002410 <LCD_WriteData>
	LCD_WriteData(0x0F);
 8002392:	200f      	movs	r0, #15
 8002394:	f000 f83c 	bl	8002410 <LCD_WriteData>

	// LCD_SLEEP_OUT
	LCD_WriteCommand(LCD_SLEEP_OUT);
 8002398:	2011      	movs	r0, #17
 800239a:	f000 f80b 	bl	80023b4 <LCD_WriteCommand>
	HAL_Delay(200);
 800239e:	20c8      	movs	r0, #200	; 0xc8
 80023a0:	f001 f8c0 	bl	8003524 <HAL_Delay>

	// LCD_DISP_ON
	LCD_WriteCommand(LCD_DISPLAY_ON);
 80023a4:	2029      	movs	r0, #41	; 0x29
 80023a6:	f000 f805 	bl	80023b4 <LCD_WriteCommand>

	// LCD_WRITE_RAM
	LCD_WriteCommand(LCD_GRAM);
 80023aa:	202c      	movs	r0, #44	; 0x2c
 80023ac:	f000 f802 	bl	80023b4 <LCD_WriteCommand>
}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <LCD_WriteCommand>:

void LCD_ModeSelect(DcMode mode){
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, mode);
}

void LCD_WriteCommand(uint8_t data) {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_RESET);
 80023be:	2200      	movs	r2, #0
 80023c0:	2104      	movs	r1, #4
 80023c2:	4810      	ldr	r0, [pc, #64]	; (8002404 <LCD_WriteCommand+0x50>)
 80023c4:	f001 fb90 	bl	8003ae8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, GPIO_PIN_RESET);
 80023c8:	2200      	movs	r2, #0
 80023ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023ce:	480e      	ldr	r0, [pc, #56]	; (8002408 <LCD_WriteCommand+0x54>)
 80023d0:	f001 fb8a 	bl	8003ae8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &data, 1, 1);
 80023d4:	1df9      	adds	r1, r7, #7
 80023d6:	2301      	movs	r3, #1
 80023d8:	2201      	movs	r2, #1
 80023da:	480c      	ldr	r0, [pc, #48]	; (800240c <LCD_WriteCommand+0x58>)
 80023dc:	f002 fe36 	bl	800504c <HAL_SPI_Transmit>
	while(!((hspi5.Instance->SR) & SPI_SR_TXE));
 80023e0:	bf00      	nop
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <LCD_WriteCommand+0x58>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f8      	beq.n	80023e2 <LCD_WriteCommand+0x2e>
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
 80023f0:	2201      	movs	r2, #1
 80023f2:	2104      	movs	r1, #4
 80023f4:	4803      	ldr	r0, [pc, #12]	; (8002404 <LCD_WriteCommand+0x50>)
 80023f6:	f001 fb77 	bl	8003ae8 <HAL_GPIO_WritePin>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40020800 	.word	0x40020800
 8002408:	40020c00 	.word	0x40020c00
 800240c:	20012cd8 	.word	0x20012cd8

08002410 <LCD_WriteData>:

void LCD_WriteData(uint8_t data) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_RESET);
 800241a:	2200      	movs	r2, #0
 800241c:	2104      	movs	r1, #4
 800241e:	4810      	ldr	r0, [pc, #64]	; (8002460 <LCD_WriteData+0x50>)
 8002420:	f001 fb62 	bl	8003ae8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, GPIO_PIN_SET);
 8002424:	2201      	movs	r2, #1
 8002426:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800242a:	480e      	ldr	r0, [pc, #56]	; (8002464 <LCD_WriteData+0x54>)
 800242c:	f001 fb5c 	bl	8003ae8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &data, 1, 10);
 8002430:	1df9      	adds	r1, r7, #7
 8002432:	230a      	movs	r3, #10
 8002434:	2201      	movs	r2, #1
 8002436:	480c      	ldr	r0, [pc, #48]	; (8002468 <LCD_WriteData+0x58>)
 8002438:	f002 fe08 	bl	800504c <HAL_SPI_Transmit>
	while(!((hspi5.Instance->SR) & SPI_SR_TXE));
 800243c:	bf00      	nop
 800243e:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <LCD_WriteData+0x58>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f8      	beq.n	800243e <LCD_WriteData+0x2e>
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
 800244c:	2201      	movs	r2, #1
 800244e:	2104      	movs	r1, #4
 8002450:	4803      	ldr	r0, [pc, #12]	; (8002460 <LCD_WriteData+0x50>)
 8002452:	f001 fb49 	bl	8003ae8 <HAL_GPIO_WritePin>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40020800 	.word	0x40020800
 8002464:	40020c00 	.word	0x40020c00
 8002468:	20012cd8 	.word	0x20012cd8

0800246c <LCD_WriteGRAM>:
	HAL_SPI_Transmit(&hspi5, data, 2, 10);
	while(!((hspi5.Instance->SR) & SPI_SR_TXE));
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
}

void LCD_WriteGRAM(uint8_t data, uint32_t addr) {
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	6039      	str	r1, [r7, #0]
 8002476:	71fb      	strb	r3, [r7, #7]
	if (addr >= LCD_WIDTH * LCD_HEIGHT)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 800247e:	d205      	bcs.n	800248c <LCD_WriteGRAM+0x20>
		return;
	GRAM[addr] = data;
 8002480:	4a05      	ldr	r2, [pc, #20]	; (8002498 <LCD_WriteGRAM+0x2c>)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	4413      	add	r3, r2
 8002486:	79fa      	ldrb	r2, [r7, #7]
 8002488:	701a      	strb	r2, [r3, #0]
 800248a:	e000      	b.n	800248e <LCD_WriteGRAM+0x22>
		return;
 800248c:	bf00      	nop
}
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	20000004 	.word	0x20000004

0800249c <LCD_ClearScreenLtdc>:

void LCD_ClearScreenLtdc(uint8_t c) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
	memset(GRAM, c, LCD_WIDTH * LCD_HEIGHT);
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 80024ac:	4619      	mov	r1, r3
 80024ae:	4803      	ldr	r0, [pc, #12]	; (80024bc <LCD_ClearScreenLtdc+0x20>)
 80024b0:	f002 ffce 	bl	8005450 <memset>
}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000004 	.word	0x20000004

080024c0 <LCD_ClearChar>:

void LCD_ClearChar(uint16_t x0, uint16_t y0) {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b088      	sub	sp, #32
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	460a      	mov	r2, r1
 80024ca:	80fb      	strh	r3, [r7, #6]
 80024cc:	4613      	mov	r3, r2
 80024ce:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80024d0:	230f      	movs	r3, #15
 80024d2:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80024d4:	2300      	movs	r3, #0
 80024d6:	61fb      	str	r3, [r7, #28]
 80024d8:	e020      	b.n	800251c <LCD_ClearChar+0x5c>
		for(int dx = 0; dx <=width; dx++){
 80024da:	2300      	movs	r3, #0
 80024dc:	61bb      	str	r3, [r7, #24]
 80024de:	e016      	b.n	800250e <LCD_ClearChar+0x4e>
			int y = y0 + dy;
 80024e0:	88bb      	ldrh	r3, [r7, #4]
 80024e2:	69fa      	ldr	r2, [r7, #28]
 80024e4:	4413      	add	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
			int x = x0 + dx;
 80024e8:	88fb      	ldrh	r3, [r7, #6]
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4413      	add	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]
			LCD_WriteGRAM(0x05, y * LCD_WIDTH + x);
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4613      	mov	r3, r2
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	1a9b      	subs	r3, r3, r2
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	461a      	mov	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4413      	add	r3, r2
 8002500:	4619      	mov	r1, r3
 8002502:	2005      	movs	r0, #5
 8002504:	f7ff ffb2 	bl	800246c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	3301      	adds	r3, #1
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	7dfb      	ldrb	r3, [r7, #23]
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	429a      	cmp	r2, r3
 8002514:	dde4      	ble.n	80024e0 <LCD_ClearChar+0x20>
	for(int dy = 0; dy <= width; dy++){
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3301      	adds	r3, #1
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	7dfb      	ldrb	r3, [r7, #23]
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	429a      	cmp	r2, r3
 8002522:	ddda      	ble.n	80024da <LCD_ClearChar+0x1a>
		}
	}
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3720      	adds	r7, #32
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;


void MX_LTDC_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08e      	sub	sp, #56	; 0x38
 8002534:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002536:	1d3b      	adds	r3, r7, #4
 8002538:	2234      	movs	r2, #52	; 0x34
 800253a:	2100      	movs	r1, #0
 800253c:	4618      	mov	r0, r3
 800253e:	f002 ff87 	bl	8005450 <memset>

  hltdc.Instance = LTDC;
 8002542:	4b39      	ldr	r3, [pc, #228]	; (8002628 <MX_LTDC_Init+0xf8>)
 8002544:	4a39      	ldr	r2, [pc, #228]	; (800262c <MX_LTDC_Init+0xfc>)
 8002546:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002548:	4b37      	ldr	r3, [pc, #220]	; (8002628 <MX_LTDC_Init+0xf8>)
 800254a:	2200      	movs	r2, #0
 800254c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800254e:	4b36      	ldr	r3, [pc, #216]	; (8002628 <MX_LTDC_Init+0xf8>)
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002554:	4b34      	ldr	r3, [pc, #208]	; (8002628 <MX_LTDC_Init+0xf8>)
 8002556:	2200      	movs	r2, #0
 8002558:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800255a:	4b33      	ldr	r3, [pc, #204]	; (8002628 <MX_LTDC_Init+0xf8>)
 800255c:	2200      	movs	r2, #0
 800255e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8002560:	4b31      	ldr	r3, [pc, #196]	; (8002628 <MX_LTDC_Init+0xf8>)
 8002562:	2209      	movs	r2, #9
 8002564:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8002566:	4b30      	ldr	r3, [pc, #192]	; (8002628 <MX_LTDC_Init+0xf8>)
 8002568:	2201      	movs	r2, #1
 800256a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800256c:	4b2e      	ldr	r3, [pc, #184]	; (8002628 <MX_LTDC_Init+0xf8>)
 800256e:	221d      	movs	r2, #29
 8002570:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8002572:	4b2d      	ldr	r3, [pc, #180]	; (8002628 <MX_LTDC_Init+0xf8>)
 8002574:	2203      	movs	r2, #3
 8002576:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8002578:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <MX_LTDC_Init+0xf8>)
 800257a:	f240 120d 	movw	r2, #269	; 0x10d
 800257e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8002580:	4b29      	ldr	r3, [pc, #164]	; (8002628 <MX_LTDC_Init+0xf8>)
 8002582:	f240 1243 	movw	r2, #323	; 0x143
 8002586:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8002588:	4b27      	ldr	r3, [pc, #156]	; (8002628 <MX_LTDC_Init+0xf8>)
 800258a:	f240 1217 	movw	r2, #279	; 0x117
 800258e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8002590:	4b25      	ldr	r3, [pc, #148]	; (8002628 <MX_LTDC_Init+0xf8>)
 8002592:	f240 1247 	movw	r2, #327	; 0x147
 8002596:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002598:	4b23      	ldr	r3, [pc, #140]	; (8002628 <MX_LTDC_Init+0xf8>)
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80025a0:	4b21      	ldr	r3, [pc, #132]	; (8002628 <MX_LTDC_Init+0xf8>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80025a8:	4b1f      	ldr	r3, [pc, #124]	; (8002628 <MX_LTDC_Init+0xf8>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80025b0:	481d      	ldr	r0, [pc, #116]	; (8002628 <MX_LTDC_Init+0xf8>)
 80025b2:	f001 fad7 	bl	8003b64 <HAL_LTDC_Init>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80025bc:	f000 fa80 	bl	8002ac0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 239;
 80025c4:	23ef      	movs	r3, #239	; 0xef
 80025c6:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 319;
 80025cc:	f240 133f 	movw	r3, #319	; 0x13f
 80025d0:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_L8;
 80025d2:	2305      	movs	r3, #5
 80025d4:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0xff;
 80025d6:	23ff      	movs	r3, #255	; 0xff
 80025d8:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0x00;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80025de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025e2:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80025e4:	2307      	movs	r3, #7
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80025ec:	23f0      	movs	r3, #240	; 0xf0
 80025ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80025f0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80025f4:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002608:	1d3b      	adds	r3, r7, #4
 800260a:	2200      	movs	r2, #0
 800260c:	4619      	mov	r1, r3
 800260e:	4806      	ldr	r0, [pc, #24]	; (8002628 <MX_LTDC_Init+0xf8>)
 8002610:	f001 fb7c 	bl	8003d0c <HAL_LTDC_ConfigLayer>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 800261a:	f000 fa51 	bl	8002ac0 <Error_Handler>
  }

}
 800261e:	bf00      	nop
 8002620:	3738      	adds	r7, #56	; 0x38
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20012c30 	.word	0x20012c30
 800262c:	40016800 	.word	0x40016800

08002630 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b090      	sub	sp, #64	; 0x40
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a75      	ldr	r2, [pc, #468]	; (8002824 <HAL_LTDC_MspInit+0x1f4>)
 800264e:	4293      	cmp	r3, r2
 8002650:	f040 80e4 	bne.w	800281c <HAL_LTDC_MspInit+0x1ec>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002654:	2300      	movs	r3, #0
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28
 8002658:	4b73      	ldr	r3, [pc, #460]	; (8002828 <HAL_LTDC_MspInit+0x1f8>)
 800265a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265c:	4a72      	ldr	r2, [pc, #456]	; (8002828 <HAL_LTDC_MspInit+0x1f8>)
 800265e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002662:	6453      	str	r3, [r2, #68]	; 0x44
 8002664:	4b70      	ldr	r3, [pc, #448]	; (8002828 <HAL_LTDC_MspInit+0x1f8>)
 8002666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002668:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800266c:	62bb      	str	r3, [r7, #40]	; 0x28
 800266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002670:	2300      	movs	r3, #0
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
 8002674:	4b6c      	ldr	r3, [pc, #432]	; (8002828 <HAL_LTDC_MspInit+0x1f8>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	4a6b      	ldr	r2, [pc, #428]	; (8002828 <HAL_LTDC_MspInit+0x1f8>)
 800267a:	f043 0320 	orr.w	r3, r3, #32
 800267e:	6313      	str	r3, [r2, #48]	; 0x30
 8002680:	4b69      	ldr	r3, [pc, #420]	; (8002828 <HAL_LTDC_MspInit+0x1f8>)
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268c:	2300      	movs	r3, #0
 800268e:	623b      	str	r3, [r7, #32]
 8002690:	4b65      	ldr	r3, [pc, #404]	; (8002828 <HAL_LTDC_MspInit+0x1f8>)
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	4a64      	ldr	r2, [pc, #400]	; (8002828 <HAL_LTDC_MspInit+0x1f8>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6313      	str	r3, [r2, #48]	; 0x30
 800269c:	4b62      	ldr	r3, [pc, #392]	; (8002828 <HAL_LTDC_MspInit+0x1f8>)
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	623b      	str	r3, [r7, #32]
 80026a6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
 80026ac:	4b5e      	ldr	r3, [pc, #376]	; (8002828 <HAL_LTDC_MspInit+0x1f8>)
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	4a5d      	ldr	r2, [pc, #372]	; (8002828 <HAL_LTDC_MspInit+0x1f8>)
 80026b2:	f043 0302 	orr.w	r3, r3, #2
 80026b6:	6313      	str	r3, [r2, #48]	; 0x30
 80026b8:	4b5b      	ldr	r3, [pc, #364]	; (8002828 <HAL_LTDC_MspInit+0x1f8>)
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026c4:	2300      	movs	r3, #0
 80026c6:	61bb      	str	r3, [r7, #24]
 80026c8:	4b57      	ldr	r3, [pc, #348]	; (8002828 <HAL_LTDC_MspInit+0x1f8>)
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	4a56      	ldr	r2, [pc, #344]	; (8002828 <HAL_LTDC_MspInit+0x1f8>)
 80026ce:	f043 0310 	orr.w	r3, r3, #16
 80026d2:	6313      	str	r3, [r2, #48]	; 0x30
 80026d4:	4b54      	ldr	r3, [pc, #336]	; (8002828 <HAL_LTDC_MspInit+0x1f8>)
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	4b50      	ldr	r3, [pc, #320]	; (8002828 <HAL_LTDC_MspInit+0x1f8>)
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	4a4f      	ldr	r2, [pc, #316]	; (8002828 <HAL_LTDC_MspInit+0x1f8>)
 80026ea:	f043 0308 	orr.w	r3, r3, #8
 80026ee:	6313      	str	r3, [r2, #48]	; 0x30
 80026f0:	4b4d      	ldr	r3, [pc, #308]	; (8002828 <HAL_LTDC_MspInit+0x1f8>)
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fc:	2300      	movs	r3, #0
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	4b49      	ldr	r3, [pc, #292]	; (8002828 <HAL_LTDC_MspInit+0x1f8>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	4a48      	ldr	r2, [pc, #288]	; (8002828 <HAL_LTDC_MspInit+0x1f8>)
 8002706:	f043 0304 	orr.w	r3, r3, #4
 800270a:	6313      	str	r3, [r2, #48]	; 0x30
 800270c:	4b46      	ldr	r3, [pc, #280]	; (8002828 <HAL_LTDC_MspInit+0x1f8>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002718:	2300      	movs	r3, #0
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	4b42      	ldr	r3, [pc, #264]	; (8002828 <HAL_LTDC_MspInit+0x1f8>)
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	4a41      	ldr	r2, [pc, #260]	; (8002828 <HAL_LTDC_MspInit+0x1f8>)
 8002722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002726:	6313      	str	r3, [r2, #48]	; 0x30
 8002728:	4b3f      	ldr	r3, [pc, #252]	; (8002828 <HAL_LTDC_MspInit+0x1f8>)
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> LTDC_G7
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002738:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273a:	2302      	movs	r3, #2
 800273c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002742:	2300      	movs	r3, #0
 8002744:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002746:	230e      	movs	r3, #14
 8002748:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800274a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800274e:	4619      	mov	r1, r3
 8002750:	4836      	ldr	r0, [pc, #216]	; (800282c <HAL_LTDC_MspInit+0x1fc>)
 8002752:	f001 f81d 	bl	8003790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 8002756:	f641 0358 	movw	r3, #6232	; 0x1858
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275c:	2302      	movs	r3, #2
 800275e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002764:	2300      	movs	r3, #0
 8002766:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002768:	230e      	movs	r3, #14
 800276a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002770:	4619      	mov	r1, r3
 8002772:	482f      	ldr	r0, [pc, #188]	; (8002830 <HAL_LTDC_MspInit+0x200>)
 8002774:	f001 f80c 	bl	8003790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002778:	2303      	movs	r3, #3
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277c:	2302      	movs	r3, #2
 800277e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002784:	2300      	movs	r3, #0
 8002786:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002788:	2309      	movs	r3, #9
 800278a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002790:	4619      	mov	r1, r3
 8002792:	4828      	ldr	r0, [pc, #160]	; (8002834 <HAL_LTDC_MspInit+0x204>)
 8002794:	f000 fffc 	bl	8003790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_11;
 8002798:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279e:	2302      	movs	r3, #2
 80027a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a6:	2300      	movs	r3, #0
 80027a8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027aa:	230e      	movs	r3, #14
 80027ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027b2:	4619      	mov	r1, r3
 80027b4:	4820      	ldr	r0, [pc, #128]	; (8002838 <HAL_LTDC_MspInit+0x208>)
 80027b6:	f000 ffeb 	bl	8003790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 80027ba:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c0:	2302      	movs	r3, #2
 80027c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c8:	2300      	movs	r3, #0
 80027ca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027cc:	230e      	movs	r3, #14
 80027ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027d4:	4619      	mov	r1, r3
 80027d6:	4817      	ldr	r0, [pc, #92]	; (8002834 <HAL_LTDC_MspInit+0x204>)
 80027d8:	f000 ffda 	bl	8003790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027dc:	2308      	movs	r3, #8
 80027de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e0:	2302      	movs	r3, #2
 80027e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e8:	2300      	movs	r3, #0
 80027ea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027ec:	230e      	movs	r3, #14
 80027ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027f4:	4619      	mov	r1, r3
 80027f6:	4811      	ldr	r0, [pc, #68]	; (800283c <HAL_LTDC_MspInit+0x20c>)
 80027f8:	f000 ffca 	bl	8003790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027fc:	23c0      	movs	r3, #192	; 0xc0
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002800:	2302      	movs	r3, #2
 8002802:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	2300      	movs	r3, #0
 8002806:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002808:	2300      	movs	r3, #0
 800280a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800280c:	230e      	movs	r3, #14
 800280e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002810:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002814:	4619      	mov	r1, r3
 8002816:	480a      	ldr	r0, [pc, #40]	; (8002840 <HAL_LTDC_MspInit+0x210>)
 8002818:	f000 ffba 	bl	8003790 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800281c:	bf00      	nop
 800281e:	3740      	adds	r7, #64	; 0x40
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40016800 	.word	0x40016800
 8002828:	40023800 	.word	0x40023800
 800282c:	40021400 	.word	0x40021400
 8002830:	40020000 	.word	0x40020000
 8002834:	40020400 	.word	0x40020400
 8002838:	40021800 	.word	0x40021800
 800283c:	40020c00 	.word	0x40020c00
 8002840:	40020800 	.word	0x40020800

08002844 <main>:

extern uint8_t *GRAM;


int main(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
  HAL_Init();
 800284a:	f000 fdf9 	bl	8003440 <HAL_Init>
  SystemClock_Config();
 800284e:	f000 f84b 	bl	80028e8 <SystemClock_Config>
  MX_GPIO_Init();
 8002852:	f000 f8d5 	bl	8002a00 <MX_GPIO_Init>
  LCD_GpioInit();
 8002856:	f7ff faf1 	bl	8001e3c <LCD_GpioInit>
  LCD_LtdcInit();
 800285a:	f7ff fb3d 	bl	8001ed8 <LCD_LtdcInit>
  LCD_DispInit_Spi();
 800285e:	f7ff fb5d 	bl	8001f1c <LCD_DispInit_Spi>
  LCD_DispInit_Ltdc();
 8002862:	f7ff fc5f 	bl	8002124 <LCD_DispInit_Ltdc>
  initializeGPIONVIC();
 8002866:	f000 f931 	bl	8002acc <initializeGPIONVIC>

  InitialScreen();
 800286a:	f000 fc0d 	bl	8003088 <InitialScreen>
  MenuScreen();
 800286e:	f000 fc29 	bl	80030c4 <MenuScreen>


  while (1)
  {
	  for (int k = 0; k < 12; k++){
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	e030      	b.n	80028da <main+0x96>
	  		  for (int i = 0; i < 60; i++){
 8002878:	2300      	movs	r3, #0
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	e027      	b.n	80028ce <main+0x8a>
	  			  char * hours[2];
	  			  itoa(k, hours, 10);
 800287e:	f107 0308 	add.w	r3, r7, #8
 8002882:	220a      	movs	r2, #10
 8002884:	4619      	mov	r1, r3
 8002886:	6978      	ldr	r0, [r7, #20]
 8002888:	f002 fde0 	bl	800544c <itoa>
	  	  	  	  char minutes[2];
	  		  	  itoa(i, minutes, 10);
 800288c:	1d3b      	adds	r3, r7, #4
 800288e:	220a      	movs	r2, #10
 8002890:	4619      	mov	r1, r3
 8002892:	6938      	ldr	r0, [r7, #16]
 8002894:	f002 fdda 	bl	800544c <itoa>
	  		  	  type(hours, 0, 0);
 8002898:	f107 0308 	add.w	r3, r7, #8
 800289c:	2200      	movs	r2, #0
 800289e:	2100      	movs	r1, #0
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 fbad 	bl	8003000 <type>
	  		  	  type(":", 36, 0);
 80028a6:	2200      	movs	r2, #0
 80028a8:	2124      	movs	r1, #36	; 0x24
 80028aa:	480e      	ldr	r0, [pc, #56]	; (80028e4 <main+0xa0>)
 80028ac:	f000 fba8 	bl	8003000 <type>
	  		  	  type(minutes, 54, 0);
 80028b0:	1d3b      	adds	r3, r7, #4
 80028b2:	2200      	movs	r2, #0
 80028b4:	2136      	movs	r1, #54	; 0x36
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 fba2 	bl	8003000 <type>
	  		  	  HAL_Delay(1000);
 80028bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028c0:	f000 fe30 	bl	8003524 <HAL_Delay>
	  		  	  LCD_ClearTime();
 80028c4:	f7ff faa2 	bl	8001e0c <LCD_ClearTime>
	  		  for (int i = 0; i < 60; i++){
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	3301      	adds	r3, #1
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	2b3b      	cmp	r3, #59	; 0x3b
 80028d2:	ddd4      	ble.n	800287e <main+0x3a>
	  for (int k = 0; k < 12; k++){
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	3301      	adds	r3, #1
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2b0b      	cmp	r3, #11
 80028de:	ddcb      	ble.n	8002878 <main+0x34>
 80028e0:	e7c7      	b.n	8002872 <main+0x2e>
 80028e2:	bf00      	nop
 80028e4:	080054fc 	.word	0x080054fc

080028e8 <SystemClock_Config>:
  }
}


void SystemClock_Config(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b0a0      	sub	sp, #128	; 0x80
 80028ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028f2:	2230      	movs	r2, #48	; 0x30
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f002 fdaa 	bl	8005450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800290c:	f107 030c 	add.w	r3, r7, #12
 8002910:	2230      	movs	r2, #48	; 0x30
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f002 fd9b 	bl	8005450 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	4b36      	ldr	r3, [pc, #216]	; (80029f8 <SystemClock_Config+0x110>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	4a35      	ldr	r2, [pc, #212]	; (80029f8 <SystemClock_Config+0x110>)
 8002924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002928:	6413      	str	r3, [r2, #64]	; 0x40
 800292a:	4b33      	ldr	r3, [pc, #204]	; (80029f8 <SystemClock_Config+0x110>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002936:	2300      	movs	r3, #0
 8002938:	607b      	str	r3, [r7, #4]
 800293a:	4b30      	ldr	r3, [pc, #192]	; (80029fc <SystemClock_Config+0x114>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002942:	4a2e      	ldr	r2, [pc, #184]	; (80029fc <SystemClock_Config+0x114>)
 8002944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	4b2c      	ldr	r3, [pc, #176]	; (80029fc <SystemClock_Config+0x114>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002952:	607b      	str	r3, [r7, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002956:	2302      	movs	r3, #2
 8002958:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800295a:	2301      	movs	r3, #1
 800295c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800295e:	2310      	movs	r3, #16
 8002960:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002962:	2302      	movs	r3, #2
 8002964:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002966:	2300      	movs	r3, #0
 8002968:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800296a:	2308      	movs	r3, #8
 800296c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 800296e:	23b4      	movs	r3, #180	; 0xb4
 8002970:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002972:	2302      	movs	r3, #2
 8002974:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002976:	2304      	movs	r3, #4
 8002978:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800297a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800297e:	4618      	mov	r0, r3
 8002980:	f001 fd02 	bl	8004388 <HAL_RCC_OscConfig>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800298a:	f000 f899 	bl	8002ac0 <Error_Handler>
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800298e:	f001 fcab 	bl	80042e8 <HAL_PWREx_EnableOverDrive>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002998:	f000 f892 	bl	8002ac0 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800299c:	230f      	movs	r3, #15
 800299e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029a0:	2302      	movs	r3, #2
 80029a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029b2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029b8:	2102      	movs	r1, #2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f001 ff5c 	bl	8004878 <HAL_RCC_ClockConfig>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80029c6:	f000 f87b 	bl	8002ac0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80029ca:	2308      	movs	r3, #8
 80029cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 56;
 80029ce:	2338      	movs	r3, #56	; 0x38
 80029d0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80029d2:	2307      	movs	r3, #7
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80029d6:	2300      	movs	r3, #0
 80029d8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029da:	f107 030c 	add.w	r3, r7, #12
 80029de:	4618      	mov	r0, r3
 80029e0:	f002 f912 	bl	8004c08 <HAL_RCCEx_PeriphCLKConfig>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <SystemClock_Config+0x106>
  {
    Error_Handler();
 80029ea:	f000 f869 	bl	8002ac0 <Error_Handler>
  }
}
 80029ee:	bf00      	nop
 80029f0:	3780      	adds	r7, #128	; 0x80
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40007000 	.word	0x40007000

08002a00 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]
 8002a0a:	4b2c      	ldr	r3, [pc, #176]	; (8002abc <MX_GPIO_Init+0xbc>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	4a2b      	ldr	r2, [pc, #172]	; (8002abc <MX_GPIO_Init+0xbc>)
 8002a10:	f043 0320 	orr.w	r3, r3, #32
 8002a14:	6313      	str	r3, [r2, #48]	; 0x30
 8002a16:	4b29      	ldr	r3, [pc, #164]	; (8002abc <MX_GPIO_Init+0xbc>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	4b25      	ldr	r3, [pc, #148]	; (8002abc <MX_GPIO_Init+0xbc>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	4a24      	ldr	r2, [pc, #144]	; (8002abc <MX_GPIO_Init+0xbc>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6313      	str	r3, [r2, #48]	; 0x30
 8002a32:	4b22      	ldr	r3, [pc, #136]	; (8002abc <MX_GPIO_Init+0xbc>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	4b1e      	ldr	r3, [pc, #120]	; (8002abc <MX_GPIO_Init+0xbc>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	4a1d      	ldr	r2, [pc, #116]	; (8002abc <MX_GPIO_Init+0xbc>)
 8002a48:	f043 0302 	orr.w	r3, r3, #2
 8002a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4e:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <MX_GPIO_Init+0xbc>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	4b17      	ldr	r3, [pc, #92]	; (8002abc <MX_GPIO_Init+0xbc>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	4a16      	ldr	r2, [pc, #88]	; (8002abc <MX_GPIO_Init+0xbc>)
 8002a64:	f043 0310 	orr.w	r3, r3, #16
 8002a68:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6a:	4b14      	ldr	r3, [pc, #80]	; (8002abc <MX_GPIO_Init+0xbc>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	607b      	str	r3, [r7, #4]
 8002a7a:	4b10      	ldr	r3, [pc, #64]	; (8002abc <MX_GPIO_Init+0xbc>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4a0f      	ldr	r2, [pc, #60]	; (8002abc <MX_GPIO_Init+0xbc>)
 8002a80:	f043 0308 	orr.w	r3, r3, #8
 8002a84:	6313      	str	r3, [r2, #48]	; 0x30
 8002a86:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <MX_GPIO_Init+0xbc>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	607b      	str	r3, [r7, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	603b      	str	r3, [r7, #0]
 8002a96:	4b09      	ldr	r3, [pc, #36]	; (8002abc <MX_GPIO_Init+0xbc>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	4a08      	ldr	r2, [pc, #32]	; (8002abc <MX_GPIO_Init+0xbc>)
 8002a9c:	f043 0304 	orr.w	r3, r3, #4
 8002aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa2:	4b06      	ldr	r3, [pc, #24]	; (8002abc <MX_GPIO_Init+0xbc>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	683b      	ldr	r3, [r7, #0]

}
 8002aae:	bf00      	nop
 8002ab0:	371c      	adds	r7, #28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800

08002ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ac4:	b672      	cpsid	i
}
 8002ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ac8:	e7fe      	b.n	8002ac8 <Error_Handler+0x8>
	...

08002acc <initializeGPIONVIC>:
}
#endif /* USE_FULL_ASSERT */

// initialize GPIO, NVIC
void initializeGPIONVIC(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
	/*Configure GPIO pin: PA0 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad2:	1d3b      	adds	r3, r7, #4
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	605a      	str	r2, [r3, #4]
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	60da      	str	r2, [r3, #12]
 8002ade:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ae4:	4b30      	ldr	r3, [pc, #192]	; (8002ba8 <initializeGPIONVIC+0xdc>)
 8002ae6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aec:	1d3b      	adds	r3, r7, #4
 8002aee:	4619      	mov	r1, r3
 8002af0:	482e      	ldr	r0, [pc, #184]	; (8002bac <initializeGPIONVIC+0xe0>)
 8002af2:	f000 fe4d 	bl	8003790 <HAL_GPIO_Init>
	/*EXTI interrupt init */
	HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2103      	movs	r1, #3
 8002afa:	2006      	movs	r0, #6
 8002afc:	f000 fe11 	bl	8003722 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002b00:	2006      	movs	r0, #6
 8002b02:	f000 fe2a 	bl	800375a <HAL_NVIC_EnableIRQ>

	/*Configure GPIO pin: PE1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002b06:	2302      	movs	r3, #2
 8002b08:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b0a:	4b27      	ldr	r3, [pc, #156]	; (8002ba8 <initializeGPIONVIC+0xdc>)
 8002b0c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b12:	1d3b      	adds	r3, r7, #4
 8002b14:	4619      	mov	r1, r3
 8002b16:	4826      	ldr	r0, [pc, #152]	; (8002bb0 <initializeGPIONVIC+0xe4>)
 8002b18:	f000 fe3a 	bl	8003790 <HAL_GPIO_Init>
	/*EXTI interrupt init */
	HAL_NVIC_SetPriority(EXTI1_IRQn, 3, 0);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2103      	movs	r1, #3
 8002b20:	2007      	movs	r0, #7
 8002b22:	f000 fdfe 	bl	8003722 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002b26:	2007      	movs	r0, #7
 8002b28:	f000 fe17 	bl	800375a <HAL_NVIC_EnableIRQ>

	/*Configure GPIO pin: PE2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b2c:	2304      	movs	r3, #4
 8002b2e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b30:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <initializeGPIONVIC+0xdc>)
 8002b32:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b38:	1d3b      	adds	r3, r7, #4
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	481c      	ldr	r0, [pc, #112]	; (8002bb0 <initializeGPIONVIC+0xe4>)
 8002b3e:	f000 fe27 	bl	8003790 <HAL_GPIO_Init>
	/*EXTI interrupt init */
	HAL_NVIC_SetPriority(EXTI2_IRQn, 3, 0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	2103      	movs	r1, #3
 8002b46:	2008      	movs	r0, #8
 8002b48:	f000 fdeb 	bl	8003722 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002b4c:	2008      	movs	r0, #8
 8002b4e:	f000 fe04 	bl	800375a <HAL_NVIC_EnableIRQ>

	/*Configure GPIO pin: PE3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b52:	2308      	movs	r3, #8
 8002b54:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b56:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <initializeGPIONVIC+0xdc>)
 8002b58:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b5e:	1d3b      	adds	r3, r7, #4
 8002b60:	4619      	mov	r1, r3
 8002b62:	4813      	ldr	r0, [pc, #76]	; (8002bb0 <initializeGPIONVIC+0xe4>)
 8002b64:	f000 fe14 	bl	8003790 <HAL_GPIO_Init>
	/*EXTI interrupt init */
	HAL_NVIC_SetPriority(EXTI3_IRQn, 3, 0);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2103      	movs	r1, #3
 8002b6c:	2009      	movs	r0, #9
 8002b6e:	f000 fdd8 	bl	8003722 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002b72:	2009      	movs	r0, #9
 8002b74:	f000 fdf1 	bl	800375a <HAL_NVIC_EnableIRQ>

	/*Configure GPIO pin: PE4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b78:	2310      	movs	r3, #16
 8002b7a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <initializeGPIONVIC+0xdc>)
 8002b7e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b84:	1d3b      	adds	r3, r7, #4
 8002b86:	4619      	mov	r1, r3
 8002b88:	4809      	ldr	r0, [pc, #36]	; (8002bb0 <initializeGPIONVIC+0xe4>)
 8002b8a:	f000 fe01 	bl	8003790 <HAL_GPIO_Init>
	/*EXTI interrupt init */
	HAL_NVIC_SetPriority(EXTI4_IRQn, 3, 0);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2103      	movs	r1, #3
 8002b92:	200a      	movs	r0, #10
 8002b94:	f000 fdc5 	bl	8003722 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002b98:	200a      	movs	r0, #10
 8002b9a:	f000 fdde 	bl	800375a <HAL_NVIC_EnableIRQ>
}
 8002b9e:	bf00      	nop
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	10110000 	.word	0x10110000
 8002bac:	40020000 	.word	0x40020000
 8002bb0:	40021000 	.word	0x40021000

08002bb4 <EXTI0_IRQHandler>:


// EXIT0 handler
void EXTI0_IRQHandler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
	if (view_index == 0)
 8002bb8:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <EXTI0_IRQHandler+0x5c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d102      	bne.n	8002bc6 <EXTI0_IRQHandler+0x12>
	{
		BluetoothScreen();
 8002bc0:	f000 fa96 	bl	80030f0 <BluetoothScreen>
 8002bc4:	e013      	b.n	8002bee <EXTI0_IRQHandler+0x3a>
	}
	else if (view_index == 1)
 8002bc6:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <EXTI0_IRQHandler+0x5c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d102      	bne.n	8002bd4 <EXTI0_IRQHandler+0x20>
	{
		ScheduleScreen();
 8002bce:	f000 fab3 	bl	8003138 <ScheduleScreen>
 8002bd2:	e00c      	b.n	8002bee <EXTI0_IRQHandler+0x3a>
	}
	else if (view_index == 2)
 8002bd4:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <EXTI0_IRQHandler+0x5c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d102      	bne.n	8002be2 <EXTI0_IRQHandler+0x2e>
	{
		DispensedScreen();
 8002bdc:	f000 faec 	bl	80031b8 <DispensedScreen>
 8002be0:	e005      	b.n	8002bee <EXTI0_IRQHandler+0x3a>
	}
	else if (view_index == 3)
 8002be2:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <EXTI0_IRQHandler+0x5c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	d101      	bne.n	8002bee <EXTI0_IRQHandler+0x3a>
	{
		MenuScreen();
 8002bea:	f000 fa6b 	bl	80030c4 <MenuScreen>
	}
	view_index = (view_index + 1) % 4;
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <EXTI0_IRQHandler+0x5c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	425a      	negs	r2, r3
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	f002 0203 	and.w	r2, r2, #3
 8002bfe:	bf58      	it	pl
 8002c00:	4253      	negpl	r3, r2
 8002c02:	4a03      	ldr	r2, [pc, #12]	; (8002c10 <EXTI0_IRQHandler+0x5c>)
 8002c04:	6013      	str	r3, [r2, #0]
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002c06:	2001      	movs	r0, #1
 8002c08:	f000 ff88 	bl	8003b1c <HAL_GPIO_EXTI_IRQHandler>
}
 8002c0c:	bf00      	nop
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20012c2c 	.word	0x20012c2c

08002c14 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
	MenuScreen();
 8002c18:	f000 fa54 	bl	80030c4 <MenuScreen>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002c1c:	2002      	movs	r0, #2
 8002c1e:	f000 ff7d 	bl	8003b1c <HAL_GPIO_EXTI_IRQHandler>
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	af00      	add	r7, sp, #0
	BluetoothScreen();
 8002c2a:	f000 fa61 	bl	80030f0 <BluetoothScreen>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002c2e:	2004      	movs	r0, #4
 8002c30:	f000 ff74 	bl	8003b1c <HAL_GPIO_EXTI_IRQHandler>
}
 8002c34:	bf00      	nop
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
	ScheduleScreen();
 8002c3c:	f000 fa7c 	bl	8003138 <ScheduleScreen>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002c40:	2008      	movs	r0, #8
 8002c42:	f000 ff6b 	bl	8003b1c <HAL_GPIO_EXTI_IRQHandler>
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	af00      	add	r7, sp, #0
	DispensedScreen();
 8002c4e:	f000 fab3 	bl	80031b8 <DispensedScreen>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002c52:	2010      	movs	r0, #16
 8002c54:	f000 ff62 	bl	8003b1c <HAL_GPIO_EXTI_IRQHandler>
}
 8002c58:	bf00      	nop
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <letterselect>:
#include "main.h"
#include "graphic.h"
#include "lcd.h"
#include <string.h>

void letterselect(const char letter, int x, int y){
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
 8002c68:	73fb      	strb	r3, [r7, #15]
	if( letter == 'A' ) {
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	2b41      	cmp	r3, #65	; 0x41
 8002c6e:	d108      	bne.n	8002c82 <letterselect+0x26>
		LCD_A(x, y);
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	b292      	uxth	r2, r2
 8002c78:	4611      	mov	r1, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd fc3a 	bl	80004f4 <LCD_A>
	else if ( letter == ':'){
		LCD_Colon(x, y);
	}
	else if( letter == ' ') {
	}
}
 8002c80:	e1ba      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == 'B' ) {
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	2b42      	cmp	r3, #66	; 0x42
 8002c86:	d108      	bne.n	8002c9a <letterselect+0x3e>
		LCD_B(x, y);
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	b292      	uxth	r2, r2
 8002c90:	4611      	mov	r1, r2
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fd fc78 	bl	8000588 <LCD_B>
}
 8002c98:	e1ae      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == 'C' ) {
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	2b43      	cmp	r3, #67	; 0x43
 8002c9e:	d108      	bne.n	8002cb2 <letterselect+0x56>
		LCD_C(x, y);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	b292      	uxth	r2, r2
 8002ca8:	4611      	mov	r1, r2
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fd fcd0 	bl	8000650 <LCD_C>
}
 8002cb0:	e1a2      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == 'D' ) {
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	2b44      	cmp	r3, #68	; 0x44
 8002cb6:	d108      	bne.n	8002cca <letterselect+0x6e>
		LCD_D(x, y);
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	b292      	uxth	r2, r2
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd fd08 	bl	80006d8 <LCD_D>
}
 8002cc8:	e196      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == 'E' ) {
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	2b45      	cmp	r3, #69	; 0x45
 8002cce:	d108      	bne.n	8002ce2 <letterselect+0x86>
		LCD_E(x, y);
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	b292      	uxth	r2, r2
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd fd4e 	bl	800077c <LCD_E>
}
 8002ce0:	e18a      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == 'F' ) {
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	2b46      	cmp	r3, #70	; 0x46
 8002ce6:	d108      	bne.n	8002cfa <letterselect+0x9e>
		LCD_F(x, y);
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	b292      	uxth	r2, r2
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fd92 	bl	800081c <LCD_F>
}
 8002cf8:	e17e      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == 'G' ) {
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	2b47      	cmp	r3, #71	; 0x47
 8002cfe:	d108      	bne.n	8002d12 <letterselect+0xb6>
		LCD_G(x, y);
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	b292      	uxth	r2, r2
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fd fdd0 	bl	80008b0 <LCD_G>
}
 8002d10:	e172      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == 'H' ) {
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	2b48      	cmp	r3, #72	; 0x48
 8002d16:	d108      	bne.n	8002d2a <letterselect+0xce>
		LCD_H(x, y);
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	b292      	uxth	r2, r2
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fd fe16 	bl	8000954 <LCD_H>
}
 8002d28:	e166      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == 'I' ) {
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	2b49      	cmp	r3, #73	; 0x49
 8002d2e:	d108      	bne.n	8002d42 <letterselect+0xe6>
		LCD_I(x, y);
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	b292      	uxth	r2, r2
 8002d38:	4611      	mov	r1, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fd fe56 	bl	80009ec <LCD_I>
}
 8002d40:	e15a      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == 'J' ) {
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	2b4a      	cmp	r3, #74	; 0x4a
 8002d46:	d108      	bne.n	8002d5a <letterselect+0xfe>
		LCD_J(x, y);
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	b292      	uxth	r2, r2
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fd fe90 	bl	8000a78 <LCD_J>
}
 8002d58:	e14e      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == 'K' ) {
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	2b4b      	cmp	r3, #75	; 0x4b
 8002d5e:	d108      	bne.n	8002d72 <letterselect+0x116>
		LCD_K(x, y);
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	b292      	uxth	r2, r2
 8002d68:	4611      	mov	r1, r2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fd fece 	bl	8000b0c <LCD_K>
}
 8002d70:	e142      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == 'L' ) {
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	2b4c      	cmp	r3, #76	; 0x4c
 8002d76:	d108      	bne.n	8002d8a <letterselect+0x12e>
		LCD_L(x, y);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	b292      	uxth	r2, r2
 8002d80:	4611      	mov	r1, r2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fd ff30 	bl	8000be8 <LCD_L>
}
 8002d88:	e136      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == 'M' ) {
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
 8002d8c:	2b4d      	cmp	r3, #77	; 0x4d
 8002d8e:	d108      	bne.n	8002da2 <letterselect+0x146>
		LCD_M(x, y);
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	b292      	uxth	r2, r2
 8002d98:	4611      	mov	r1, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fd ff64 	bl	8000c68 <LCD_M>
}
 8002da0:	e12a      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == 'N' ) {
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	2b4e      	cmp	r3, #78	; 0x4e
 8002da6:	d108      	bne.n	8002dba <letterselect+0x15e>
		LCD_N(x, y);
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	b292      	uxth	r2, r2
 8002db0:	4611      	mov	r1, r2
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fd ffbc 	bl	8000d30 <LCD_N>
}
 8002db8:	e11e      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == 'O' ) {
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	2b4f      	cmp	r3, #79	; 0x4f
 8002dbe:	d108      	bne.n	8002dd2 <letterselect+0x176>
		LCD_O(x, y);
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	b292      	uxth	r2, r2
 8002dc8:	4611      	mov	r1, r2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fe f814 	bl	8000df8 <LCD_O>
}
 8002dd0:	e112      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == 'P' ) {
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	2b50      	cmp	r3, #80	; 0x50
 8002dd6:	d108      	bne.n	8002dea <letterselect+0x18e>
		LCD_P(x, y);
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	b292      	uxth	r2, r2
 8002de0:	4611      	mov	r1, r2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe f84e 	bl	8000e84 <LCD_P>
}
 8002de8:	e106      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == 'Q' ) {
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	2b51      	cmp	r3, #81	; 0x51
 8002dee:	d108      	bne.n	8002e02 <letterselect+0x1a6>
		LCD_Q(x, y);
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	b292      	uxth	r2, r2
 8002df8:	4611      	mov	r1, r2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe f898 	bl	8000f30 <LCD_Q>
}
 8002e00:	e0fa      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == 'R' ) {
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	2b52      	cmp	r3, #82	; 0x52
 8002e06:	d108      	bne.n	8002e1a <letterselect+0x1be>
		LCD_R(x, y);
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	b292      	uxth	r2, r2
 8002e10:	4611      	mov	r1, r2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe f8de 	bl	8000fd4 <LCD_R>
}
 8002e18:	e0ee      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == 'S' ) {
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
 8002e1c:	2b53      	cmp	r3, #83	; 0x53
 8002e1e:	d108      	bne.n	8002e32 <letterselect+0x1d6>
		LCD_S(x, y);
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	b292      	uxth	r2, r2
 8002e28:	4611      	mov	r1, r2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fe f93a 	bl	80010a4 <LCD_S>
}
 8002e30:	e0e2      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == 'T' ) {
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	2b54      	cmp	r3, #84	; 0x54
 8002e36:	d108      	bne.n	8002e4a <letterselect+0x1ee>
		LCD_T(x, y);
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	b292      	uxth	r2, r2
 8002e40:	4611      	mov	r1, r2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fe f986 	bl	8001154 <LCD_T>
}
 8002e48:	e0d6      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == 'U' ) {
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
 8002e4c:	2b55      	cmp	r3, #85	; 0x55
 8002e4e:	d108      	bne.n	8002e62 <letterselect+0x206>
		LCD_U(x, y);
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	b292      	uxth	r2, r2
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe f9be 	bl	80011dc <LCD_U>
}
 8002e60:	e0ca      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == 'V' ) {
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	2b56      	cmp	r3, #86	; 0x56
 8002e66:	d108      	bne.n	8002e7a <letterselect+0x21e>
		LCD_V(x, y);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	b292      	uxth	r2, r2
 8002e70:	4611      	mov	r1, r2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe f9f6 	bl	8001264 <LCD_V>
}
 8002e78:	e0be      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == 'W' ) {
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
 8002e7c:	2b57      	cmp	r3, #87	; 0x57
 8002e7e:	d108      	bne.n	8002e92 <letterselect+0x236>
		LCD_W(x, y);
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	b292      	uxth	r2, r2
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe fa6a 	bl	8001364 <LCD_W>
}
 8002e90:	e0b2      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == 'X' ) {
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	2b58      	cmp	r3, #88	; 0x58
 8002e96:	d108      	bne.n	8002eaa <letterselect+0x24e>
		LCD_X(x, y);
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	b292      	uxth	r2, r2
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe fafa 	bl	800149c <LCD_X>
}
 8002ea8:	e0a6      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == 'Y' ) {
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	2b59      	cmp	r3, #89	; 0x59
 8002eae:	d108      	bne.n	8002ec2 <letterselect+0x266>
		LCD_Y(x, y);
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	b292      	uxth	r2, r2
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fe fb4c 	bl	8001558 <LCD_Y>
}
 8002ec0:	e09a      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == 'Z') {
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
 8002ec4:	2b5a      	cmp	r3, #90	; 0x5a
 8002ec6:	d108      	bne.n	8002eda <letterselect+0x27e>
		LCD_Z(x, y);
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	b292      	uxth	r2, r2
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe fba8 	bl	8001628 <LCD_Z>
}
 8002ed8:	e08e      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == '0' ) {
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	2b30      	cmp	r3, #48	; 0x30
 8002ede:	d108      	bne.n	8002ef2 <letterselect+0x296>
		LCD_0(x, y);
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	b292      	uxth	r2, r2
 8002ee8:	4611      	mov	r1, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fe fbf4 	bl	80016d8 <LCD_0>
}
 8002ef0:	e082      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == '1' ) {
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	2b31      	cmp	r3, #49	; 0x31
 8002ef6:	d108      	bne.n	8002f0a <letterselect+0x2ae>
		LCD_1(x, y);
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	b292      	uxth	r2, r2
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe fc2e 	bl	8001764 <LCD_1>
}
 8002f08:	e076      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == '2' ) {
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	2b32      	cmp	r3, #50	; 0x32
 8002f0e:	d108      	bne.n	8002f22 <letterselect+0x2c6>
		LCD_2(x, y);
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	b292      	uxth	r2, r2
 8002f18:	4611      	mov	r1, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fe fc62 	bl	80017e4 <LCD_2>
}
 8002f20:	e06a      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == '3' ) {
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	2b33      	cmp	r3, #51	; 0x33
 8002f26:	d108      	bne.n	8002f3a <letterselect+0x2de>
		LCD_3(x, y);
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	b292      	uxth	r2, r2
 8002f30:	4611      	mov	r1, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fe fca8 	bl	8001888 <LCD_3>
}
 8002f38:	e05e      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == '4' ) {
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	2b34      	cmp	r3, #52	; 0x34
 8002f3e:	d108      	bne.n	8002f52 <letterselect+0x2f6>
		LCD_4(x, y);
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	b292      	uxth	r2, r2
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe fce6 	bl	800191c <LCD_4>
}
 8002f50:	e052      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == '5') {
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	2b35      	cmp	r3, #53	; 0x35
 8002f56:	d108      	bne.n	8002f6a <letterselect+0x30e>
		LCD_5(x, y);
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	b292      	uxth	r2, r2
 8002f60:	4611      	mov	r1, r2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fe fd26 	bl	80019b4 <LCD_5>
}
 8002f68:	e046      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == '6' ) {
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	2b36      	cmp	r3, #54	; 0x36
 8002f6e:	d108      	bne.n	8002f82 <letterselect+0x326>
		LCD_6(x, y);
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	b292      	uxth	r2, r2
 8002f78:	4611      	mov	r1, r2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe fd6c 	bl	8001a58 <LCD_6>
}
 8002f80:	e03a      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == '7' ) {
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	2b37      	cmp	r3, #55	; 0x37
 8002f86:	d108      	bne.n	8002f9a <letterselect+0x33e>
		LCD_7(x, y);
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	b292      	uxth	r2, r2
 8002f90:	4611      	mov	r1, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fe fdb0 	bl	8001af8 <LCD_7>
}
 8002f98:	e02e      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == '8' ) {
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	2b38      	cmp	r3, #56	; 0x38
 8002f9e:	d108      	bne.n	8002fb2 <letterselect+0x356>
		LCD_8(x, y);
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	b292      	uxth	r2, r2
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fe fe00 	bl	8001bb0 <LCD_8>
}
 8002fb0:	e022      	b.n	8002ff8 <letterselect+0x39c>
	else if( letter == '9') {
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	2b39      	cmp	r3, #57	; 0x39
 8002fb6:	d108      	bne.n	8002fca <letterselect+0x36e>
		LCD_9(x, y);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	b292      	uxth	r2, r2
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe fe40 	bl	8001c48 <LCD_9>
}
 8002fc8:	e016      	b.n	8002ff8 <letterselect+0x39c>
	else if ( letter == '.'){
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	2b2e      	cmp	r3, #46	; 0x2e
 8002fce:	d108      	bne.n	8002fe2 <letterselect+0x386>
		LCD_Period(x,y);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	b292      	uxth	r2, r2
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe fe84 	bl	8001ce8 <LCD_Period>
}
 8002fe0:	e00a      	b.n	8002ff8 <letterselect+0x39c>
	else if ( letter == ':'){
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
 8002fe4:	2b3a      	cmp	r3, #58	; 0x3a
 8002fe6:	d107      	bne.n	8002ff8 <letterselect+0x39c>
		LCD_Colon(x, y);
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	b292      	uxth	r2, r2
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fe febe 	bl	8001d74 <LCD_Colon>
}
 8002ff8:	bf00      	nop
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <type>:

void type(char const * word, int x, int y){
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < strlen(word); i++){
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	e02b      	b.n	800306a <type+0x6a>
		if ( x >= 224 ){
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2bdf      	cmp	r3, #223	; 0xdf
 8003016:	dd04      	ble.n	8003022 <type+0x22>
			x = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	60bb      	str	r3, [r7, #8]
			y = y + 18;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3312      	adds	r3, #18
 8003020:	607b      	str	r3, [r7, #4]
		}
		if ( y >= 304 ){
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8003028:	db03      	blt.n	8003032 <type+0x32>
			y = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	607b      	str	r3, [r7, #4]
			x = 0;
 800302e:	2300      	movs	r3, #0
 8003030:	60bb      	str	r3, [r7, #8]
		}
		letterselect(word[i], x, y);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4413      	add	r3, r2
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fe0c 	bl	8002c5c <letterselect>
		x = (x + 18) % LCD_WIDTH;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f103 0212 	add.w	r2, r3, #18
 800304a:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <type+0x84>)
 800304c:	fb83 1302 	smull	r1, r3, r3, r2
 8003050:	4413      	add	r3, r2
 8003052:	11d9      	asrs	r1, r3, #7
 8003054:	17d3      	asrs	r3, r2, #31
 8003056:	1ac9      	subs	r1, r1, r3
 8003058:	460b      	mov	r3, r1
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	1a5b      	subs	r3, r3, r1
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < strlen(word); i++){
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	3301      	adds	r3, #1
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f7fd f8be 	bl	80001ec <strlen>
 8003070:	4602      	mov	r2, r0
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	429a      	cmp	r2, r3
 8003076:	d8cc      	bhi.n	8003012 <type+0x12>
	}
}
 8003078:	bf00      	nop
 800307a:	bf00      	nop
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	88888889 	.word	0x88888889

08003088 <InitialScreen>:



void InitialScreen(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
	LCD_ClearScreenLtdc(0xFF);
 800308c:	20ff      	movs	r0, #255	; 0xff
 800308e:	f7ff fa05 	bl	800249c <LCD_ClearScreenLtdc>
	type("WELCOME", 50, 152);
 8003092:	2298      	movs	r2, #152	; 0x98
 8003094:	2132      	movs	r1, #50	; 0x32
 8003096:	4809      	ldr	r0, [pc, #36]	; (80030bc <InitialScreen+0x34>)
 8003098:	f7ff ffb2 	bl	8003000 <type>
	type("PAMA" , 85, 294);
 800309c:	f44f 7293 	mov.w	r2, #294	; 0x126
 80030a0:	2155      	movs	r1, #85	; 0x55
 80030a2:	4807      	ldr	r0, [pc, #28]	; (80030c0 <InitialScreen+0x38>)
 80030a4:	f7ff ffac 	bl	8003000 <type>
	HAL_Delay(3000);
 80030a8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80030ac:	f000 fa3a 	bl	8003524 <HAL_Delay>
	LCD_ClearScreenLtdc(0xFF);
 80030b0:	20ff      	movs	r0, #255	; 0xff
 80030b2:	f7ff f9f3 	bl	800249c <LCD_ClearScreenLtdc>
}
 80030b6:	bf00      	nop
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	08005500 	.word	0x08005500
 80030c0:	08005508 	.word	0x08005508

080030c4 <MenuScreen>:

void MenuScreen(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
	LCD_ClearScreenLtdc(0x05);
 80030c8:	2005      	movs	r0, #5
 80030ca:	f7ff f9e7 	bl	800249c <LCD_ClearScreenLtdc>
	type("MENU", 70, 152);
 80030ce:	2298      	movs	r2, #152	; 0x98
 80030d0:	2146      	movs	r1, #70	; 0x46
 80030d2:	4805      	ldr	r0, [pc, #20]	; (80030e8 <MenuScreen+0x24>)
 80030d4:	f7ff ff94 	bl	8003000 <type>
	type("PAMA" , 85, 294);
 80030d8:	f44f 7293 	mov.w	r2, #294	; 0x126
 80030dc:	2155      	movs	r1, #85	; 0x55
 80030de:	4803      	ldr	r0, [pc, #12]	; (80030ec <MenuScreen+0x28>)
 80030e0:	f7ff ff8e 	bl	8003000 <type>
}
 80030e4:	bf00      	nop
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	08005510 	.word	0x08005510
 80030ec:	08005508 	.word	0x08005508

080030f0 <BluetoothScreen>:

void BluetoothScreen(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
	LCD_ClearScreenLtdc(0x05);
 80030f4:	2005      	movs	r0, #5
 80030f6:	f7ff f9d1 	bl	800249c <LCD_ClearScreenLtdc>
	type("BLUETOOTH", 40, 50);
 80030fa:	2232      	movs	r2, #50	; 0x32
 80030fc:	2128      	movs	r1, #40	; 0x28
 80030fe:	480a      	ldr	r0, [pc, #40]	; (8003128 <BluetoothScreen+0x38>)
 8003100:	f7ff ff7e 	bl	8003000 <type>
	type("PAIRING", 40, 68);
 8003104:	2244      	movs	r2, #68	; 0x44
 8003106:	2128      	movs	r1, #40	; 0x28
 8003108:	4808      	ldr	r0, [pc, #32]	; (800312c <BluetoothScreen+0x3c>)
 800310a:	f7ff ff79 	bl	8003000 <type>
	//DEMONSTRATION PURPOSES
	type("PAIRING...", 20, 152);
 800310e:	2298      	movs	r2, #152	; 0x98
 8003110:	2114      	movs	r1, #20
 8003112:	4807      	ldr	r0, [pc, #28]	; (8003130 <BluetoothScreen+0x40>)
 8003114:	f7ff ff74 	bl	8003000 <type>
	type("PAMA" , 85, 294);
 8003118:	f44f 7293 	mov.w	r2, #294	; 0x126
 800311c:	2155      	movs	r1, #85	; 0x55
 800311e:	4805      	ldr	r0, [pc, #20]	; (8003134 <BluetoothScreen+0x44>)
 8003120:	f7ff ff6e 	bl	8003000 <type>
}
 8003124:	bf00      	nop
 8003126:	bd80      	pop	{r7, pc}
 8003128:	08005518 	.word	0x08005518
 800312c:	08005524 	.word	0x08005524
 8003130:	0800552c 	.word	0x0800552c
 8003134:	08005508 	.word	0x08005508

08003138 <ScheduleScreen>:

void ScheduleScreen()
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
	LCD_ClearScreenLtdc(0x05);
 800313c:	2005      	movs	r0, #5
 800313e:	f7ff f9ad 	bl	800249c <LCD_ClearScreenLtdc>
	type("SCHEDULE", 30, 50);
 8003142:	2232      	movs	r2, #50	; 0x32
 8003144:	211e      	movs	r1, #30
 8003146:	4814      	ldr	r0, [pc, #80]	; (8003198 <ScheduleScreen+0x60>)
 8003148:	f7ff ff5a 	bl	8003000 <type>
	//DEMONSTRATION PURPOSES
	type("TYLENOL", 10, 100);
 800314c:	2264      	movs	r2, #100	; 0x64
 800314e:	210a      	movs	r1, #10
 8003150:	4812      	ldr	r0, [pc, #72]	; (800319c <ScheduleScreen+0x64>)
 8003152:	f7ff ff55 	bl	8003000 <type>
	type("2:30 2", 10, 118);
 8003156:	2276      	movs	r2, #118	; 0x76
 8003158:	210a      	movs	r1, #10
 800315a:	4811      	ldr	r0, [pc, #68]	; (80031a0 <ScheduleScreen+0x68>)
 800315c:	f7ff ff50 	bl	8003000 <type>
	type("SIMVASTATIN", 10, 154);
 8003160:	229a      	movs	r2, #154	; 0x9a
 8003162:	210a      	movs	r1, #10
 8003164:	480f      	ldr	r0, [pc, #60]	; (80031a4 <ScheduleScreen+0x6c>)
 8003166:	f7ff ff4b 	bl	8003000 <type>
	type("3:00 1", 10, 172);
 800316a:	22ac      	movs	r2, #172	; 0xac
 800316c:	210a      	movs	r1, #10
 800316e:	480e      	ldr	r0, [pc, #56]	; (80031a8 <ScheduleScreen+0x70>)
 8003170:	f7ff ff46 	bl	8003000 <type>
	type("AZITHROMYCIN", 10, 208);
 8003174:	22d0      	movs	r2, #208	; 0xd0
 8003176:	210a      	movs	r1, #10
 8003178:	480c      	ldr	r0, [pc, #48]	; (80031ac <ScheduleScreen+0x74>)
 800317a:	f7ff ff41 	bl	8003000 <type>
	type("3:30 1", 10, 226);
 800317e:	22e2      	movs	r2, #226	; 0xe2
 8003180:	210a      	movs	r1, #10
 8003182:	480b      	ldr	r0, [pc, #44]	; (80031b0 <ScheduleScreen+0x78>)
 8003184:	f7ff ff3c 	bl	8003000 <type>
	type("PAMA", 85, 294);
 8003188:	f44f 7293 	mov.w	r2, #294	; 0x126
 800318c:	2155      	movs	r1, #85	; 0x55
 800318e:	4809      	ldr	r0, [pc, #36]	; (80031b4 <ScheduleScreen+0x7c>)
 8003190:	f7ff ff36 	bl	8003000 <type>
}
 8003194:	bf00      	nop
 8003196:	bd80      	pop	{r7, pc}
 8003198:	08005538 	.word	0x08005538
 800319c:	08005544 	.word	0x08005544
 80031a0:	0800554c 	.word	0x0800554c
 80031a4:	08005554 	.word	0x08005554
 80031a8:	08005560 	.word	0x08005560
 80031ac:	08005568 	.word	0x08005568
 80031b0:	08005578 	.word	0x08005578
 80031b4:	08005508 	.word	0x08005508

080031b8 <DispensedScreen>:

void DispensedScreen()
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
	LCD_ClearScreenLtdc(0x05);
 80031bc:	2005      	movs	r0, #5
 80031be:	f7ff f96d 	bl	800249c <LCD_ClearScreenLtdc>
	type("DISPENSE", 50, 50);
 80031c2:	2232      	movs	r2, #50	; 0x32
 80031c4:	2132      	movs	r1, #50	; 0x32
 80031c6:	480f      	ldr	r0, [pc, #60]	; (8003204 <DispensedScreen+0x4c>)
 80031c8:	f7ff ff1a 	bl	8003000 <type>
	//DEMONSTRATION PURPOSES
	type("PREPARING:", 25, 100);
 80031cc:	2264      	movs	r2, #100	; 0x64
 80031ce:	2119      	movs	r1, #25
 80031d0:	480d      	ldr	r0, [pc, #52]	; (8003208 <DispensedScreen+0x50>)
 80031d2:	f7ff ff15 	bl	8003000 <type>
	type("TYLENOL", 10, 118);
 80031d6:	2276      	movs	r2, #118	; 0x76
 80031d8:	210a      	movs	r1, #10
 80031da:	480c      	ldr	r0, [pc, #48]	; (800320c <DispensedScreen+0x54>)
 80031dc:	f7ff ff10 	bl	8003000 <type>
	type("SIMVASTATIN", 10, 136);
 80031e0:	2288      	movs	r2, #136	; 0x88
 80031e2:	210a      	movs	r1, #10
 80031e4:	480a      	ldr	r0, [pc, #40]	; (8003210 <DispensedScreen+0x58>)
 80031e6:	f7ff ff0b 	bl	8003000 <type>
	type("AZITHROMYCIN", 10, 154);
 80031ea:	229a      	movs	r2, #154	; 0x9a
 80031ec:	210a      	movs	r1, #10
 80031ee:	4809      	ldr	r0, [pc, #36]	; (8003214 <DispensedScreen+0x5c>)
 80031f0:	f7ff ff06 	bl	8003000 <type>
	type("PAMA" , 85, 294);
 80031f4:	f44f 7293 	mov.w	r2, #294	; 0x126
 80031f8:	2155      	movs	r1, #85	; 0x55
 80031fa:	4807      	ldr	r0, [pc, #28]	; (8003218 <DispensedScreen+0x60>)
 80031fc:	f7ff ff00 	bl	8003000 <type>
}
 8003200:	bf00      	nop
 8003202:	bd80      	pop	{r7, pc}
 8003204:	08005580 	.word	0x08005580
 8003208:	0800558c 	.word	0x0800558c
 800320c:	08005544 	.word	0x08005544
 8003210:	08005554 	.word	0x08005554
 8003214:	08005568 	.word	0x08005568
 8003218:	08005508 	.word	0x08005508

0800321c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8003220:	4b18      	ldr	r3, [pc, #96]	; (8003284 <MX_SPI5_Init+0x68>)
 8003222:	4a19      	ldr	r2, [pc, #100]	; (8003288 <MX_SPI5_Init+0x6c>)
 8003224:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003226:	4b17      	ldr	r3, [pc, #92]	; (8003284 <MX_SPI5_Init+0x68>)
 8003228:	f44f 7282 	mov.w	r2, #260	; 0x104
 800322c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 800322e:	4b15      	ldr	r3, [pc, #84]	; (8003284 <MX_SPI5_Init+0x68>)
 8003230:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003234:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003236:	4b13      	ldr	r3, [pc, #76]	; (8003284 <MX_SPI5_Init+0x68>)
 8003238:	2200      	movs	r2, #0
 800323a:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800323c:	4b11      	ldr	r3, [pc, #68]	; (8003284 <MX_SPI5_Init+0x68>)
 800323e:	2200      	movs	r2, #0
 8003240:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003242:	4b10      	ldr	r3, [pc, #64]	; (8003284 <MX_SPI5_Init+0x68>)
 8003244:	2200      	movs	r2, #0
 8003246:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003248:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <MX_SPI5_Init+0x68>)
 800324a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800324e:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003250:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <MX_SPI5_Init+0x68>)
 8003252:	2200      	movs	r2, #0
 8003254:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003256:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <MX_SPI5_Init+0x68>)
 8003258:	2200      	movs	r2, #0
 800325a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800325c:	4b09      	ldr	r3, [pc, #36]	; (8003284 <MX_SPI5_Init+0x68>)
 800325e:	2200      	movs	r2, #0
 8003260:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003262:	4b08      	ldr	r3, [pc, #32]	; (8003284 <MX_SPI5_Init+0x68>)
 8003264:	2200      	movs	r2, #0
 8003266:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <MX_SPI5_Init+0x68>)
 800326a:	220a      	movs	r2, #10
 800326c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800326e:	4805      	ldr	r0, [pc, #20]	; (8003284 <MX_SPI5_Init+0x68>)
 8003270:	f001 fe88 	bl	8004f84 <HAL_SPI_Init>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <MX_SPI5_Init+0x62>
  {
    Error_Handler();
 800327a:	f7ff fc21 	bl	8002ac0 <Error_Handler>
  }

}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20012cd8 	.word	0x20012cd8
 8003288:	40015000 	.word	0x40015000

0800328c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08a      	sub	sp, #40	; 0x28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003294:	f107 0314 	add.w	r3, r7, #20
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	605a      	str	r2, [r3, #4]
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	60da      	str	r2, [r3, #12]
 80032a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a19      	ldr	r2, [pc, #100]	; (8003310 <HAL_SPI_MspInit+0x84>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d12c      	bne.n	8003308 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	4b18      	ldr	r3, [pc, #96]	; (8003314 <HAL_SPI_MspInit+0x88>)
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	4a17      	ldr	r2, [pc, #92]	; (8003314 <HAL_SPI_MspInit+0x88>)
 80032b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032bc:	6453      	str	r3, [r2, #68]	; 0x44
 80032be:	4b15      	ldr	r3, [pc, #84]	; (8003314 <HAL_SPI_MspInit+0x88>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	4b11      	ldr	r3, [pc, #68]	; (8003314 <HAL_SPI_MspInit+0x88>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	4a10      	ldr	r2, [pc, #64]	; (8003314 <HAL_SPI_MspInit+0x88>)
 80032d4:	f043 0320 	orr.w	r3, r3, #32
 80032d8:	6313      	str	r3, [r2, #48]	; 0x30
 80032da:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <HAL_SPI_MspInit+0x88>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	f003 0320 	and.w	r3, r3, #32
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80032e6:	f44f 7320 	mov.w	r3, #640	; 0x280
 80032ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ec:	2302      	movs	r3, #2
 80032ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f4:	2303      	movs	r3, #3
 80032f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80032f8:	2305      	movs	r3, #5
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80032fc:	f107 0314 	add.w	r3, r7, #20
 8003300:	4619      	mov	r1, r3
 8003302:	4805      	ldr	r0, [pc, #20]	; (8003318 <HAL_SPI_MspInit+0x8c>)
 8003304:	f000 fa44 	bl	8003790 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8003308:	bf00      	nop
 800330a:	3728      	adds	r7, #40	; 0x28
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40015000 	.word	0x40015000
 8003314:	40023800 	.word	0x40023800
 8003318:	40021400 	.word	0x40021400

0800331c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	607b      	str	r3, [r7, #4]
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <HAL_MspInit+0x4c>)
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	4a0f      	ldr	r2, [pc, #60]	; (8003368 <HAL_MspInit+0x4c>)
 800332c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003330:	6453      	str	r3, [r2, #68]	; 0x44
 8003332:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <HAL_MspInit+0x4c>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800333a:	607b      	str	r3, [r7, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	603b      	str	r3, [r7, #0]
 8003342:	4b09      	ldr	r3, [pc, #36]	; (8003368 <HAL_MspInit+0x4c>)
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	4a08      	ldr	r2, [pc, #32]	; (8003368 <HAL_MspInit+0x4c>)
 8003348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800334c:	6413      	str	r3, [r2, #64]	; 0x40
 800334e:	4b06      	ldr	r3, [pc, #24]	; (8003368 <HAL_MspInit+0x4c>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800335a:	2007      	movs	r0, #7
 800335c:	f000 f9d6 	bl	800370c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40023800 	.word	0x40023800

0800336c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003370:	e7fe      	b.n	8003370 <NMI_Handler+0x4>

08003372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003372:	b480      	push	{r7}
 8003374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003376:	e7fe      	b.n	8003376 <HardFault_Handler+0x4>

08003378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800337c:	e7fe      	b.n	800337c <MemManage_Handler+0x4>

0800337e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800337e:	b480      	push	{r7}
 8003380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003382:	e7fe      	b.n	8003382 <BusFault_Handler+0x4>

08003384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003388:	e7fe      	b.n	8003388 <UsageFault_Handler+0x4>

0800338a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800338a:	b480      	push	{r7}
 800338c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800338e:	bf00      	nop
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800339c:	bf00      	nop
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033a6:	b480      	push	{r7}
 80033a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033aa:	bf00      	nop
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033b8:	f000 f894 	bl	80034e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033bc:	bf00      	nop
 80033be:	bd80      	pop	{r7, pc}

080033c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033c4:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <SystemInit+0x28>)
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ca:	4a07      	ldr	r2, [pc, #28]	; (80033e8 <SystemInit+0x28>)
 80033cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033d4:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <SystemInit+0x28>)
 80033d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033da:	609a      	str	r2, [r3, #8]
#endif
}
 80033dc:	bf00      	nop
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80033ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003424 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033f0:	480d      	ldr	r0, [pc, #52]	; (8003428 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033f2:	490e      	ldr	r1, [pc, #56]	; (800342c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033f4:	4a0e      	ldr	r2, [pc, #56]	; (8003430 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033f8:	e002      	b.n	8003400 <LoopCopyDataInit>

080033fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033fe:	3304      	adds	r3, #4

08003400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003404:	d3f9      	bcc.n	80033fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003406:	4a0b      	ldr	r2, [pc, #44]	; (8003434 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003408:	4c0b      	ldr	r4, [pc, #44]	; (8003438 <LoopFillZerobss+0x26>)
  movs r3, #0
 800340a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800340c:	e001      	b.n	8003412 <LoopFillZerobss>

0800340e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800340e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003410:	3204      	adds	r2, #4

08003412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003414:	d3fb      	bcc.n	800340e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003416:	f7ff ffd3 	bl	80033c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800341a:	f001 ffdb 	bl	80053d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800341e:	f7ff fa11 	bl	8002844 <main>
  bx  lr    
 8003422:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003424:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800342c:	20012c10 	.word	0x20012c10
  ldr r2, =_sidata
 8003430:	080059e0 	.word	0x080059e0
  ldr r2, =_sbss
 8003434:	20012c10 	.word	0x20012c10
  ldr r4, =_ebss
 8003438:	20012d34 	.word	0x20012d34

0800343c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800343c:	e7fe      	b.n	800343c <ADC_IRQHandler>
	...

08003440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003444:	4b0e      	ldr	r3, [pc, #56]	; (8003480 <HAL_Init+0x40>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a0d      	ldr	r2, [pc, #52]	; (8003480 <HAL_Init+0x40>)
 800344a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800344e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003450:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <HAL_Init+0x40>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a0a      	ldr	r2, [pc, #40]	; (8003480 <HAL_Init+0x40>)
 8003456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800345a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800345c:	4b08      	ldr	r3, [pc, #32]	; (8003480 <HAL_Init+0x40>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a07      	ldr	r2, [pc, #28]	; (8003480 <HAL_Init+0x40>)
 8003462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003466:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003468:	2003      	movs	r0, #3
 800346a:	f000 f94f 	bl	800370c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800346e:	2000      	movs	r0, #0
 8003470:	f000 f808 	bl	8003484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003474:	f7ff ff52 	bl	800331c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40023c00 	.word	0x40023c00

08003484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800348c:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <HAL_InitTick+0x54>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	4b12      	ldr	r3, [pc, #72]	; (80034dc <HAL_InitTick+0x58>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	4619      	mov	r1, r3
 8003496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800349a:	fbb3 f3f1 	udiv	r3, r3, r1
 800349e:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 f967 	bl	8003776 <HAL_SYSTICK_Config>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e00e      	b.n	80034d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b0f      	cmp	r3, #15
 80034b6:	d80a      	bhi.n	80034ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034b8:	2200      	movs	r2, #0
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	f04f 30ff 	mov.w	r0, #4294967295
 80034c0:	f000 f92f 	bl	8003722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034c4:	4a06      	ldr	r2, [pc, #24]	; (80034e0 <HAL_InitTick+0x5c>)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	e000      	b.n	80034d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	20012c04 	.word	0x20012c04
 80034dc:	20012c0c 	.word	0x20012c0c
 80034e0:	20012c08 	.word	0x20012c08

080034e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034e8:	4b06      	ldr	r3, [pc, #24]	; (8003504 <HAL_IncTick+0x20>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	4b06      	ldr	r3, [pc, #24]	; (8003508 <HAL_IncTick+0x24>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4413      	add	r3, r2
 80034f4:	4a04      	ldr	r2, [pc, #16]	; (8003508 <HAL_IncTick+0x24>)
 80034f6:	6013      	str	r3, [r2, #0]
}
 80034f8:	bf00      	nop
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20012c0c 	.word	0x20012c0c
 8003508:	20012d30 	.word	0x20012d30

0800350c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  return uwTick;
 8003510:	4b03      	ldr	r3, [pc, #12]	; (8003520 <HAL_GetTick+0x14>)
 8003512:	681b      	ldr	r3, [r3, #0]
}
 8003514:	4618      	mov	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	20012d30 	.word	0x20012d30

08003524 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800352c:	f7ff ffee 	bl	800350c <HAL_GetTick>
 8003530:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353c:	d005      	beq.n	800354a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800353e:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <HAL_Delay+0x44>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800354a:	bf00      	nop
 800354c:	f7ff ffde 	bl	800350c <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	429a      	cmp	r2, r3
 800355a:	d8f7      	bhi.n	800354c <HAL_Delay+0x28>
  {
  }
}
 800355c:	bf00      	nop
 800355e:	bf00      	nop
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20012c0c 	.word	0x20012c0c

0800356c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800357c:	4b0c      	ldr	r3, [pc, #48]	; (80035b0 <__NVIC_SetPriorityGrouping+0x44>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003588:	4013      	ands	r3, r2
 800358a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800359c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800359e:	4a04      	ldr	r2, [pc, #16]	; (80035b0 <__NVIC_SetPriorityGrouping+0x44>)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	60d3      	str	r3, [r2, #12]
}
 80035a4:	bf00      	nop
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	e000ed00 	.word	0xe000ed00

080035b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035b8:	4b04      	ldr	r3, [pc, #16]	; (80035cc <__NVIC_GetPriorityGrouping+0x18>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	0a1b      	lsrs	r3, r3, #8
 80035be:	f003 0307 	and.w	r3, r3, #7
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	e000ed00 	.word	0xe000ed00

080035d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	db0b      	blt.n	80035fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035e2:	79fb      	ldrb	r3, [r7, #7]
 80035e4:	f003 021f 	and.w	r2, r3, #31
 80035e8:	4907      	ldr	r1, [pc, #28]	; (8003608 <__NVIC_EnableIRQ+0x38>)
 80035ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	2001      	movs	r0, #1
 80035f2:	fa00 f202 	lsl.w	r2, r0, r2
 80035f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	e000e100 	.word	0xe000e100

0800360c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	4603      	mov	r3, r0
 8003614:	6039      	str	r1, [r7, #0]
 8003616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361c:	2b00      	cmp	r3, #0
 800361e:	db0a      	blt.n	8003636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	b2da      	uxtb	r2, r3
 8003624:	490c      	ldr	r1, [pc, #48]	; (8003658 <__NVIC_SetPriority+0x4c>)
 8003626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362a:	0112      	lsls	r2, r2, #4
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	440b      	add	r3, r1
 8003630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003634:	e00a      	b.n	800364c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	b2da      	uxtb	r2, r3
 800363a:	4908      	ldr	r1, [pc, #32]	; (800365c <__NVIC_SetPriority+0x50>)
 800363c:	79fb      	ldrb	r3, [r7, #7]
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	3b04      	subs	r3, #4
 8003644:	0112      	lsls	r2, r2, #4
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	440b      	add	r3, r1
 800364a:	761a      	strb	r2, [r3, #24]
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	e000e100 	.word	0xe000e100
 800365c:	e000ed00 	.word	0xe000ed00

08003660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003660:	b480      	push	{r7}
 8003662:	b089      	sub	sp, #36	; 0x24
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f1c3 0307 	rsb	r3, r3, #7
 800367a:	2b04      	cmp	r3, #4
 800367c:	bf28      	it	cs
 800367e:	2304      	movcs	r3, #4
 8003680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	3304      	adds	r3, #4
 8003686:	2b06      	cmp	r3, #6
 8003688:	d902      	bls.n	8003690 <NVIC_EncodePriority+0x30>
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	3b03      	subs	r3, #3
 800368e:	e000      	b.n	8003692 <NVIC_EncodePriority+0x32>
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003694:	f04f 32ff 	mov.w	r2, #4294967295
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43da      	mvns	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	401a      	ands	r2, r3
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036a8:	f04f 31ff 	mov.w	r1, #4294967295
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	fa01 f303 	lsl.w	r3, r1, r3
 80036b2:	43d9      	mvns	r1, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b8:	4313      	orrs	r3, r2
         );
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3724      	adds	r7, #36	; 0x24
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
	...

080036c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036d8:	d301      	bcc.n	80036de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036da:	2301      	movs	r3, #1
 80036dc:	e00f      	b.n	80036fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036de:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <SysTick_Config+0x40>)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036e6:	210f      	movs	r1, #15
 80036e8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ec:	f7ff ff8e 	bl	800360c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <SysTick_Config+0x40>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036f6:	4b04      	ldr	r3, [pc, #16]	; (8003708 <SysTick_Config+0x40>)
 80036f8:	2207      	movs	r2, #7
 80036fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	e000e010 	.word	0xe000e010

0800370c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7ff ff29 	bl	800356c <__NVIC_SetPriorityGrouping>
}
 800371a:	bf00      	nop
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003722:	b580      	push	{r7, lr}
 8003724:	b086      	sub	sp, #24
 8003726:	af00      	add	r7, sp, #0
 8003728:	4603      	mov	r3, r0
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	607a      	str	r2, [r7, #4]
 800372e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003734:	f7ff ff3e 	bl	80035b4 <__NVIC_GetPriorityGrouping>
 8003738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	6978      	ldr	r0, [r7, #20]
 8003740:	f7ff ff8e 	bl	8003660 <NVIC_EncodePriority>
 8003744:	4602      	mov	r2, r0
 8003746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800374a:	4611      	mov	r1, r2
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff ff5d 	bl	800360c <__NVIC_SetPriority>
}
 8003752:	bf00      	nop
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	4603      	mov	r3, r0
 8003762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff ff31 	bl	80035d0 <__NVIC_EnableIRQ>
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7ff ffa2 	bl	80036c8 <SysTick_Config>
 8003784:	4603      	mov	r3, r0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003790:	b480      	push	{r7}
 8003792:	b089      	sub	sp, #36	; 0x24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800379e:	2300      	movs	r3, #0
 80037a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037a6:	2300      	movs	r3, #0
 80037a8:	61fb      	str	r3, [r7, #28]
 80037aa:	e177      	b.n	8003a9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037ac:	2201      	movs	r2, #1
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4013      	ands	r3, r2
 80037be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	f040 8166 	bne.w	8003a96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d00b      	beq.n	80037ea <HAL_GPIO_Init+0x5a>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d007      	beq.n	80037ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037de:	2b11      	cmp	r3, #17
 80037e0:	d003      	beq.n	80037ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b12      	cmp	r3, #18
 80037e8:	d130      	bne.n	800384c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	2203      	movs	r2, #3
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4013      	ands	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4313      	orrs	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003820:	2201      	movs	r2, #1
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4013      	ands	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f003 0201 	and.w	r2, r3, #1
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	2203      	movs	r2, #3
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4013      	ands	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4313      	orrs	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b02      	cmp	r3, #2
 8003882:	d003      	beq.n	800388c <HAL_GPIO_Init+0xfc>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b12      	cmp	r3, #18
 800388a:	d123      	bne.n	80038d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	08da      	lsrs	r2, r3, #3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3208      	adds	r2, #8
 8003894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003898:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	220f      	movs	r2, #15
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4013      	ands	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	08da      	lsrs	r2, r3, #3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3208      	adds	r2, #8
 80038ce:	69b9      	ldr	r1, [r7, #24]
 80038d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	2203      	movs	r2, #3
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4013      	ands	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 0203 	and.w	r2, r3, #3
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4313      	orrs	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 80c0 	beq.w	8003a96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	4b66      	ldr	r3, [pc, #408]	; (8003ab4 <HAL_GPIO_Init+0x324>)
 800391c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391e:	4a65      	ldr	r2, [pc, #404]	; (8003ab4 <HAL_GPIO_Init+0x324>)
 8003920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003924:	6453      	str	r3, [r2, #68]	; 0x44
 8003926:	4b63      	ldr	r3, [pc, #396]	; (8003ab4 <HAL_GPIO_Init+0x324>)
 8003928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003932:	4a61      	ldr	r2, [pc, #388]	; (8003ab8 <HAL_GPIO_Init+0x328>)
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	089b      	lsrs	r3, r3, #2
 8003938:	3302      	adds	r3, #2
 800393a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800393e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	220f      	movs	r2, #15
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	43db      	mvns	r3, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4013      	ands	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a58      	ldr	r2, [pc, #352]	; (8003abc <HAL_GPIO_Init+0x32c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d037      	beq.n	80039ce <HAL_GPIO_Init+0x23e>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a57      	ldr	r2, [pc, #348]	; (8003ac0 <HAL_GPIO_Init+0x330>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d031      	beq.n	80039ca <HAL_GPIO_Init+0x23a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a56      	ldr	r2, [pc, #344]	; (8003ac4 <HAL_GPIO_Init+0x334>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d02b      	beq.n	80039c6 <HAL_GPIO_Init+0x236>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a55      	ldr	r2, [pc, #340]	; (8003ac8 <HAL_GPIO_Init+0x338>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d025      	beq.n	80039c2 <HAL_GPIO_Init+0x232>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a54      	ldr	r2, [pc, #336]	; (8003acc <HAL_GPIO_Init+0x33c>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d01f      	beq.n	80039be <HAL_GPIO_Init+0x22e>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a53      	ldr	r2, [pc, #332]	; (8003ad0 <HAL_GPIO_Init+0x340>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d019      	beq.n	80039ba <HAL_GPIO_Init+0x22a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a52      	ldr	r2, [pc, #328]	; (8003ad4 <HAL_GPIO_Init+0x344>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d013      	beq.n	80039b6 <HAL_GPIO_Init+0x226>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a51      	ldr	r2, [pc, #324]	; (8003ad8 <HAL_GPIO_Init+0x348>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d00d      	beq.n	80039b2 <HAL_GPIO_Init+0x222>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a50      	ldr	r2, [pc, #320]	; (8003adc <HAL_GPIO_Init+0x34c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d007      	beq.n	80039ae <HAL_GPIO_Init+0x21e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a4f      	ldr	r2, [pc, #316]	; (8003ae0 <HAL_GPIO_Init+0x350>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d101      	bne.n	80039aa <HAL_GPIO_Init+0x21a>
 80039a6:	2309      	movs	r3, #9
 80039a8:	e012      	b.n	80039d0 <HAL_GPIO_Init+0x240>
 80039aa:	230a      	movs	r3, #10
 80039ac:	e010      	b.n	80039d0 <HAL_GPIO_Init+0x240>
 80039ae:	2308      	movs	r3, #8
 80039b0:	e00e      	b.n	80039d0 <HAL_GPIO_Init+0x240>
 80039b2:	2307      	movs	r3, #7
 80039b4:	e00c      	b.n	80039d0 <HAL_GPIO_Init+0x240>
 80039b6:	2306      	movs	r3, #6
 80039b8:	e00a      	b.n	80039d0 <HAL_GPIO_Init+0x240>
 80039ba:	2305      	movs	r3, #5
 80039bc:	e008      	b.n	80039d0 <HAL_GPIO_Init+0x240>
 80039be:	2304      	movs	r3, #4
 80039c0:	e006      	b.n	80039d0 <HAL_GPIO_Init+0x240>
 80039c2:	2303      	movs	r3, #3
 80039c4:	e004      	b.n	80039d0 <HAL_GPIO_Init+0x240>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e002      	b.n	80039d0 <HAL_GPIO_Init+0x240>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <HAL_GPIO_Init+0x240>
 80039ce:	2300      	movs	r3, #0
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	f002 0203 	and.w	r2, r2, #3
 80039d6:	0092      	lsls	r2, r2, #2
 80039d8:	4093      	lsls	r3, r2
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039e0:	4935      	ldr	r1, [pc, #212]	; (8003ab8 <HAL_GPIO_Init+0x328>)
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	089b      	lsrs	r3, r3, #2
 80039e6:	3302      	adds	r3, #2
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039ee:	4b3d      	ldr	r3, [pc, #244]	; (8003ae4 <HAL_GPIO_Init+0x354>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	43db      	mvns	r3, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4013      	ands	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a12:	4a34      	ldr	r2, [pc, #208]	; (8003ae4 <HAL_GPIO_Init+0x354>)
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a18:	4b32      	ldr	r3, [pc, #200]	; (8003ae4 <HAL_GPIO_Init+0x354>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	43db      	mvns	r3, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4013      	ands	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a3c:	4a29      	ldr	r2, [pc, #164]	; (8003ae4 <HAL_GPIO_Init+0x354>)
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a42:	4b28      	ldr	r3, [pc, #160]	; (8003ae4 <HAL_GPIO_Init+0x354>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a66:	4a1f      	ldr	r2, [pc, #124]	; (8003ae4 <HAL_GPIO_Init+0x354>)
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ae4 <HAL_GPIO_Init+0x354>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a90:	4a14      	ldr	r2, [pc, #80]	; (8003ae4 <HAL_GPIO_Init+0x354>)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	61fb      	str	r3, [r7, #28]
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	2b0f      	cmp	r3, #15
 8003aa0:	f67f ae84 	bls.w	80037ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	3724      	adds	r7, #36	; 0x24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	40013800 	.word	0x40013800
 8003abc:	40020000 	.word	0x40020000
 8003ac0:	40020400 	.word	0x40020400
 8003ac4:	40020800 	.word	0x40020800
 8003ac8:	40020c00 	.word	0x40020c00
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	40021400 	.word	0x40021400
 8003ad4:	40021800 	.word	0x40021800
 8003ad8:	40021c00 	.word	0x40021c00
 8003adc:	40022000 	.word	0x40022000
 8003ae0:	40022400 	.word	0x40022400
 8003ae4:	40013c00 	.word	0x40013c00

08003ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	807b      	strh	r3, [r7, #2]
 8003af4:	4613      	mov	r3, r2
 8003af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003af8:	787b      	ldrb	r3, [r7, #1]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003afe:	887a      	ldrh	r2, [r7, #2]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b04:	e003      	b.n	8003b0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b06:	887b      	ldrh	r3, [r7, #2]
 8003b08:	041a      	lsls	r2, r3, #16
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	619a      	str	r2, [r3, #24]
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
	...

08003b1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b26:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b28:	695a      	ldr	r2, [r3, #20]
 8003b2a:	88fb      	ldrh	r3, [r7, #6]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d006      	beq.n	8003b40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b32:	4a05      	ldr	r2, [pc, #20]	; (8003b48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b34:	88fb      	ldrh	r3, [r7, #6]
 8003b36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b38:	88fb      	ldrh	r3, [r7, #6]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 f806 	bl	8003b4c <HAL_GPIO_EXTI_Callback>
  }
}
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40013c00 	.word	0x40013c00

08003b4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U, tmp1 = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	2300      	movs	r3, #0
 8003b72:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e0bf      	b.n	8003cfe <HAL_LTDC_Init+0x19a>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fe fd4c 	bl	8002630 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699a      	ldr	r2, [r3, #24]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003bae:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6999      	ldr	r1, [r3, #24]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003bc4:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6899      	ldr	r1, [r3, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	4b4a      	ldr	r3, [pc, #296]	; (8003d08 <HAL_LTDC_Init+0x1a4>)
 8003be0:	400b      	ands	r3, r1
 8003be2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	041b      	lsls	r3, r3, #16
 8003bea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6899      	ldr	r1, [r3, #8]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68d9      	ldr	r1, [r3, #12]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	4b3e      	ldr	r3, [pc, #248]	; (8003d08 <HAL_LTDC_Init+0x1a4>)
 8003c0e:	400b      	ands	r3, r1
 8003c10:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	041b      	lsls	r3, r3, #16
 8003c18:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68d9      	ldr	r1, [r3, #12]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a1a      	ldr	r2, [r3, #32]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6919      	ldr	r1, [r3, #16]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	4b33      	ldr	r3, [pc, #204]	; (8003d08 <HAL_LTDC_Init+0x1a4>)
 8003c3c:	400b      	ands	r3, r1
 8003c3e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	041b      	lsls	r3, r3, #16
 8003c46:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6919      	ldr	r1, [r3, #16]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6959      	ldr	r1, [r3, #20]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	4b27      	ldr	r3, [pc, #156]	; (8003d08 <HAL_LTDC_Init+0x1a4>)
 8003c6a:	400b      	ands	r3, r1
 8003c6c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	041b      	lsls	r3, r3, #16
 8003c74:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6959      	ldr	r1, [r3, #20]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c92:	021b      	lsls	r3, r3, #8
 8003c94:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003c9c:	041b      	lsls	r3, r3, #16
 8003c9e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003cae:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0206 	orr.w	r2, r2, #6
 8003cda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699a      	ldr	r2, [r3, #24]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0201 	orr.w	r2, r2, #1
 8003cea:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	f000f800 	.word	0xf000f800

08003d0c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8003d0c:	b5b0      	push	{r4, r5, r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));	
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d101      	bne.n	8003d26 <HAL_LTDC_ConfigLayer+0x1a>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e02c      	b.n	8003d80 <HAL_LTDC_ConfigLayer+0x74>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2202      	movs	r2, #2
 8003d32:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2134      	movs	r1, #52	; 0x34
 8003d3c:	fb01 f303 	mul.w	r3, r1, r3
 8003d40:	4413      	add	r3, r2
 8003d42:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	4614      	mov	r4, r2
 8003d4a:	461d      	mov	r5, r3
 8003d4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d58:	682b      	ldr	r3, [r5, #0]
 8003d5a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	68b9      	ldr	r1, [r7, #8]
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 f923 	bl	8003fac <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bdb0      	pop	{r4, r5, r7, pc}

08003d88 <HAL_LTDC_ConfigCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigCLUT(LTDC_HandleTypeDef *hltdc, uint32_t *pCLUT, uint32_t CLUTSize, uint32_t LayerIdx)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b089      	sub	sp, #36	; 0x24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
  uint32_t counter = 0U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	61bb      	str	r3, [r7, #24]
  uint32_t pcounter = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_LTDC_ConfigCLUT+0x28>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e059      	b.n	8003e64 <HAL_LTDC_ConfigCLUT+0xdc>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;  
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  for(counter = 0U; (counter < CLUTSize); counter++)
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	61bb      	str	r3, [r7, #24]
 8003dc4:	e041      	b.n	8003e4a <HAL_LTDC_ConfigCLUT+0xc2>
  {
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	2134      	movs	r1, #52	; 0x34
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	3348      	adds	r3, #72	; 0x48
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b06      	cmp	r3, #6
 8003dd8:	d114      	bne.n	8003e04 <HAL_LTDC_ConfigCLUT+0x7c>
    {
      tmp  = (((counter + 16U*counter) << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	4413      	add	r3, r2
 8003de2:	061a      	lsls	r2, r3, #24
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	431a      	orrs	r2, r3
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003df4:	431a      	orrs	r2, r3
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61fb      	str	r3, [r7, #28]
 8003e02:	e010      	b.n	8003e26 <HAL_LTDC_ConfigCLUT+0x9e>
    }
    else
    { 
      tmp  = ((counter << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	061a      	lsls	r2, r3, #24
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e22:	4313      	orrs	r3, r2
 8003e24:	61fb      	str	r3, [r7, #28]
    }
    pcounter = (uint32_t)pCLUT + sizeof(*pCLUT);
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	617b      	str	r3, [r7, #20]
    pCLUT = (uint32_t *)pcounter;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	60bb      	str	r3, [r7, #8]

    /* Specifies the C-LUT address and RGB value */
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	01db      	lsls	r3, r3, #7
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3384      	adds	r3, #132	; 0x84
 8003e3e:	461a      	mov	r2, r3
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	6413      	str	r3, [r2, #64]	; 0x40
  for(counter = 0U; (counter < CLUTSize); counter++)
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	3301      	adds	r3, #1
 8003e48:	61bb      	str	r3, [r7, #24]
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d3b9      	bcc.n	8003dc6 <HAL_LTDC_ConfigCLUT+0x3e>
  }
  
  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);  
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3724      	adds	r7, #36	; 0x24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_LTDC_EnableCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <HAL_LTDC_EnableCLUT+0x18>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e026      	b.n	8003ed6 <HAL_LTDC_EnableCLUT+0x66>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color lookup table by setting CLUTEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	01db      	lsls	r3, r3, #7
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3384      	adds	r3, #132	; 0x84
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	4611      	mov	r1, r2
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	01d2      	lsls	r2, r2, #7
 8003eb2:	440a      	add	r2, r1
 8003eb4:	3284      	adds	r2, #132	; 0x84
 8003eb6:	f043 0310 	orr.w	r3, r3, #16
 8003eba:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b086      	sub	sp, #24
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_LTDC_SetAddress+0x1a>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e024      	b.n	8003f46 <HAL_LTDC_SetAddress+0x64>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2234      	movs	r2, #52	; 0x34
 8003f10:	fb02 f303 	mul.w	r3, r2, r3
 8003f14:	3338      	adds	r3, #56	; 0x38
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4413      	add	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6979      	ldr	r1, [r7, #20]
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 f840 	bl	8003fac <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2201      	movs	r2, #1
 8003f32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation. 
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d101      	bne.n	8003f66 <HAL_LTDC_Reload+0x18>
 8003f62:	2302      	movs	r3, #2
 8003f64:	e01c      	b.n	8003fa0 <HAL_LTDC_Reload+0x52>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;  
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2202      	movs	r2, #2
 8003f72:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  
  /* Enable the Reload interrupt */  
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0208 	orr.w	r2, r2, #8
 8003f84:	635a      	str	r2, [r3, #52]	; 0x34
       
  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;        
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  
  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b089      	sub	sp, #36	; 0x24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	617b      	str	r3, [r7, #20]

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	0c1b      	lsrs	r3, r3, #16
 8003fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd4:	4413      	add	r3, r2
 8003fd6:	041b      	lsls	r3, r3, #16
 8003fd8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	01db      	lsls	r3, r3, #7
 8003fe4:	4413      	add	r3, r2
 8003fe6:	3384      	adds	r3, #132	; 0x84
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	6812      	ldr	r2, [r2, #0]
 8003fee:	4611      	mov	r1, r2
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	01d2      	lsls	r2, r2, #7
 8003ff4:	440a      	add	r2, r1
 8003ff6:	3284      	adds	r2, #132	; 0x84
 8003ff8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003ffc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	0c1b      	lsrs	r3, r3, #16
 800400a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800400e:	4413      	add	r3, r2
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4619      	mov	r1, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	01db      	lsls	r3, r3, #7
 800401c:	440b      	add	r3, r1
 800401e:	3384      	adds	r3, #132	; 0x84
 8004020:	4619      	mov	r1, r3
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	4313      	orrs	r3, r2
 8004026:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004036:	4413      	add	r3, r2
 8004038:	041b      	lsls	r3, r3, #16
 800403a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	01db      	lsls	r3, r3, #7
 8004046:	4413      	add	r3, r2
 8004048:	3384      	adds	r3, #132	; 0x84
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	6812      	ldr	r2, [r2, #0]
 8004050:	4611      	mov	r1, r2
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	01d2      	lsls	r2, r2, #7
 8004056:	440a      	add	r2, r1
 8004058:	3284      	adds	r2, #132	; 0x84
 800405a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800405e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800406e:	4413      	add	r3, r2
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4619      	mov	r1, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	01db      	lsls	r3, r3, #7
 800407c:	440b      	add	r3, r1
 800407e:	3384      	adds	r3, #132	; 0x84
 8004080:	4619      	mov	r1, r3
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	4313      	orrs	r3, r2
 8004086:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	461a      	mov	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	01db      	lsls	r3, r3, #7
 8004092:	4413      	add	r3, r2
 8004094:	3384      	adds	r3, #132	; 0x84
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	6812      	ldr	r2, [r2, #0]
 800409c:	4611      	mov	r1, r2
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	01d2      	lsls	r2, r2, #7
 80040a2:	440a      	add	r2, r1
 80040a4:	3284      	adds	r2, #132	; 0x84
 80040a6:	f023 0307 	bic.w	r3, r3, #7
 80040aa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	461a      	mov	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	01db      	lsls	r3, r3, #7
 80040b6:	4413      	add	r3, r2
 80040b8:	3384      	adds	r3, #132	; 0x84
 80040ba:	461a      	mov	r2, r3
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80040c8:	021b      	lsls	r3, r3, #8
 80040ca:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80040d2:	041b      	lsls	r3, r3, #16
 80040d4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	061b      	lsls	r3, r3, #24
 80040dc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	461a      	mov	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	01db      	lsls	r3, r3, #7
 80040e8:	4413      	add	r3, r2
 80040ea:	3384      	adds	r3, #132	; 0x84
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	01db      	lsls	r3, r3, #7
 80040f8:	4413      	add	r3, r2
 80040fa:	3384      	adds	r3, #132	; 0x84
 80040fc:	461a      	mov	r2, r3
 80040fe:	2300      	movs	r3, #0
 8004100:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004108:	461a      	mov	r2, r3
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	431a      	orrs	r2, r3
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	431a      	orrs	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4619      	mov	r1, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	01db      	lsls	r3, r3, #7
 800411c:	440b      	add	r3, r1
 800411e:	3384      	adds	r3, #132	; 0x84
 8004120:	4619      	mov	r1, r3
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	01db      	lsls	r3, r3, #7
 8004132:	4413      	add	r3, r2
 8004134:	3384      	adds	r3, #132	; 0x84
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	6812      	ldr	r2, [r2, #0]
 800413c:	4611      	mov	r1, r2
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	01d2      	lsls	r2, r2, #7
 8004142:	440a      	add	r2, r1
 8004144:	3284      	adds	r2, #132	; 0x84
 8004146:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800414a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	01db      	lsls	r3, r3, #7
 8004156:	4413      	add	r3, r2
 8004158:	3384      	adds	r3, #132	; 0x84
 800415a:	461a      	mov	r2, r3
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	461a      	mov	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	01db      	lsls	r3, r3, #7
 800416c:	4413      	add	r3, r2
 800416e:	3384      	adds	r3, #132	; 0x84
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	6812      	ldr	r2, [r2, #0]
 8004176:	4611      	mov	r1, r2
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	01d2      	lsls	r2, r2, #7
 800417c:	440a      	add	r2, r1
 800417e:	3284      	adds	r2, #132	; 0x84
 8004180:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004184:	f023 0307 	bic.w	r3, r3, #7
 8004188:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	69da      	ldr	r2, [r3, #28]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	68f9      	ldr	r1, [r7, #12]
 8004194:	6809      	ldr	r1, [r1, #0]
 8004196:	4608      	mov	r0, r1
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	01c9      	lsls	r1, r1, #7
 800419c:	4401      	add	r1, r0
 800419e:	3184      	adds	r1, #132	; 0x84
 80041a0:	4313      	orrs	r3, r2
 80041a2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	01db      	lsls	r3, r3, #7
 80041ae:	4413      	add	r3, r2
 80041b0:	3384      	adds	r3, #132	; 0x84
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	461a      	mov	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	01db      	lsls	r3, r3, #7
 80041be:	4413      	add	r3, r2
 80041c0:	3384      	adds	r3, #132	; 0x84
 80041c2:	461a      	mov	r2, r3
 80041c4:	2300      	movs	r3, #0
 80041c6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	461a      	mov	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	01db      	lsls	r3, r3, #7
 80041d2:	4413      	add	r3, r2
 80041d4:	3384      	adds	r3, #132	; 0x84
 80041d6:	461a      	mov	r2, r3
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d102      	bne.n	80041ec <LTDC_SetConfig+0x240>
  {
    tmp = 4U;
 80041e6:	2304      	movs	r3, #4
 80041e8:	61fb      	str	r3, [r7, #28]
 80041ea:	e01b      	b.n	8004224 <LTDC_SetConfig+0x278>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d102      	bne.n	80041fa <LTDC_SetConfig+0x24e>
  {
    tmp = 3U;
 80041f4:	2303      	movs	r3, #3
 80041f6:	61fb      	str	r3, [r7, #28]
 80041f8:	e014      	b.n	8004224 <LTDC_SetConfig+0x278>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d00b      	beq.n	800421a <LTDC_SetConfig+0x26e>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004206:	2b02      	cmp	r3, #2
 8004208:	d007      	beq.n	800421a <LTDC_SetConfig+0x26e>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800420e:	2b03      	cmp	r3, #3
 8004210:	d003      	beq.n	800421a <LTDC_SetConfig+0x26e>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004216:	2b07      	cmp	r3, #7
 8004218:	d102      	bne.n	8004220 <LTDC_SetConfig+0x274>
  {
    tmp = 2U;
 800421a:	2302      	movs	r3, #2
 800421c:	61fb      	str	r3, [r7, #28]
 800421e:	e001      	b.n	8004224 <LTDC_SetConfig+0x278>
  }
  else
  {
    tmp = 1U;
 8004220:	2301      	movs	r3, #1
 8004222:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	461a      	mov	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	01db      	lsls	r3, r3, #7
 800422e:	4413      	add	r3, r2
 8004230:	3384      	adds	r3, #132	; 0x84
 8004232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	4611      	mov	r1, r2
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	01d2      	lsls	r2, r2, #7
 800423e:	440a      	add	r2, r1
 8004240:	3284      	adds	r2, #132	; 0x84
 8004242:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004246:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424c:	69fa      	ldr	r2, [r7, #28]
 800424e:	fb02 f303 	mul.w	r3, r2, r3
 8004252:	041a      	lsls	r2, r3, #16
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	6859      	ldr	r1, [r3, #4]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	1acb      	subs	r3, r1, r3
 800425e:	69f9      	ldr	r1, [r7, #28]
 8004260:	fb01 f303 	mul.w	r3, r1, r3
 8004264:	3303      	adds	r3, #3
 8004266:	68f9      	ldr	r1, [r7, #12]
 8004268:	6809      	ldr	r1, [r1, #0]
 800426a:	4608      	mov	r0, r1
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	01c9      	lsls	r1, r1, #7
 8004270:	4401      	add	r1, r0
 8004272:	3184      	adds	r1, #132	; 0x84
 8004274:	4313      	orrs	r3, r2
 8004276:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	461a      	mov	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	01db      	lsls	r3, r3, #7
 8004282:	4413      	add	r3, r2
 8004284:	3384      	adds	r3, #132	; 0x84
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	6812      	ldr	r2, [r2, #0]
 800428c:	4611      	mov	r1, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	01d2      	lsls	r2, r2, #7
 8004292:	440a      	add	r2, r1
 8004294:	3284      	adds	r2, #132	; 0x84
 8004296:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800429a:	f023 0307 	bic.w	r3, r3, #7
 800429e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	461a      	mov	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	01db      	lsls	r3, r3, #7
 80042aa:	4413      	add	r3, r2
 80042ac:	3384      	adds	r3, #132	; 0x84
 80042ae:	461a      	mov	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	01db      	lsls	r3, r3, #7
 80042c0:	4413      	add	r3, r2
 80042c2:	3384      	adds	r3, #132	; 0x84
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	6812      	ldr	r2, [r2, #0]
 80042ca:	4611      	mov	r1, r2
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	01d2      	lsls	r2, r2, #7
 80042d0:	440a      	add	r2, r1
 80042d2:	3284      	adds	r2, #132	; 0x84
 80042d4:	f043 0301 	orr.w	r3, r3, #1
 80042d8:	6013      	str	r3, [r2, #0]
}
 80042da:	bf00      	nop
 80042dc:	3724      	adds	r7, #36	; 0x24
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
	...

080042e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80042f2:	2300      	movs	r3, #0
 80042f4:	603b      	str	r3, [r7, #0]
 80042f6:	4b20      	ldr	r3, [pc, #128]	; (8004378 <HAL_PWREx_EnableOverDrive+0x90>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	4a1f      	ldr	r2, [pc, #124]	; (8004378 <HAL_PWREx_EnableOverDrive+0x90>)
 80042fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004300:	6413      	str	r3, [r2, #64]	; 0x40
 8004302:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <HAL_PWREx_EnableOverDrive+0x90>)
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800430e:	4b1b      	ldr	r3, [pc, #108]	; (800437c <HAL_PWREx_EnableOverDrive+0x94>)
 8004310:	2201      	movs	r2, #1
 8004312:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004314:	f7ff f8fa 	bl	800350c <HAL_GetTick>
 8004318:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800431a:	e009      	b.n	8004330 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800431c:	f7ff f8f6 	bl	800350c <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800432a:	d901      	bls.n	8004330 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e01f      	b.n	8004370 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004330:	4b13      	ldr	r3, [pc, #76]	; (8004380 <HAL_PWREx_EnableOverDrive+0x98>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800433c:	d1ee      	bne.n	800431c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800433e:	4b11      	ldr	r3, [pc, #68]	; (8004384 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004340:	2201      	movs	r2, #1
 8004342:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004344:	f7ff f8e2 	bl	800350c <HAL_GetTick>
 8004348:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800434a:	e009      	b.n	8004360 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800434c:	f7ff f8de 	bl	800350c <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800435a:	d901      	bls.n	8004360 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e007      	b.n	8004370 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004360:	4b07      	ldr	r3, [pc, #28]	; (8004380 <HAL_PWREx_EnableOverDrive+0x98>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004368:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800436c:	d1ee      	bne.n	800434c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40023800 	.word	0x40023800
 800437c:	420e0040 	.word	0x420e0040
 8004380:	40007000 	.word	0x40007000
 8004384:	420e0044 	.word	0x420e0044

08004388 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e264      	b.n	8004864 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d075      	beq.n	8004492 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043a6:	4ba3      	ldr	r3, [pc, #652]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 030c 	and.w	r3, r3, #12
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d00c      	beq.n	80043cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043b2:	4ba0      	ldr	r3, [pc, #640]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d112      	bne.n	80043e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043be:	4b9d      	ldr	r3, [pc, #628]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ca:	d10b      	bne.n	80043e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043cc:	4b99      	ldr	r3, [pc, #612]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d05b      	beq.n	8004490 <HAL_RCC_OscConfig+0x108>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d157      	bne.n	8004490 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e23f      	b.n	8004864 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ec:	d106      	bne.n	80043fc <HAL_RCC_OscConfig+0x74>
 80043ee:	4b91      	ldr	r3, [pc, #580]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a90      	ldr	r2, [pc, #576]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80043f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	e01d      	b.n	8004438 <HAL_RCC_OscConfig+0xb0>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004404:	d10c      	bne.n	8004420 <HAL_RCC_OscConfig+0x98>
 8004406:	4b8b      	ldr	r3, [pc, #556]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a8a      	ldr	r2, [pc, #552]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 800440c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	4b88      	ldr	r3, [pc, #544]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a87      	ldr	r2, [pc, #540]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	e00b      	b.n	8004438 <HAL_RCC_OscConfig+0xb0>
 8004420:	4b84      	ldr	r3, [pc, #528]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a83      	ldr	r2, [pc, #524]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	4b81      	ldr	r3, [pc, #516]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a80      	ldr	r2, [pc, #512]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d013      	beq.n	8004468 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004440:	f7ff f864 	bl	800350c <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004448:	f7ff f860 	bl	800350c <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b64      	cmp	r3, #100	; 0x64
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e204      	b.n	8004864 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800445a:	4b76      	ldr	r3, [pc, #472]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f0      	beq.n	8004448 <HAL_RCC_OscConfig+0xc0>
 8004466:	e014      	b.n	8004492 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004468:	f7ff f850 	bl	800350c <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004470:	f7ff f84c 	bl	800350c <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b64      	cmp	r3, #100	; 0x64
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e1f0      	b.n	8004864 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004482:	4b6c      	ldr	r3, [pc, #432]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f0      	bne.n	8004470 <HAL_RCC_OscConfig+0xe8>
 800448e:	e000      	b.n	8004492 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d063      	beq.n	8004566 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800449e:	4b65      	ldr	r3, [pc, #404]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 030c 	and.w	r3, r3, #12
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00b      	beq.n	80044c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044aa:	4b62      	ldr	r3, [pc, #392]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044b2:	2b08      	cmp	r3, #8
 80044b4:	d11c      	bne.n	80044f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044b6:	4b5f      	ldr	r3, [pc, #380]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d116      	bne.n	80044f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044c2:	4b5c      	ldr	r3, [pc, #368]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d005      	beq.n	80044da <HAL_RCC_OscConfig+0x152>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d001      	beq.n	80044da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e1c4      	b.n	8004864 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044da:	4b56      	ldr	r3, [pc, #344]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	4952      	ldr	r1, [pc, #328]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ee:	e03a      	b.n	8004566 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d020      	beq.n	800453a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044f8:	4b4f      	ldr	r3, [pc, #316]	; (8004638 <HAL_RCC_OscConfig+0x2b0>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fe:	f7ff f805 	bl	800350c <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004506:	f7ff f801 	bl	800350c <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e1a5      	b.n	8004864 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004518:	4b46      	ldr	r3, [pc, #280]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0f0      	beq.n	8004506 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004524:	4b43      	ldr	r3, [pc, #268]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	4940      	ldr	r1, [pc, #256]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004534:	4313      	orrs	r3, r2
 8004536:	600b      	str	r3, [r1, #0]
 8004538:	e015      	b.n	8004566 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800453a:	4b3f      	ldr	r3, [pc, #252]	; (8004638 <HAL_RCC_OscConfig+0x2b0>)
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004540:	f7fe ffe4 	bl	800350c <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004548:	f7fe ffe0 	bl	800350c <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e184      	b.n	8004864 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800455a:	4b36      	ldr	r3, [pc, #216]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1f0      	bne.n	8004548 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d030      	beq.n	80045d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d016      	beq.n	80045a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800457a:	4b30      	ldr	r3, [pc, #192]	; (800463c <HAL_RCC_OscConfig+0x2b4>)
 800457c:	2201      	movs	r2, #1
 800457e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004580:	f7fe ffc4 	bl	800350c <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004588:	f7fe ffc0 	bl	800350c <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e164      	b.n	8004864 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800459a:	4b26      	ldr	r3, [pc, #152]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 800459c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCC_OscConfig+0x200>
 80045a6:	e015      	b.n	80045d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045a8:	4b24      	ldr	r3, [pc, #144]	; (800463c <HAL_RCC_OscConfig+0x2b4>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ae:	f7fe ffad 	bl	800350c <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045b6:	f7fe ffa9 	bl	800350c <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e14d      	b.n	8004864 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c8:	4b1a      	ldr	r3, [pc, #104]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80045ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1f0      	bne.n	80045b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 80a0 	beq.w	8004722 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045e2:	2300      	movs	r3, #0
 80045e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045e6:	4b13      	ldr	r3, [pc, #76]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10f      	bne.n	8004612 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045f2:	2300      	movs	r3, #0
 80045f4:	60bb      	str	r3, [r7, #8]
 80045f6:	4b0f      	ldr	r3, [pc, #60]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	4a0e      	ldr	r2, [pc, #56]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80045fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004600:	6413      	str	r3, [r2, #64]	; 0x40
 8004602:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460a:	60bb      	str	r3, [r7, #8]
 800460c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800460e:	2301      	movs	r3, #1
 8004610:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004612:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <HAL_RCC_OscConfig+0x2b8>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461a:	2b00      	cmp	r3, #0
 800461c:	d121      	bne.n	8004662 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800461e:	4b08      	ldr	r3, [pc, #32]	; (8004640 <HAL_RCC_OscConfig+0x2b8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a07      	ldr	r2, [pc, #28]	; (8004640 <HAL_RCC_OscConfig+0x2b8>)
 8004624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800462a:	f7fe ff6f 	bl	800350c <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004630:	e011      	b.n	8004656 <HAL_RCC_OscConfig+0x2ce>
 8004632:	bf00      	nop
 8004634:	40023800 	.word	0x40023800
 8004638:	42470000 	.word	0x42470000
 800463c:	42470e80 	.word	0x42470e80
 8004640:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004644:	f7fe ff62 	bl	800350c <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e106      	b.n	8004864 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004656:	4b85      	ldr	r3, [pc, #532]	; (800486c <HAL_RCC_OscConfig+0x4e4>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f0      	beq.n	8004644 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d106      	bne.n	8004678 <HAL_RCC_OscConfig+0x2f0>
 800466a:	4b81      	ldr	r3, [pc, #516]	; (8004870 <HAL_RCC_OscConfig+0x4e8>)
 800466c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466e:	4a80      	ldr	r2, [pc, #512]	; (8004870 <HAL_RCC_OscConfig+0x4e8>)
 8004670:	f043 0301 	orr.w	r3, r3, #1
 8004674:	6713      	str	r3, [r2, #112]	; 0x70
 8004676:	e01c      	b.n	80046b2 <HAL_RCC_OscConfig+0x32a>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	2b05      	cmp	r3, #5
 800467e:	d10c      	bne.n	800469a <HAL_RCC_OscConfig+0x312>
 8004680:	4b7b      	ldr	r3, [pc, #492]	; (8004870 <HAL_RCC_OscConfig+0x4e8>)
 8004682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004684:	4a7a      	ldr	r2, [pc, #488]	; (8004870 <HAL_RCC_OscConfig+0x4e8>)
 8004686:	f043 0304 	orr.w	r3, r3, #4
 800468a:	6713      	str	r3, [r2, #112]	; 0x70
 800468c:	4b78      	ldr	r3, [pc, #480]	; (8004870 <HAL_RCC_OscConfig+0x4e8>)
 800468e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004690:	4a77      	ldr	r2, [pc, #476]	; (8004870 <HAL_RCC_OscConfig+0x4e8>)
 8004692:	f043 0301 	orr.w	r3, r3, #1
 8004696:	6713      	str	r3, [r2, #112]	; 0x70
 8004698:	e00b      	b.n	80046b2 <HAL_RCC_OscConfig+0x32a>
 800469a:	4b75      	ldr	r3, [pc, #468]	; (8004870 <HAL_RCC_OscConfig+0x4e8>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469e:	4a74      	ldr	r2, [pc, #464]	; (8004870 <HAL_RCC_OscConfig+0x4e8>)
 80046a0:	f023 0301 	bic.w	r3, r3, #1
 80046a4:	6713      	str	r3, [r2, #112]	; 0x70
 80046a6:	4b72      	ldr	r3, [pc, #456]	; (8004870 <HAL_RCC_OscConfig+0x4e8>)
 80046a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046aa:	4a71      	ldr	r2, [pc, #452]	; (8004870 <HAL_RCC_OscConfig+0x4e8>)
 80046ac:	f023 0304 	bic.w	r3, r3, #4
 80046b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d015      	beq.n	80046e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ba:	f7fe ff27 	bl	800350c <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c0:	e00a      	b.n	80046d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046c2:	f7fe ff23 	bl	800350c <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e0c5      	b.n	8004864 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d8:	4b65      	ldr	r3, [pc, #404]	; (8004870 <HAL_RCC_OscConfig+0x4e8>)
 80046da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0ee      	beq.n	80046c2 <HAL_RCC_OscConfig+0x33a>
 80046e4:	e014      	b.n	8004710 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046e6:	f7fe ff11 	bl	800350c <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ec:	e00a      	b.n	8004704 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ee:	f7fe ff0d 	bl	800350c <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e0af      	b.n	8004864 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004704:	4b5a      	ldr	r3, [pc, #360]	; (8004870 <HAL_RCC_OscConfig+0x4e8>)
 8004706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1ee      	bne.n	80046ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004710:	7dfb      	ldrb	r3, [r7, #23]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d105      	bne.n	8004722 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004716:	4b56      	ldr	r3, [pc, #344]	; (8004870 <HAL_RCC_OscConfig+0x4e8>)
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	4a55      	ldr	r2, [pc, #340]	; (8004870 <HAL_RCC_OscConfig+0x4e8>)
 800471c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004720:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 809b 	beq.w	8004862 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800472c:	4b50      	ldr	r3, [pc, #320]	; (8004870 <HAL_RCC_OscConfig+0x4e8>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f003 030c 	and.w	r3, r3, #12
 8004734:	2b08      	cmp	r3, #8
 8004736:	d05c      	beq.n	80047f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	2b02      	cmp	r3, #2
 800473e:	d141      	bne.n	80047c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004740:	4b4c      	ldr	r3, [pc, #304]	; (8004874 <HAL_RCC_OscConfig+0x4ec>)
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004746:	f7fe fee1 	bl	800350c <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800474e:	f7fe fedd 	bl	800350c <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e081      	b.n	8004864 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004760:	4b43      	ldr	r3, [pc, #268]	; (8004870 <HAL_RCC_OscConfig+0x4e8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1f0      	bne.n	800474e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	431a      	orrs	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	019b      	lsls	r3, r3, #6
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004782:	085b      	lsrs	r3, r3, #1
 8004784:	3b01      	subs	r3, #1
 8004786:	041b      	lsls	r3, r3, #16
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478e:	061b      	lsls	r3, r3, #24
 8004790:	4937      	ldr	r1, [pc, #220]	; (8004870 <HAL_RCC_OscConfig+0x4e8>)
 8004792:	4313      	orrs	r3, r2
 8004794:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004796:	4b37      	ldr	r3, [pc, #220]	; (8004874 <HAL_RCC_OscConfig+0x4ec>)
 8004798:	2201      	movs	r2, #1
 800479a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800479c:	f7fe feb6 	bl	800350c <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a4:	f7fe feb2 	bl	800350c <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e056      	b.n	8004864 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b6:	4b2e      	ldr	r3, [pc, #184]	; (8004870 <HAL_RCC_OscConfig+0x4e8>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0f0      	beq.n	80047a4 <HAL_RCC_OscConfig+0x41c>
 80047c2:	e04e      	b.n	8004862 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c4:	4b2b      	ldr	r3, [pc, #172]	; (8004874 <HAL_RCC_OscConfig+0x4ec>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ca:	f7fe fe9f 	bl	800350c <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d0:	e008      	b.n	80047e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047d2:	f7fe fe9b 	bl	800350c <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d901      	bls.n	80047e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e03f      	b.n	8004864 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e4:	4b22      	ldr	r3, [pc, #136]	; (8004870 <HAL_RCC_OscConfig+0x4e8>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1f0      	bne.n	80047d2 <HAL_RCC_OscConfig+0x44a>
 80047f0:	e037      	b.n	8004862 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e032      	b.n	8004864 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047fe:	4b1c      	ldr	r3, [pc, #112]	; (8004870 <HAL_RCC_OscConfig+0x4e8>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d028      	beq.n	800485e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004816:	429a      	cmp	r2, r3
 8004818:	d121      	bne.n	800485e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004824:	429a      	cmp	r2, r3
 8004826:	d11a      	bne.n	800485e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800482e:	4013      	ands	r3, r2
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004834:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004836:	4293      	cmp	r3, r2
 8004838:	d111      	bne.n	800485e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004844:	085b      	lsrs	r3, r3, #1
 8004846:	3b01      	subs	r3, #1
 8004848:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800484a:	429a      	cmp	r2, r3
 800484c:	d107      	bne.n	800485e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004858:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800485a:	429a      	cmp	r2, r3
 800485c:	d001      	beq.n	8004862 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40007000 	.word	0x40007000
 8004870:	40023800 	.word	0x40023800
 8004874:	42470060 	.word	0x42470060

08004878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e0cc      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800488c:	4b68      	ldr	r3, [pc, #416]	; (8004a30 <HAL_RCC_ClockConfig+0x1b8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 030f 	and.w	r3, r3, #15
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d90c      	bls.n	80048b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489a:	4b65      	ldr	r3, [pc, #404]	; (8004a30 <HAL_RCC_ClockConfig+0x1b8>)
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a2:	4b63      	ldr	r3, [pc, #396]	; (8004a30 <HAL_RCC_ClockConfig+0x1b8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d001      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0b8      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d020      	beq.n	8004902 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d005      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048cc:	4b59      	ldr	r3, [pc, #356]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	4a58      	ldr	r2, [pc, #352]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d005      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048e4:	4b53      	ldr	r3, [pc, #332]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	4a52      	ldr	r2, [pc, #328]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048f0:	4b50      	ldr	r3, [pc, #320]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	494d      	ldr	r1, [pc, #308]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d044      	beq.n	8004998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d107      	bne.n	8004926 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004916:	4b47      	ldr	r3, [pc, #284]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d119      	bne.n	8004956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e07f      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b02      	cmp	r3, #2
 800492c:	d003      	beq.n	8004936 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004932:	2b03      	cmp	r3, #3
 8004934:	d107      	bne.n	8004946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004936:	4b3f      	ldr	r3, [pc, #252]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d109      	bne.n	8004956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e06f      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004946:	4b3b      	ldr	r3, [pc, #236]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e067      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004956:	4b37      	ldr	r3, [pc, #220]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f023 0203 	bic.w	r2, r3, #3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	4934      	ldr	r1, [pc, #208]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004964:	4313      	orrs	r3, r2
 8004966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004968:	f7fe fdd0 	bl	800350c <HAL_GetTick>
 800496c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496e:	e00a      	b.n	8004986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004970:	f7fe fdcc 	bl	800350c <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	f241 3288 	movw	r2, #5000	; 0x1388
 800497e:	4293      	cmp	r3, r2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e04f      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004986:	4b2b      	ldr	r3, [pc, #172]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 020c 	and.w	r2, r3, #12
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	429a      	cmp	r2, r3
 8004996:	d1eb      	bne.n	8004970 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004998:	4b25      	ldr	r3, [pc, #148]	; (8004a30 <HAL_RCC_ClockConfig+0x1b8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 030f 	and.w	r3, r3, #15
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d20c      	bcs.n	80049c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a6:	4b22      	ldr	r3, [pc, #136]	; (8004a30 <HAL_RCC_ClockConfig+0x1b8>)
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ae:	4b20      	ldr	r3, [pc, #128]	; (8004a30 <HAL_RCC_ClockConfig+0x1b8>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d001      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e032      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d008      	beq.n	80049de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049cc:	4b19      	ldr	r3, [pc, #100]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	4916      	ldr	r1, [pc, #88]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d009      	beq.n	80049fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ea:	4b12      	ldr	r3, [pc, #72]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	490e      	ldr	r1, [pc, #56]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049fe:	f000 f821 	bl	8004a44 <HAL_RCC_GetSysClockFreq>
 8004a02:	4602      	mov	r2, r0
 8004a04:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	091b      	lsrs	r3, r3, #4
 8004a0a:	f003 030f 	and.w	r3, r3, #15
 8004a0e:	490a      	ldr	r1, [pc, #40]	; (8004a38 <HAL_RCC_ClockConfig+0x1c0>)
 8004a10:	5ccb      	ldrb	r3, [r1, r3]
 8004a12:	fa22 f303 	lsr.w	r3, r2, r3
 8004a16:	4a09      	ldr	r2, [pc, #36]	; (8004a3c <HAL_RCC_ClockConfig+0x1c4>)
 8004a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a1a:	4b09      	ldr	r3, [pc, #36]	; (8004a40 <HAL_RCC_ClockConfig+0x1c8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fe fd30 	bl	8003484 <HAL_InitTick>

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40023c00 	.word	0x40023c00
 8004a34:	40023800 	.word	0x40023800
 8004a38:	08005998 	.word	0x08005998
 8004a3c:	20012c04 	.word	0x20012c04
 8004a40:	20012c08 	.word	0x20012c08

08004a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a48:	b084      	sub	sp, #16
 8004a4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	607b      	str	r3, [r7, #4]
 8004a50:	2300      	movs	r3, #0
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	2300      	movs	r3, #0
 8004a56:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a5c:	4b67      	ldr	r3, [pc, #412]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f003 030c 	and.w	r3, r3, #12
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d00d      	beq.n	8004a84 <HAL_RCC_GetSysClockFreq+0x40>
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	f200 80bd 	bhi.w	8004be8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <HAL_RCC_GetSysClockFreq+0x34>
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d003      	beq.n	8004a7e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a76:	e0b7      	b.n	8004be8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a78:	4b61      	ldr	r3, [pc, #388]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a7a:	60bb      	str	r3, [r7, #8]
       break;
 8004a7c:	e0b7      	b.n	8004bee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a7e:	4b61      	ldr	r3, [pc, #388]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004a80:	60bb      	str	r3, [r7, #8]
      break;
 8004a82:	e0b4      	b.n	8004bee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a84:	4b5d      	ldr	r3, [pc, #372]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a8e:	4b5b      	ldr	r3, [pc, #364]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d04d      	beq.n	8004b36 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a9a:	4b58      	ldr	r3, [pc, #352]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	099b      	lsrs	r3, r3, #6
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	f04f 0300 	mov.w	r3, #0
 8004aa6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004aaa:	f04f 0100 	mov.w	r1, #0
 8004aae:	ea02 0800 	and.w	r8, r2, r0
 8004ab2:	ea03 0901 	and.w	r9, r3, r1
 8004ab6:	4640      	mov	r0, r8
 8004ab8:	4649      	mov	r1, r9
 8004aba:	f04f 0200 	mov.w	r2, #0
 8004abe:	f04f 0300 	mov.w	r3, #0
 8004ac2:	014b      	lsls	r3, r1, #5
 8004ac4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ac8:	0142      	lsls	r2, r0, #5
 8004aca:	4610      	mov	r0, r2
 8004acc:	4619      	mov	r1, r3
 8004ace:	ebb0 0008 	subs.w	r0, r0, r8
 8004ad2:	eb61 0109 	sbc.w	r1, r1, r9
 8004ad6:	f04f 0200 	mov.w	r2, #0
 8004ada:	f04f 0300 	mov.w	r3, #0
 8004ade:	018b      	lsls	r3, r1, #6
 8004ae0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ae4:	0182      	lsls	r2, r0, #6
 8004ae6:	1a12      	subs	r2, r2, r0
 8004ae8:	eb63 0301 	sbc.w	r3, r3, r1
 8004aec:	f04f 0000 	mov.w	r0, #0
 8004af0:	f04f 0100 	mov.w	r1, #0
 8004af4:	00d9      	lsls	r1, r3, #3
 8004af6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004afa:	00d0      	lsls	r0, r2, #3
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	eb12 0208 	adds.w	r2, r2, r8
 8004b04:	eb43 0309 	adc.w	r3, r3, r9
 8004b08:	f04f 0000 	mov.w	r0, #0
 8004b0c:	f04f 0100 	mov.w	r1, #0
 8004b10:	0259      	lsls	r1, r3, #9
 8004b12:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004b16:	0250      	lsls	r0, r2, #9
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	4619      	mov	r1, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	461a      	mov	r2, r3
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	f7fb fb68 	bl	80001fc <__aeabi_uldivmod>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4613      	mov	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	e04a      	b.n	8004bcc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b36:	4b31      	ldr	r3, [pc, #196]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	099b      	lsrs	r3, r3, #6
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	f04f 0300 	mov.w	r3, #0
 8004b42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b46:	f04f 0100 	mov.w	r1, #0
 8004b4a:	ea02 0400 	and.w	r4, r2, r0
 8004b4e:	ea03 0501 	and.w	r5, r3, r1
 8004b52:	4620      	mov	r0, r4
 8004b54:	4629      	mov	r1, r5
 8004b56:	f04f 0200 	mov.w	r2, #0
 8004b5a:	f04f 0300 	mov.w	r3, #0
 8004b5e:	014b      	lsls	r3, r1, #5
 8004b60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b64:	0142      	lsls	r2, r0, #5
 8004b66:	4610      	mov	r0, r2
 8004b68:	4619      	mov	r1, r3
 8004b6a:	1b00      	subs	r0, r0, r4
 8004b6c:	eb61 0105 	sbc.w	r1, r1, r5
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	018b      	lsls	r3, r1, #6
 8004b7a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b7e:	0182      	lsls	r2, r0, #6
 8004b80:	1a12      	subs	r2, r2, r0
 8004b82:	eb63 0301 	sbc.w	r3, r3, r1
 8004b86:	f04f 0000 	mov.w	r0, #0
 8004b8a:	f04f 0100 	mov.w	r1, #0
 8004b8e:	00d9      	lsls	r1, r3, #3
 8004b90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b94:	00d0      	lsls	r0, r2, #3
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	1912      	adds	r2, r2, r4
 8004b9c:	eb45 0303 	adc.w	r3, r5, r3
 8004ba0:	f04f 0000 	mov.w	r0, #0
 8004ba4:	f04f 0100 	mov.w	r1, #0
 8004ba8:	0299      	lsls	r1, r3, #10
 8004baa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004bae:	0290      	lsls	r0, r2, #10
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	f7fb fb1c 	bl	80001fc <__aeabi_uldivmod>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4613      	mov	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bcc:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	0c1b      	lsrs	r3, r3, #16
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be4:	60bb      	str	r3, [r7, #8]
      break;
 8004be6:	e002      	b.n	8004bee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004be8:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004bea:	60bb      	str	r3, [r7, #8]
      break;
 8004bec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bee:	68bb      	ldr	r3, [r7, #8]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40023800 	.word	0x40023800
 8004c00:	00f42400 	.word	0x00f42400
 8004c04:	007a1200 	.word	0x007a1200

08004c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10b      	bne.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d105      	bne.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d075      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c3c:	4bad      	ldr	r3, [pc, #692]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c42:	f7fe fc63 	bl	800350c <HAL_GetTick>
 8004c46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c48:	e008      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c4a:	f7fe fc5f 	bl	800350c <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e18b      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c5c:	4ba6      	ldr	r3, [pc, #664]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1f0      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d009      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	019a      	lsls	r2, r3, #6
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	071b      	lsls	r3, r3, #28
 8004c80:	499d      	ldr	r1, [pc, #628]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d01f      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c94:	4b98      	ldr	r3, [pc, #608]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c9a:	0f1b      	lsrs	r3, r3, #28
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	019a      	lsls	r2, r3, #6
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	061b      	lsls	r3, r3, #24
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	071b      	lsls	r3, r3, #28
 8004cb4:	4990      	ldr	r1, [pc, #576]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004cbc:	4b8e      	ldr	r3, [pc, #568]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cc2:	f023 021f 	bic.w	r2, r3, #31
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	498a      	ldr	r1, [pc, #552]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00d      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	019a      	lsls	r2, r3, #6
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	061b      	lsls	r3, r3, #24
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	071b      	lsls	r3, r3, #28
 8004cf4:	4980      	ldr	r1, [pc, #512]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cfc:	4b7d      	ldr	r3, [pc, #500]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004cfe:	2201      	movs	r2, #1
 8004d00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d02:	f7fe fc03 	bl	800350c <HAL_GetTick>
 8004d06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d08:	e008      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d0a:	f7fe fbff 	bl	800350c <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e12b      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d1c:	4b76      	ldr	r3, [pc, #472]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0f0      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d105      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d079      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d40:	4b6e      	ldr	r3, [pc, #440]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d46:	f7fe fbe1 	bl	800350c <HAL_GetTick>
 8004d4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d4c:	e008      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004d4e:	f7fe fbdd 	bl	800350c <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e109      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d60:	4b65      	ldr	r3, [pc, #404]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d6c:	d0ef      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d020      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d7a:	4b5f      	ldr	r3, [pc, #380]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d80:	0f1b      	lsrs	r3, r3, #28
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	019a      	lsls	r2, r3, #6
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	061b      	lsls	r3, r3, #24
 8004d94:	431a      	orrs	r2, r3
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	071b      	lsls	r3, r3, #28
 8004d9a:	4957      	ldr	r1, [pc, #348]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004da2:	4b55      	ldr	r3, [pc, #340]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004da8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	3b01      	subs	r3, #1
 8004db2:	021b      	lsls	r3, r3, #8
 8004db4:	4950      	ldr	r1, [pc, #320]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0308 	and.w	r3, r3, #8
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d01e      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004dc8:	4b4b      	ldr	r3, [pc, #300]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dce:	0e1b      	lsrs	r3, r3, #24
 8004dd0:	f003 030f 	and.w	r3, r3, #15
 8004dd4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	019a      	lsls	r2, r3, #6
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	061b      	lsls	r3, r3, #24
 8004de0:	431a      	orrs	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	071b      	lsls	r3, r3, #28
 8004de8:	4943      	ldr	r1, [pc, #268]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004df0:	4b41      	ldr	r3, [pc, #260]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004df6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	493e      	ldr	r1, [pc, #248]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e06:	4b3d      	ldr	r3, [pc, #244]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e0c:	f7fe fb7e 	bl	800350c <HAL_GetTick>
 8004e10:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004e14:	f7fe fb7a 	bl	800350c <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e0a6      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e26:	4b34      	ldr	r3, [pc, #208]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e32:	d1ef      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0320 	and.w	r3, r3, #32
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 808d 	beq.w	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e42:	2300      	movs	r3, #0
 8004e44:	60fb      	str	r3, [r7, #12]
 8004e46:	4b2c      	ldr	r3, [pc, #176]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	4a2b      	ldr	r2, [pc, #172]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e50:	6413      	str	r3, [r2, #64]	; 0x40
 8004e52:	4b29      	ldr	r3, [pc, #164]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e5e:	4b28      	ldr	r3, [pc, #160]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a27      	ldr	r2, [pc, #156]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e68:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e6a:	f7fe fb4f 	bl	800350c <HAL_GetTick>
 8004e6e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e70:	e008      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e72:	f7fe fb4b 	bl	800350c <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e077      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e84:	4b1e      	ldr	r3, [pc, #120]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0f0      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e90:	4b19      	ldr	r3, [pc, #100]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e98:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d039      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d032      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004eae:	4b12      	ldr	r3, [pc, #72]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eb8:	4b12      	ldr	r3, [pc, #72]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004eba:	2201      	movs	r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ebe:	4b11      	ldr	r3, [pc, #68]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ec4:	4a0c      	ldr	r2, [pc, #48]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004eca:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d11e      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ed6:	f7fe fb19 	bl	800350c <HAL_GetTick>
 8004eda:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004edc:	e014      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ede:	f7fe fb15 	bl	800350c <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d90b      	bls.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e03f      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8004ef4:	42470068 	.word	0x42470068
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	42470070 	.word	0x42470070
 8004f00:	40007000 	.word	0x40007000
 8004f04:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f08:	4b1c      	ldr	r3, [pc, #112]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0e4      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f20:	d10d      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004f22:	4b16      	ldr	r3, [pc, #88]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f36:	4911      	ldr	r1, [pc, #68]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	608b      	str	r3, [r1, #8]
 8004f3c:	e005      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004f3e:	4b0f      	ldr	r3, [pc, #60]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	4a0e      	ldr	r2, [pc, #56]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f44:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f48:	6093      	str	r3, [r2, #8]
 8004f4a:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f56:	4909      	ldr	r1, [pc, #36]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0310 	and.w	r3, r3, #16
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d004      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004f6e:	4b04      	ldr	r3, [pc, #16]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004f70:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	40023800 	.word	0x40023800
 8004f80:	424711e0 	.word	0x424711e0

08004f84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e056      	b.n	8005044 <HAL_SPI_Init+0xc0>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d106      	bne.n	8004fb6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7fe f96b 	bl	800328c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2202      	movs	r2, #2
 8004fba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fcc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	ea42 0103 	orr.w	r1, r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	0c1b      	lsrs	r3, r3, #16
 8005014:	f003 0104 	and.w	r1, r3, #4
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	69da      	ldr	r2, [r3, #28]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005032:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b08a      	sub	sp, #40	; 0x28
 8005050:	af02      	add	r7, sp, #8
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	603b      	str	r3, [r7, #0]
 8005058:	4613      	mov	r3, r2
 800505a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005060:	2300      	movs	r3, #0
 8005062:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800506a:	2b01      	cmp	r3, #1
 800506c:	d101      	bne.n	8005072 <HAL_SPI_Transmit+0x26>
 800506e:	2302      	movs	r3, #2
 8005070:	e125      	b.n	80052be <HAL_SPI_Transmit+0x272>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800507a:	f7fe fa47 	bl	800350c <HAL_GetTick>
 800507e:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b01      	cmp	r3, #1
 800508a:	d002      	beq.n	8005092 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800508c:	2302      	movs	r3, #2
 800508e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005090:	e10c      	b.n	80052ac <HAL_SPI_Transmit+0x260>
  }

  if((pData == NULL ) || (Size == 0))
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <HAL_SPI_Transmit+0x52>
 8005098:	88fb      	ldrh	r3, [r7, #6]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d102      	bne.n	80050a4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050a2:	e103      	b.n	80052ac <HAL_SPI_Transmit+0x260>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2203      	movs	r2, #3
 80050a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	88fa      	ldrh	r2, [r7, #6]
 80050bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	88fa      	ldrh	r2, [r7, #6]
 80050c2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ea:	d107      	bne.n	80050fc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005106:	2b40      	cmp	r3, #64	; 0x40
 8005108:	d007      	beq.n	800511a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005118:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005122:	d147      	bne.n	80051b4 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d004      	beq.n	8005136 <HAL_SPI_Transmit+0xea>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005130:	b29b      	uxth	r3, r3
 8005132:	2b01      	cmp	r3, #1
 8005134:	d138      	bne.n	80051a8 <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	881a      	ldrh	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	3302      	adds	r3, #2
 8005144:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800514a:	b29b      	uxth	r3, r3
 800514c:	3b01      	subs	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005154:	e028      	b.n	80051a8 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b02      	cmp	r3, #2
 8005162:	d10f      	bne.n	8005184 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	881a      	ldrh	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	3302      	adds	r3, #2
 8005172:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005178:	b29b      	uxth	r3, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	86da      	strh	r2, [r3, #54]	; 0x36
 8005182:	e011      	b.n	80051a8 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00b      	beq.n	80051a2 <HAL_SPI_Transmit+0x156>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005190:	d00a      	beq.n	80051a8 <HAL_SPI_Transmit+0x15c>
 8005192:	f7fe f9bb 	bl	800350c <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d802      	bhi.n	80051a8 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051a6:	e081      	b.n	80052ac <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1d1      	bne.n	8005156 <HAL_SPI_Transmit+0x10a>
 80051b2:	e048      	b.n	8005246 <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d004      	beq.n	80051c6 <HAL_SPI_Transmit+0x17a>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d13a      	bne.n	800523c <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	330c      	adds	r3, #12
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	7812      	ldrb	r2, [r2, #0]
 80051d0:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	3301      	adds	r3, #1
 80051d6:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80051e6:	e029      	b.n	800523c <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d110      	bne.n	8005218 <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	330c      	adds	r3, #12
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	7812      	ldrb	r2, [r2, #0]
 8005200:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	3301      	adds	r3, #1
 8005206:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	86da      	strh	r2, [r3, #54]	; 0x36
 8005216:	e011      	b.n	800523c <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00b      	beq.n	8005236 <HAL_SPI_Transmit+0x1ea>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005224:	d00a      	beq.n	800523c <HAL_SPI_Transmit+0x1f0>
 8005226:	f7fe f971 	bl	800350c <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	429a      	cmp	r2, r3
 8005234:	d802      	bhi.n	800523c <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	77fb      	strb	r3, [r7, #31]
          goto error;
 800523a:	e037      	b.n	80052ac <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1d0      	bne.n	80051e8 <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2201      	movs	r2, #1
 800524e:	2102      	movs	r1, #2
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 f838 	bl	80052c6 <SPI_WaitFlagStateUntilTimeout>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005260:	e024      	b.n	80052ac <HAL_SPI_Transmit+0x260>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	6839      	ldr	r1, [r7, #0]
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 f896 	bl	8005398 <SPI_CheckFlag_BSY>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d005      	beq.n	800527e <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2220      	movs	r2, #32
 800527a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800527c:	e016      	b.n	80052ac <HAL_SPI_Transmit+0x260>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10a      	bne.n	800529c <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005286:	2300      	movs	r3, #0
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	617b      	str	r3, [r7, #20]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	617b      	str	r3, [r7, #20]
 800529a:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d002      	beq.n	80052aa <HAL_SPI_Transmit+0x25e>
  {
    errorcode = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	77fb      	strb	r3, [r7, #31]
 80052a8:	e000      	b.n	80052ac <HAL_SPI_Transmit+0x260>
  }

error:
 80052aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3720      	adds	r7, #32
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b084      	sub	sp, #16
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	607a      	str	r2, [r7, #4]
 80052d2:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80052d4:	e04d      	b.n	8005372 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052dc:	d049      	beq.n	8005372 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d007      	beq.n	80052f4 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80052e4:	f7fe f912 	bl	800350c <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d83e      	bhi.n	8005372 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005302:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800530c:	d111      	bne.n	8005332 <SPI_WaitFlagStateUntilTimeout+0x6c>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005316:	d004      	beq.n	8005322 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005320:	d107      	bne.n	8005332 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005330:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800533a:	d110      	bne.n	800535e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6819      	ldr	r1, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800534a:	400b      	ands	r3, r1
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800535c:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e00e      	b.n	8005390 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	4013      	ands	r3, r2
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	429a      	cmp	r2, r3
 8005380:	d101      	bne.n	8005386 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8005382:	2201      	movs	r2, #1
 8005384:	e000      	b.n	8005388 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8005386:	2200      	movs	r2, #0
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	429a      	cmp	r2, r3
 800538c:	d1a3      	bne.n	80052d6 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af02      	add	r7, sp, #8
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2200      	movs	r2, #0
 80053ac:	2180      	movs	r1, #128	; 0x80
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f7ff ff89 	bl	80052c6 <SPI_WaitFlagStateUntilTimeout>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d007      	beq.n	80053ca <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053be:	f043 0220 	orr.w	r2, r3, #32
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e000      	b.n	80053cc <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <__libc_init_array>:
 80053d4:	b570      	push	{r4, r5, r6, lr}
 80053d6:	4d0d      	ldr	r5, [pc, #52]	; (800540c <__libc_init_array+0x38>)
 80053d8:	4c0d      	ldr	r4, [pc, #52]	; (8005410 <__libc_init_array+0x3c>)
 80053da:	1b64      	subs	r4, r4, r5
 80053dc:	10a4      	asrs	r4, r4, #2
 80053de:	2600      	movs	r6, #0
 80053e0:	42a6      	cmp	r6, r4
 80053e2:	d109      	bne.n	80053f8 <__libc_init_array+0x24>
 80053e4:	4d0b      	ldr	r5, [pc, #44]	; (8005414 <__libc_init_array+0x40>)
 80053e6:	4c0c      	ldr	r4, [pc, #48]	; (8005418 <__libc_init_array+0x44>)
 80053e8:	f000 f87c 	bl	80054e4 <_init>
 80053ec:	1b64      	subs	r4, r4, r5
 80053ee:	10a4      	asrs	r4, r4, #2
 80053f0:	2600      	movs	r6, #0
 80053f2:	42a6      	cmp	r6, r4
 80053f4:	d105      	bne.n	8005402 <__libc_init_array+0x2e>
 80053f6:	bd70      	pop	{r4, r5, r6, pc}
 80053f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053fc:	4798      	blx	r3
 80053fe:	3601      	adds	r6, #1
 8005400:	e7ee      	b.n	80053e0 <__libc_init_array+0xc>
 8005402:	f855 3b04 	ldr.w	r3, [r5], #4
 8005406:	4798      	blx	r3
 8005408:	3601      	adds	r6, #1
 800540a:	e7f2      	b.n	80053f2 <__libc_init_array+0x1e>
 800540c:	080059d8 	.word	0x080059d8
 8005410:	080059d8 	.word	0x080059d8
 8005414:	080059d8 	.word	0x080059d8
 8005418:	080059dc 	.word	0x080059dc

0800541c <__itoa>:
 800541c:	1e93      	subs	r3, r2, #2
 800541e:	2b22      	cmp	r3, #34	; 0x22
 8005420:	b510      	push	{r4, lr}
 8005422:	460c      	mov	r4, r1
 8005424:	d904      	bls.n	8005430 <__itoa+0x14>
 8005426:	2300      	movs	r3, #0
 8005428:	700b      	strb	r3, [r1, #0]
 800542a:	461c      	mov	r4, r3
 800542c:	4620      	mov	r0, r4
 800542e:	bd10      	pop	{r4, pc}
 8005430:	2a0a      	cmp	r2, #10
 8005432:	d109      	bne.n	8005448 <__itoa+0x2c>
 8005434:	2800      	cmp	r0, #0
 8005436:	da07      	bge.n	8005448 <__itoa+0x2c>
 8005438:	232d      	movs	r3, #45	; 0x2d
 800543a:	700b      	strb	r3, [r1, #0]
 800543c:	4240      	negs	r0, r0
 800543e:	2101      	movs	r1, #1
 8005440:	4421      	add	r1, r4
 8005442:	f000 f80d 	bl	8005460 <__utoa>
 8005446:	e7f1      	b.n	800542c <__itoa+0x10>
 8005448:	2100      	movs	r1, #0
 800544a:	e7f9      	b.n	8005440 <__itoa+0x24>

0800544c <itoa>:
 800544c:	f7ff bfe6 	b.w	800541c <__itoa>

08005450 <memset>:
 8005450:	4402      	add	r2, r0
 8005452:	4603      	mov	r3, r0
 8005454:	4293      	cmp	r3, r2
 8005456:	d100      	bne.n	800545a <memset+0xa>
 8005458:	4770      	bx	lr
 800545a:	f803 1b01 	strb.w	r1, [r3], #1
 800545e:	e7f9      	b.n	8005454 <memset+0x4>

08005460 <__utoa>:
 8005460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005462:	4c1f      	ldr	r4, [pc, #124]	; (80054e0 <__utoa+0x80>)
 8005464:	b08b      	sub	sp, #44	; 0x2c
 8005466:	4605      	mov	r5, r0
 8005468:	460b      	mov	r3, r1
 800546a:	466e      	mov	r6, sp
 800546c:	f104 0c20 	add.w	ip, r4, #32
 8005470:	6820      	ldr	r0, [r4, #0]
 8005472:	6861      	ldr	r1, [r4, #4]
 8005474:	4637      	mov	r7, r6
 8005476:	c703      	stmia	r7!, {r0, r1}
 8005478:	3408      	adds	r4, #8
 800547a:	4564      	cmp	r4, ip
 800547c:	463e      	mov	r6, r7
 800547e:	d1f7      	bne.n	8005470 <__utoa+0x10>
 8005480:	7921      	ldrb	r1, [r4, #4]
 8005482:	7139      	strb	r1, [r7, #4]
 8005484:	1e91      	subs	r1, r2, #2
 8005486:	6820      	ldr	r0, [r4, #0]
 8005488:	6038      	str	r0, [r7, #0]
 800548a:	2922      	cmp	r1, #34	; 0x22
 800548c:	f04f 0100 	mov.w	r1, #0
 8005490:	d904      	bls.n	800549c <__utoa+0x3c>
 8005492:	7019      	strb	r1, [r3, #0]
 8005494:	460b      	mov	r3, r1
 8005496:	4618      	mov	r0, r3
 8005498:	b00b      	add	sp, #44	; 0x2c
 800549a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800549c:	1e58      	subs	r0, r3, #1
 800549e:	4684      	mov	ip, r0
 80054a0:	fbb5 f7f2 	udiv	r7, r5, r2
 80054a4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80054a8:	fb02 5617 	mls	r6, r2, r7, r5
 80054ac:	4476      	add	r6, lr
 80054ae:	460c      	mov	r4, r1
 80054b0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80054b4:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80054b8:	462e      	mov	r6, r5
 80054ba:	42b2      	cmp	r2, r6
 80054bc:	f101 0101 	add.w	r1, r1, #1
 80054c0:	463d      	mov	r5, r7
 80054c2:	d9ed      	bls.n	80054a0 <__utoa+0x40>
 80054c4:	2200      	movs	r2, #0
 80054c6:	545a      	strb	r2, [r3, r1]
 80054c8:	1919      	adds	r1, r3, r4
 80054ca:	1aa5      	subs	r5, r4, r2
 80054cc:	42aa      	cmp	r2, r5
 80054ce:	dae2      	bge.n	8005496 <__utoa+0x36>
 80054d0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80054d4:	780e      	ldrb	r6, [r1, #0]
 80054d6:	7006      	strb	r6, [r0, #0]
 80054d8:	3201      	adds	r2, #1
 80054da:	f801 5901 	strb.w	r5, [r1], #-1
 80054de:	e7f4      	b.n	80054ca <__utoa+0x6a>
 80054e0:	080059a8 	.word	0x080059a8

080054e4 <_init>:
 80054e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e6:	bf00      	nop
 80054e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ea:	bc08      	pop	{r3}
 80054ec:	469e      	mov	lr, r3
 80054ee:	4770      	bx	lr

080054f0 <_fini>:
 80054f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f2:	bf00      	nop
 80054f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054f6:	bc08      	pop	{r3}
 80054f8:	469e      	mov	lr, r3
 80054fa:	4770      	bx	lr
