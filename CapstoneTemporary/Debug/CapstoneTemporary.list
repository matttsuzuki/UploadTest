
CapstoneTemporary.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000457c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08004728  08004728  00014728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b38  08004b38  00032c10  2**0
                  CONTENTS
  4 .ARM          00000008  08004b38  08004b38  00014b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b40  08004b40  00032c10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b40  08004b40  00014b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b44  08004b44  00014b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00012c10  20000000  08004b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20012c10  08017758  00032c10  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012d34  08017758  00032d34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032c10  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce26  00000000  00000000  00032c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002079  00000000  00000000  0003fa66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  00041ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  00042558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024052  00000000  00000000  00042ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbdb  00000000  00000000  00066efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3ac2  00000000  00000000  00074ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00148597  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000289c  00000000  00000000  001485ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20012c10 	.word	0x20012c10
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004710 	.word	0x08004710

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20012c14 	.word	0x20012c14
 80001e8:	08004710 	.word	0x08004710

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b087      	sub	sp, #28
 80004e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	617b      	str	r3, [r7, #20]
 80004ee:	4b2c      	ldr	r3, [pc, #176]	; (80005a0 <MX_GPIO_Init+0xbc>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a2b      	ldr	r2, [pc, #172]	; (80005a0 <MX_GPIO_Init+0xbc>)
 80004f4:	f043 0320 	orr.w	r3, r3, #32
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
 80004fa:	4b29      	ldr	r3, [pc, #164]	; (80005a0 <MX_GPIO_Init+0xbc>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	f003 0320 	and.w	r3, r3, #32
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	613b      	str	r3, [r7, #16]
 800050a:	4b25      	ldr	r3, [pc, #148]	; (80005a0 <MX_GPIO_Init+0xbc>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a24      	ldr	r2, [pc, #144]	; (80005a0 <MX_GPIO_Init+0xbc>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
 8000516:	4b22      	ldr	r3, [pc, #136]	; (80005a0 <MX_GPIO_Init+0xbc>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	613b      	str	r3, [r7, #16]
 8000520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	4b1e      	ldr	r3, [pc, #120]	; (80005a0 <MX_GPIO_Init+0xbc>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	4a1d      	ldr	r2, [pc, #116]	; (80005a0 <MX_GPIO_Init+0xbc>)
 800052c:	f043 0302 	orr.w	r3, r3, #2
 8000530:	6313      	str	r3, [r2, #48]	; 0x30
 8000532:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <MX_GPIO_Init+0xbc>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f003 0302 	and.w	r3, r3, #2
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <MX_GPIO_Init+0xbc>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a16      	ldr	r2, [pc, #88]	; (80005a0 <MX_GPIO_Init+0xbc>)
 8000548:	f043 0310 	orr.w	r3, r3, #16
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <MX_GPIO_Init+0xbc>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f003 0310 	and.w	r3, r3, #16
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <MX_GPIO_Init+0xbc>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a0f      	ldr	r2, [pc, #60]	; (80005a0 <MX_GPIO_Init+0xbc>)
 8000564:	f043 0308 	orr.w	r3, r3, #8
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <MX_GPIO_Init+0xbc>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0308 	and.w	r3, r3, #8
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	603b      	str	r3, [r7, #0]
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <MX_GPIO_Init+0xbc>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a08      	ldr	r2, [pc, #32]	; (80005a0 <MX_GPIO_Init+0xbc>)
 8000580:	f043 0304 	orr.w	r3, r3, #4
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <MX_GPIO_Init+0xbc>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f003 0304 	and.w	r3, r3, #4
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	683b      	ldr	r3, [r7, #0]

}
 8000592:	bf00      	nop
 8000594:	371c      	adds	r7, #28
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40023800 	.word	0x40023800

080005a4 <LCD_DrawABig>:
		}
}


//Matthew's Addition
void LCD_DrawABig(uint16_t x0, uint16_t y0) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	460a      	mov	r2, r1
 80005ae:	80fb      	strh	r3, [r7, #6]
 80005b0:	4613      	mov	r3, r2
 80005b2:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80005b4:	230f      	movs	r3, #15
 80005b6:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
 80005bc:	e030      	b.n	8000620 <LCD_DrawABig+0x7c>
		for(int dx = 0; dx <=width; dx++){
 80005be:	2300      	movs	r3, #0
 80005c0:	61bb      	str	r3, [r7, #24]
 80005c2:	e026      	b.n	8000612 <LCD_DrawABig+0x6e>
			if ((dx <= 3 || dx >= 12) || (dy <= 3 || (dy >= 6 && dy <= 9))) {
 80005c4:	69bb      	ldr	r3, [r7, #24]
 80005c6:	2b03      	cmp	r3, #3
 80005c8:	dd0b      	ble.n	80005e2 <LCD_DrawABig+0x3e>
 80005ca:	69bb      	ldr	r3, [r7, #24]
 80005cc:	2b0b      	cmp	r3, #11
 80005ce:	dc08      	bgt.n	80005e2 <LCD_DrawABig+0x3e>
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	2b03      	cmp	r3, #3
 80005d4:	dd05      	ble.n	80005e2 <LCD_DrawABig+0x3e>
 80005d6:	69fb      	ldr	r3, [r7, #28]
 80005d8:	2b05      	cmp	r3, #5
 80005da:	dd17      	ble.n	800060c <LCD_DrawABig+0x68>
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	2b09      	cmp	r3, #9
 80005e0:	dc14      	bgt.n	800060c <LCD_DrawABig+0x68>
				int y = y0 + dy;
 80005e2:	88bb      	ldrh	r3, [r7, #4]
 80005e4:	69fa      	ldr	r2, [r7, #28]
 80005e6:	4413      	add	r3, r2
 80005e8:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	69ba      	ldr	r2, [r7, #24]
 80005ee:	4413      	add	r3, r2
 80005f0:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <LCD_DrawABig+0x90>)
 80005f4:	7818      	ldrb	r0, [r3, #0]
 80005f6:	693a      	ldr	r2, [r7, #16]
 80005f8:	4613      	mov	r3, r2
 80005fa:	011b      	lsls	r3, r3, #4
 80005fc:	1a9b      	subs	r3, r3, r2
 80005fe:	011b      	lsls	r3, r3, #4
 8000600:	461a      	mov	r2, r3
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	4413      	add	r3, r2
 8000606:	4619      	mov	r1, r3
 8000608:	f001 f8e4 	bl	80017d4 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800060c:	69bb      	ldr	r3, [r7, #24]
 800060e:	3301      	adds	r3, #1
 8000610:	61bb      	str	r3, [r7, #24]
 8000612:	7dfb      	ldrb	r3, [r7, #23]
 8000614:	69ba      	ldr	r2, [r7, #24]
 8000616:	429a      	cmp	r2, r3
 8000618:	ddd4      	ble.n	80005c4 <LCD_DrawABig+0x20>
	for(int dy = 0; dy <= width; dy++){
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	3301      	adds	r3, #1
 800061e:	61fb      	str	r3, [r7, #28]
 8000620:	7dfb      	ldrb	r3, [r7, #23]
 8000622:	69fa      	ldr	r2, [r7, #28]
 8000624:	429a      	cmp	r2, r3
 8000626:	ddca      	ble.n	80005be <LCD_DrawABig+0x1a>
			}
		}
	}
}
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	3720      	adds	r7, #32
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000000 	.word	0x20000000

08000638 <LCD_DrawBBig>:

void LCD_DrawBBig(uint16_t x0, uint16_t y0) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	460a      	mov	r2, r1
 8000642:	80fb      	strh	r3, [r7, #6]
 8000644:	4613      	mov	r3, r2
 8000646:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000648:	230f      	movs	r3, #15
 800064a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
 8000650:	e04b      	b.n	80006ea <LCD_DrawBBig+0xb2>
		for(int dx = 0; dx <=width; dx++){
 8000652:	2300      	movs	r3, #0
 8000654:	61bb      	str	r3, [r7, #24]
 8000656:	e041      	b.n	80006dc <LCD_DrawBBig+0xa4>
			if ((dx <= 3) || (dy >= 6 && dy <= 9 && dx <= 11) || (dy <= 3 && dx <= 11) || (dy >= 12 && dx <= 11)|| (dx >= 12 && (dy >= 3 && dy <= 6)) || ((dx >= 12) && (dy >= 9 && dy <= 12))) {
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	2b03      	cmp	r3, #3
 800065c:	dd26      	ble.n	80006ac <LCD_DrawBBig+0x74>
 800065e:	69fb      	ldr	r3, [r7, #28]
 8000660:	2b05      	cmp	r3, #5
 8000662:	dd05      	ble.n	8000670 <LCD_DrawBBig+0x38>
 8000664:	69fb      	ldr	r3, [r7, #28]
 8000666:	2b09      	cmp	r3, #9
 8000668:	dc02      	bgt.n	8000670 <LCD_DrawBBig+0x38>
 800066a:	69bb      	ldr	r3, [r7, #24]
 800066c:	2b0b      	cmp	r3, #11
 800066e:	dd1d      	ble.n	80006ac <LCD_DrawBBig+0x74>
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	2b03      	cmp	r3, #3
 8000674:	dc02      	bgt.n	800067c <LCD_DrawBBig+0x44>
 8000676:	69bb      	ldr	r3, [r7, #24]
 8000678:	2b0b      	cmp	r3, #11
 800067a:	dd17      	ble.n	80006ac <LCD_DrawBBig+0x74>
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	2b0b      	cmp	r3, #11
 8000680:	dd02      	ble.n	8000688 <LCD_DrawBBig+0x50>
 8000682:	69bb      	ldr	r3, [r7, #24]
 8000684:	2b0b      	cmp	r3, #11
 8000686:	dd11      	ble.n	80006ac <LCD_DrawBBig+0x74>
 8000688:	69bb      	ldr	r3, [r7, #24]
 800068a:	2b0b      	cmp	r3, #11
 800068c:	dd05      	ble.n	800069a <LCD_DrawBBig+0x62>
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	2b02      	cmp	r3, #2
 8000692:	dd02      	ble.n	800069a <LCD_DrawBBig+0x62>
 8000694:	69fb      	ldr	r3, [r7, #28]
 8000696:	2b06      	cmp	r3, #6
 8000698:	dd08      	ble.n	80006ac <LCD_DrawBBig+0x74>
 800069a:	69bb      	ldr	r3, [r7, #24]
 800069c:	2b0b      	cmp	r3, #11
 800069e:	dd1a      	ble.n	80006d6 <LCD_DrawBBig+0x9e>
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	2b08      	cmp	r3, #8
 80006a4:	dd17      	ble.n	80006d6 <LCD_DrawBBig+0x9e>
 80006a6:	69fb      	ldr	r3, [r7, #28]
 80006a8:	2b0c      	cmp	r3, #12
 80006aa:	dc14      	bgt.n	80006d6 <LCD_DrawBBig+0x9e>
				int y = y0 + dy;
 80006ac:	88bb      	ldrh	r3, [r7, #4]
 80006ae:	69fa      	ldr	r2, [r7, #28]
 80006b0:	4413      	add	r3, r2
 80006b2:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80006b4:	88fb      	ldrh	r3, [r7, #6]
 80006b6:	69ba      	ldr	r2, [r7, #24]
 80006b8:	4413      	add	r3, r2
 80006ba:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <LCD_DrawBBig+0xc4>)
 80006be:	7818      	ldrb	r0, [r3, #0]
 80006c0:	693a      	ldr	r2, [r7, #16]
 80006c2:	4613      	mov	r3, r2
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	011b      	lsls	r3, r3, #4
 80006ca:	461a      	mov	r2, r3
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	4413      	add	r3, r2
 80006d0:	4619      	mov	r1, r3
 80006d2:	f001 f87f 	bl	80017d4 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80006d6:	69bb      	ldr	r3, [r7, #24]
 80006d8:	3301      	adds	r3, #1
 80006da:	61bb      	str	r3, [r7, #24]
 80006dc:	7dfb      	ldrb	r3, [r7, #23]
 80006de:	69ba      	ldr	r2, [r7, #24]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	ddb9      	ble.n	8000658 <LCD_DrawBBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	3301      	adds	r3, #1
 80006e8:	61fb      	str	r3, [r7, #28]
 80006ea:	7dfb      	ldrb	r3, [r7, #23]
 80006ec:	69fa      	ldr	r2, [r7, #28]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	ddaf      	ble.n	8000652 <LCD_DrawBBig+0x1a>
			}
		}
	}
}
 80006f2:	bf00      	nop
 80006f4:	bf00      	nop
 80006f6:	3720      	adds	r7, #32
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000000 	.word	0x20000000

08000700 <LCD_DrawCBig>:

void LCD_DrawCBig(uint16_t x0, uint16_t y0) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	460a      	mov	r2, r1
 800070a:	80fb      	strh	r3, [r7, #6]
 800070c:	4613      	mov	r3, r2
 800070e:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000710:	230f      	movs	r3, #15
 8000712:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
 8000718:	e02a      	b.n	8000770 <LCD_DrawCBig+0x70>
		for(int dx = 0; dx <=width; dx++){
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
 800071e:	e020      	b.n	8000762 <LCD_DrawCBig+0x62>
			if ((dx <= 3) || (dy <= 3) || (dy >= 12)) {
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	2b03      	cmp	r3, #3
 8000724:	dd05      	ble.n	8000732 <LCD_DrawCBig+0x32>
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	2b03      	cmp	r3, #3
 800072a:	dd02      	ble.n	8000732 <LCD_DrawCBig+0x32>
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	2b0b      	cmp	r3, #11
 8000730:	dd14      	ble.n	800075c <LCD_DrawCBig+0x5c>
				int y = y0 + dy;
 8000732:	88bb      	ldrh	r3, [r7, #4]
 8000734:	69fa      	ldr	r2, [r7, #28]
 8000736:	4413      	add	r3, r2
 8000738:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800073a:	88fb      	ldrh	r3, [r7, #6]
 800073c:	69ba      	ldr	r2, [r7, #24]
 800073e:	4413      	add	r3, r2
 8000740:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <LCD_DrawCBig+0x84>)
 8000744:	7818      	ldrb	r0, [r3, #0]
 8000746:	693a      	ldr	r2, [r7, #16]
 8000748:	4613      	mov	r3, r2
 800074a:	011b      	lsls	r3, r3, #4
 800074c:	1a9b      	subs	r3, r3, r2
 800074e:	011b      	lsls	r3, r3, #4
 8000750:	461a      	mov	r2, r3
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	4413      	add	r3, r2
 8000756:	4619      	mov	r1, r3
 8000758:	f001 f83c 	bl	80017d4 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	3301      	adds	r3, #1
 8000760:	61bb      	str	r3, [r7, #24]
 8000762:	7dfb      	ldrb	r3, [r7, #23]
 8000764:	69ba      	ldr	r2, [r7, #24]
 8000766:	429a      	cmp	r2, r3
 8000768:	ddda      	ble.n	8000720 <LCD_DrawCBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	3301      	adds	r3, #1
 800076e:	61fb      	str	r3, [r7, #28]
 8000770:	7dfb      	ldrb	r3, [r7, #23]
 8000772:	69fa      	ldr	r2, [r7, #28]
 8000774:	429a      	cmp	r2, r3
 8000776:	ddd0      	ble.n	800071a <LCD_DrawCBig+0x1a>
			}
		}
	}
}
 8000778:	bf00      	nop
 800077a:	bf00      	nop
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000000 	.word	0x20000000

08000788 <LCD_DrawDBig>:

void LCD_DrawDBig(uint16_t x0, uint16_t y0) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	460a      	mov	r2, r1
 8000792:	80fb      	strh	r3, [r7, #6]
 8000794:	4613      	mov	r3, r2
 8000796:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000798:	230f      	movs	r3, #15
 800079a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
 80007a0:	e039      	b.n	8000816 <LCD_DrawDBig+0x8e>
		for(int dx = 0; dx <=width; dx++){
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
 80007a6:	e02f      	b.n	8000808 <LCD_DrawDBig+0x80>
			if ((dx <= 3) || (dy <= 3 && dx <= 11) || (dy >= 12 && dx <= 11) || (dx >= 12 && (dy >= 4 && dy <= 11))) {
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	2b03      	cmp	r3, #3
 80007ac:	dd14      	ble.n	80007d8 <LCD_DrawDBig+0x50>
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	2b03      	cmp	r3, #3
 80007b2:	dc02      	bgt.n	80007ba <LCD_DrawDBig+0x32>
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	2b0b      	cmp	r3, #11
 80007b8:	dd0e      	ble.n	80007d8 <LCD_DrawDBig+0x50>
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	2b0b      	cmp	r3, #11
 80007be:	dd02      	ble.n	80007c6 <LCD_DrawDBig+0x3e>
 80007c0:	69bb      	ldr	r3, [r7, #24]
 80007c2:	2b0b      	cmp	r3, #11
 80007c4:	dd08      	ble.n	80007d8 <LCD_DrawDBig+0x50>
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	2b0b      	cmp	r3, #11
 80007ca:	dd1a      	ble.n	8000802 <LCD_DrawDBig+0x7a>
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	2b03      	cmp	r3, #3
 80007d0:	dd17      	ble.n	8000802 <LCD_DrawDBig+0x7a>
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	2b0b      	cmp	r3, #11
 80007d6:	dc14      	bgt.n	8000802 <LCD_DrawDBig+0x7a>
				int y = y0 + dy;
 80007d8:	88bb      	ldrh	r3, [r7, #4]
 80007da:	69fa      	ldr	r2, [r7, #28]
 80007dc:	4413      	add	r3, r2
 80007de:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80007e0:	88fb      	ldrh	r3, [r7, #6]
 80007e2:	69ba      	ldr	r2, [r7, #24]
 80007e4:	4413      	add	r3, r2
 80007e6:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <LCD_DrawDBig+0xa0>)
 80007ea:	7818      	ldrb	r0, [r3, #0]
 80007ec:	693a      	ldr	r2, [r7, #16]
 80007ee:	4613      	mov	r3, r2
 80007f0:	011b      	lsls	r3, r3, #4
 80007f2:	1a9b      	subs	r3, r3, r2
 80007f4:	011b      	lsls	r3, r3, #4
 80007f6:	461a      	mov	r2, r3
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	4413      	add	r3, r2
 80007fc:	4619      	mov	r1, r3
 80007fe:	f000 ffe9 	bl	80017d4 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000802:	69bb      	ldr	r3, [r7, #24]
 8000804:	3301      	adds	r3, #1
 8000806:	61bb      	str	r3, [r7, #24]
 8000808:	7dfb      	ldrb	r3, [r7, #23]
 800080a:	69ba      	ldr	r2, [r7, #24]
 800080c:	429a      	cmp	r2, r3
 800080e:	ddcb      	ble.n	80007a8 <LCD_DrawDBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000810:	69fb      	ldr	r3, [r7, #28]
 8000812:	3301      	adds	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
 8000816:	7dfb      	ldrb	r3, [r7, #23]
 8000818:	69fa      	ldr	r2, [r7, #28]
 800081a:	429a      	cmp	r2, r3
 800081c:	ddc1      	ble.n	80007a2 <LCD_DrawDBig+0x1a>
			}
		}
	}
}
 800081e:	bf00      	nop
 8000820:	bf00      	nop
 8000822:	3720      	adds	r7, #32
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000000 	.word	0x20000000

0800082c <LCD_DrawEBig>:

void LCD_DrawEBig(uint16_t x0, uint16_t y0) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	460a      	mov	r2, r1
 8000836:	80fb      	strh	r3, [r7, #6]
 8000838:	4613      	mov	r3, r2
 800083a:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 800083c:	230f      	movs	r3, #15
 800083e:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
 8000844:	e036      	b.n	80008b4 <LCD_DrawEBig+0x88>
		for(int dx = 0; dx <=width; dx++){
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	e02c      	b.n	80008a6 <LCD_DrawEBig+0x7a>
			if ((dx < 4) || (dy <= 3 || dy == 6 || dy == 7 || dy == 8 || dy == 9|| dy >= 12)) {
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	2b03      	cmp	r3, #3
 8000850:	dd11      	ble.n	8000876 <LCD_DrawEBig+0x4a>
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	2b03      	cmp	r3, #3
 8000856:	dd0e      	ble.n	8000876 <LCD_DrawEBig+0x4a>
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	2b06      	cmp	r3, #6
 800085c:	d00b      	beq.n	8000876 <LCD_DrawEBig+0x4a>
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	2b07      	cmp	r3, #7
 8000862:	d008      	beq.n	8000876 <LCD_DrawEBig+0x4a>
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	2b08      	cmp	r3, #8
 8000868:	d005      	beq.n	8000876 <LCD_DrawEBig+0x4a>
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	2b09      	cmp	r3, #9
 800086e:	d002      	beq.n	8000876 <LCD_DrawEBig+0x4a>
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	2b0b      	cmp	r3, #11
 8000874:	dd14      	ble.n	80008a0 <LCD_DrawEBig+0x74>
				int y = y0 + dy;
 8000876:	88bb      	ldrh	r3, [r7, #4]
 8000878:	69fa      	ldr	r2, [r7, #28]
 800087a:	4413      	add	r3, r2
 800087c:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800087e:	88fb      	ldrh	r3, [r7, #6]
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	4413      	add	r3, r2
 8000884:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <LCD_DrawEBig+0x9c>)
 8000888:	7818      	ldrb	r0, [r3, #0]
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	4613      	mov	r3, r2
 800088e:	011b      	lsls	r3, r3, #4
 8000890:	1a9b      	subs	r3, r3, r2
 8000892:	011b      	lsls	r3, r3, #4
 8000894:	461a      	mov	r2, r3
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	4413      	add	r3, r2
 800089a:	4619      	mov	r1, r3
 800089c:	f000 ff9a 	bl	80017d4 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	3301      	adds	r3, #1
 80008a4:	61bb      	str	r3, [r7, #24]
 80008a6:	7dfb      	ldrb	r3, [r7, #23]
 80008a8:	69ba      	ldr	r2, [r7, #24]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	ddce      	ble.n	800084c <LCD_DrawEBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	3301      	adds	r3, #1
 80008b2:	61fb      	str	r3, [r7, #28]
 80008b4:	7dfb      	ldrb	r3, [r7, #23]
 80008b6:	69fa      	ldr	r2, [r7, #28]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	ddc4      	ble.n	8000846 <LCD_DrawEBig+0x1a>
			}
		}
	}
}
 80008bc:	bf00      	nop
 80008be:	bf00      	nop
 80008c0:	3720      	adds	r7, #32
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000000 	.word	0x20000000

080008cc <LCD_DrawGBig>:
			}
		}
	}
}

void LCD_DrawGBig(uint16_t x0, uint16_t y0) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	460a      	mov	r2, r1
 80008d6:	80fb      	strh	r3, [r7, #6]
 80008d8:	4613      	mov	r3, r2
 80008da:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80008dc:	230f      	movs	r3, #15
 80008de:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
 80008e4:	e039      	b.n	800095a <LCD_DrawGBig+0x8e>
		for(int dx = 0; dx <=width; dx++){
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
 80008ea:	e02f      	b.n	800094c <LCD_DrawGBig+0x80>
			if ((dx <= 3) || (dy <= 3) || (dy >= 12) || (dy >= 6 && dx >= 12) || (dy >= 6 && dy <= 9 && dx >= 5)) {
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	2b03      	cmp	r3, #3
 80008f0:	dd14      	ble.n	800091c <LCD_DrawGBig+0x50>
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	2b03      	cmp	r3, #3
 80008f6:	dd11      	ble.n	800091c <LCD_DrawGBig+0x50>
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	2b0b      	cmp	r3, #11
 80008fc:	dc0e      	bgt.n	800091c <LCD_DrawGBig+0x50>
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	2b05      	cmp	r3, #5
 8000902:	dd02      	ble.n	800090a <LCD_DrawGBig+0x3e>
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	2b0b      	cmp	r3, #11
 8000908:	dc08      	bgt.n	800091c <LCD_DrawGBig+0x50>
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	2b05      	cmp	r3, #5
 800090e:	dd1a      	ble.n	8000946 <LCD_DrawGBig+0x7a>
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	2b09      	cmp	r3, #9
 8000914:	dc17      	bgt.n	8000946 <LCD_DrawGBig+0x7a>
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	2b04      	cmp	r3, #4
 800091a:	dd14      	ble.n	8000946 <LCD_DrawGBig+0x7a>
				int y = y0 + dy;
 800091c:	88bb      	ldrh	r3, [r7, #4]
 800091e:	69fa      	ldr	r2, [r7, #28]
 8000920:	4413      	add	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000924:	88fb      	ldrh	r3, [r7, #6]
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	4413      	add	r3, r2
 800092a:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <LCD_DrawGBig+0xa0>)
 800092e:	7818      	ldrb	r0, [r3, #0]
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	4613      	mov	r3, r2
 8000934:	011b      	lsls	r3, r3, #4
 8000936:	1a9b      	subs	r3, r3, r2
 8000938:	011b      	lsls	r3, r3, #4
 800093a:	461a      	mov	r2, r3
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	4413      	add	r3, r2
 8000940:	4619      	mov	r1, r3
 8000942:	f000 ff47 	bl	80017d4 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	3301      	adds	r3, #1
 800094a:	61bb      	str	r3, [r7, #24]
 800094c:	7dfb      	ldrb	r3, [r7, #23]
 800094e:	69ba      	ldr	r2, [r7, #24]
 8000950:	429a      	cmp	r2, r3
 8000952:	ddcb      	ble.n	80008ec <LCD_DrawGBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	3301      	adds	r3, #1
 8000958:	61fb      	str	r3, [r7, #28]
 800095a:	7dfb      	ldrb	r3, [r7, #23]
 800095c:	69fa      	ldr	r2, [r7, #28]
 800095e:	429a      	cmp	r2, r3
 8000960:	ddc1      	ble.n	80008e6 <LCD_DrawGBig+0x1a>
			}
		}
	}
}
 8000962:	bf00      	nop
 8000964:	bf00      	nop
 8000966:	3720      	adds	r7, #32
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000000 	.word	0x20000000

08000970 <LCD_DrawHBig>:

void LCD_DrawHBig(uint16_t x0, uint16_t y0) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	460a      	mov	r2, r1
 800097a:	80fb      	strh	r3, [r7, #6]
 800097c:	4613      	mov	r3, r2
 800097e:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000980:	230f      	movs	r3, #15
 8000982:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
 8000988:	e033      	b.n	80009f2 <LCD_DrawHBig+0x82>
		for(int dx = 0; dx <=width; dx++){
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]
 800098e:	e029      	b.n	80009e4 <LCD_DrawHBig+0x74>
			if ((dx <= 3 || dx >= 12) || (dy == 6 || dy == 7 || dy == 8 || dy == 9)) {
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	2b03      	cmp	r3, #3
 8000994:	dd0e      	ble.n	80009b4 <LCD_DrawHBig+0x44>
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	2b0b      	cmp	r3, #11
 800099a:	dc0b      	bgt.n	80009b4 <LCD_DrawHBig+0x44>
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	2b06      	cmp	r3, #6
 80009a0:	d008      	beq.n	80009b4 <LCD_DrawHBig+0x44>
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	2b07      	cmp	r3, #7
 80009a6:	d005      	beq.n	80009b4 <LCD_DrawHBig+0x44>
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	2b08      	cmp	r3, #8
 80009ac:	d002      	beq.n	80009b4 <LCD_DrawHBig+0x44>
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	2b09      	cmp	r3, #9
 80009b2:	d114      	bne.n	80009de <LCD_DrawHBig+0x6e>
				int y = y0 + dy;
 80009b4:	88bb      	ldrh	r3, [r7, #4]
 80009b6:	69fa      	ldr	r2, [r7, #28]
 80009b8:	4413      	add	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80009bc:	88fb      	ldrh	r3, [r7, #6]
 80009be:	69ba      	ldr	r2, [r7, #24]
 80009c0:	4413      	add	r3, r2
 80009c2:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <LCD_DrawHBig+0x94>)
 80009c6:	7818      	ldrb	r0, [r3, #0]
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4613      	mov	r3, r2
 80009cc:	011b      	lsls	r3, r3, #4
 80009ce:	1a9b      	subs	r3, r3, r2
 80009d0:	011b      	lsls	r3, r3, #4
 80009d2:	461a      	mov	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	4413      	add	r3, r2
 80009d8:	4619      	mov	r1, r3
 80009da:	f000 fefb 	bl	80017d4 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	3301      	adds	r3, #1
 80009e2:	61bb      	str	r3, [r7, #24]
 80009e4:	7dfb      	ldrb	r3, [r7, #23]
 80009e6:	69ba      	ldr	r2, [r7, #24]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	ddd1      	ble.n	8000990 <LCD_DrawHBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	3301      	adds	r3, #1
 80009f0:	61fb      	str	r3, [r7, #28]
 80009f2:	7dfb      	ldrb	r3, [r7, #23]
 80009f4:	69fa      	ldr	r2, [r7, #28]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	ddc7      	ble.n	800098a <LCD_DrawHBig+0x1a>
			}
		}
	}
}
 80009fa:	bf00      	nop
 80009fc:	bf00      	nop
 80009fe:	3720      	adds	r7, #32
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000000 	.word	0x20000000

08000a08 <LCD_DrawIBig>:

void LCD_DrawIBig(uint16_t x0, uint16_t y0) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	460a      	mov	r2, r1
 8000a12:	80fb      	strh	r3, [r7, #6]
 8000a14:	4613      	mov	r3, r2
 8000a16:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000a18:	230f      	movs	r3, #15
 8000a1a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
 8000a20:	e02d      	b.n	8000a7e <LCD_DrawIBig+0x76>
		for(int dx = 0; dx <=width; dx++){
 8000a22:	2300      	movs	r3, #0
 8000a24:	61bb      	str	r3, [r7, #24]
 8000a26:	e023      	b.n	8000a70 <LCD_DrawIBig+0x68>
			if ((dy <= 3) || (dy >= 12) || (dx >= 6 && dx <= 9)) {
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	dd08      	ble.n	8000a40 <LCD_DrawIBig+0x38>
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	2b0b      	cmp	r3, #11
 8000a32:	dc05      	bgt.n	8000a40 <LCD_DrawIBig+0x38>
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	2b05      	cmp	r3, #5
 8000a38:	dd17      	ble.n	8000a6a <LCD_DrawIBig+0x62>
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	2b09      	cmp	r3, #9
 8000a3e:	dc14      	bgt.n	8000a6a <LCD_DrawIBig+0x62>
				int y = y0 + dy;
 8000a40:	88bb      	ldrh	r3, [r7, #4]
 8000a42:	69fa      	ldr	r2, [r7, #28]
 8000a44:	4413      	add	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <LCD_DrawIBig+0x88>)
 8000a52:	7818      	ldrb	r0, [r3, #0]
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4613      	mov	r3, r2
 8000a58:	011b      	lsls	r3, r3, #4
 8000a5a:	1a9b      	subs	r3, r3, r2
 8000a5c:	011b      	lsls	r3, r3, #4
 8000a5e:	461a      	mov	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4413      	add	r3, r2
 8000a64:	4619      	mov	r1, r3
 8000a66:	f000 feb5 	bl	80017d4 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	61bb      	str	r3, [r7, #24]
 8000a70:	7dfb      	ldrb	r3, [r7, #23]
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	ddd7      	ble.n	8000a28 <LCD_DrawIBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	61fb      	str	r3, [r7, #28]
 8000a7e:	7dfb      	ldrb	r3, [r7, #23]
 8000a80:	69fa      	ldr	r2, [r7, #28]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	ddcd      	ble.n	8000a22 <LCD_DrawIBig+0x1a>
			}
		}
	}
}
 8000a86:	bf00      	nop
 8000a88:	bf00      	nop
 8000a8a:	3720      	adds	r7, #32
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000000 	.word	0x20000000

08000a94 <LCD_DrawLBig>:
			}
		}
	}
}

void LCD_DrawLBig(uint16_t x0, uint16_t y0) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	460a      	mov	r2, r1
 8000a9e:	80fb      	strh	r3, [r7, #6]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
 8000aac:	e027      	b.n	8000afe <LCD_DrawLBig+0x6a>
		for(int dx = 0; dx <=width; dx++){
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61bb      	str	r3, [r7, #24]
 8000ab2:	e01d      	b.n	8000af0 <LCD_DrawLBig+0x5c>
			if ((dx <= 3) || (dy >= 12)) {
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	2b03      	cmp	r3, #3
 8000ab8:	dd02      	ble.n	8000ac0 <LCD_DrawLBig+0x2c>
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	2b0b      	cmp	r3, #11
 8000abe:	dd14      	ble.n	8000aea <LCD_DrawLBig+0x56>
				int y = y0 + dy;
 8000ac0:	88bb      	ldrh	r3, [r7, #4]
 8000ac2:	69fa      	ldr	r2, [r7, #28]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000ac8:	88fb      	ldrh	r3, [r7, #6]
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	4413      	add	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <LCD_DrawLBig+0x7c>)
 8000ad2:	7818      	ldrb	r0, [r3, #0]
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	011b      	lsls	r3, r3, #4
 8000ada:	1a9b      	subs	r3, r3, r2
 8000adc:	011b      	lsls	r3, r3, #4
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f000 fe75 	bl	80017d4 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	3301      	adds	r3, #1
 8000aee:	61bb      	str	r3, [r7, #24]
 8000af0:	7dfb      	ldrb	r3, [r7, #23]
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	dddd      	ble.n	8000ab4 <LCD_DrawLBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	3301      	adds	r3, #1
 8000afc:	61fb      	str	r3, [r7, #28]
 8000afe:	7dfb      	ldrb	r3, [r7, #23]
 8000b00:	69fa      	ldr	r2, [r7, #28]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	ddd3      	ble.n	8000aae <LCD_DrawLBig+0x1a>
			}
		}
	}
}
 8000b06:	bf00      	nop
 8000b08:	bf00      	nop
 8000b0a:	3720      	adds	r7, #32
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000000 	.word	0x20000000

08000b14 <LCD_DrawMBig>:

void LCD_DrawMBig(uint16_t x0, uint16_t y0) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	460a      	mov	r2, r1
 8000b1e:	80fb      	strh	r3, [r7, #6]
 8000b20:	4613      	mov	r3, r2
 8000b22:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000b24:	230f      	movs	r3, #15
 8000b26:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
 8000b2c:	e04b      	b.n	8000bc6 <LCD_DrawMBig+0xb2>
		for(int dx = 0; dx <=width; dx++){
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61bb      	str	r3, [r7, #24]
 8000b32:	e041      	b.n	8000bb8 <LCD_DrawMBig+0xa4>
			if ((dx <= 3) || (dx >= 12) || ((dx >= 6 && dx <= 9) && (dy >= 6 && dy <= 9)) || ((dx >= 3 && dx <= 6) && (dy >= 3 && dy <= 6)) || ((dx >= 9 && dx <= 12) && (dy >= 3 && dy <= 6))) {
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	2b03      	cmp	r3, #3
 8000b38:	dd26      	ble.n	8000b88 <LCD_DrawMBig+0x74>
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	2b0b      	cmp	r3, #11
 8000b3e:	dc23      	bgt.n	8000b88 <LCD_DrawMBig+0x74>
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	2b05      	cmp	r3, #5
 8000b44:	dd08      	ble.n	8000b58 <LCD_DrawMBig+0x44>
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	2b09      	cmp	r3, #9
 8000b4a:	dc05      	bgt.n	8000b58 <LCD_DrawMBig+0x44>
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	2b05      	cmp	r3, #5
 8000b50:	dd02      	ble.n	8000b58 <LCD_DrawMBig+0x44>
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	2b09      	cmp	r3, #9
 8000b56:	dd17      	ble.n	8000b88 <LCD_DrawMBig+0x74>
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	dd08      	ble.n	8000b70 <LCD_DrawMBig+0x5c>
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	2b06      	cmp	r3, #6
 8000b62:	dc05      	bgt.n	8000b70 <LCD_DrawMBig+0x5c>
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	dd02      	ble.n	8000b70 <LCD_DrawMBig+0x5c>
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	2b06      	cmp	r3, #6
 8000b6e:	dd0b      	ble.n	8000b88 <LCD_DrawMBig+0x74>
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	2b08      	cmp	r3, #8
 8000b74:	dd1d      	ble.n	8000bb2 <LCD_DrawMBig+0x9e>
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	2b0c      	cmp	r3, #12
 8000b7a:	dc1a      	bgt.n	8000bb2 <LCD_DrawMBig+0x9e>
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	dd17      	ble.n	8000bb2 <LCD_DrawMBig+0x9e>
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	2b06      	cmp	r3, #6
 8000b86:	dc14      	bgt.n	8000bb2 <LCD_DrawMBig+0x9e>
				int y = y0 + dy;
 8000b88:	88bb      	ldrh	r3, [r7, #4]
 8000b8a:	69fa      	ldr	r2, [r7, #28]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	69ba      	ldr	r2, [r7, #24]
 8000b94:	4413      	add	r3, r2
 8000b96:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <LCD_DrawMBig+0xc4>)
 8000b9a:	7818      	ldrb	r0, [r3, #0]
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	011b      	lsls	r3, r3, #4
 8000ba2:	1a9b      	subs	r3, r3, r2
 8000ba4:	011b      	lsls	r3, r3, #4
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4413      	add	r3, r2
 8000bac:	4619      	mov	r1, r3
 8000bae:	f000 fe11 	bl	80017d4 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	61bb      	str	r3, [r7, #24]
 8000bb8:	7dfb      	ldrb	r3, [r7, #23]
 8000bba:	69ba      	ldr	r2, [r7, #24]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	ddb9      	ble.n	8000b34 <LCD_DrawMBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	61fb      	str	r3, [r7, #28]
 8000bc6:	7dfb      	ldrb	r3, [r7, #23]
 8000bc8:	69fa      	ldr	r2, [r7, #28]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	ddaf      	ble.n	8000b2e <LCD_DrawMBig+0x1a>
			}
		}
	}
}
 8000bce:	bf00      	nop
 8000bd0:	bf00      	nop
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000000 	.word	0x20000000

08000bdc <LCD_DrawNBig>:

void LCD_DrawNBig(uint16_t x0, uint16_t y0) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	460a      	mov	r2, r1
 8000be6:	80fb      	strh	r3, [r7, #6]
 8000be8:	4613      	mov	r3, r2
 8000bea:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000bec:	230f      	movs	r3, #15
 8000bee:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
 8000bf4:	e04b      	b.n	8000c8e <LCD_DrawNBig+0xb2>
		for(int dx = 0; dx <=width; dx++){
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61bb      	str	r3, [r7, #24]
 8000bfa:	e041      	b.n	8000c80 <LCD_DrawNBig+0xa4>
			if ((dx <= 3) || (dx >= 12) || ((dx >= 6 && dx <= 9) && (dy >= 6 && dy <= 9)) || ((dx >= 3 && dx <= 6) && (dy >= 3 && dy <= 6)) || ((dx >= 9 && dx <= 12) && (dy >= 9 && dy <= 12))) {
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	2b03      	cmp	r3, #3
 8000c00:	dd26      	ble.n	8000c50 <LCD_DrawNBig+0x74>
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	2b0b      	cmp	r3, #11
 8000c06:	dc23      	bgt.n	8000c50 <LCD_DrawNBig+0x74>
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	2b05      	cmp	r3, #5
 8000c0c:	dd08      	ble.n	8000c20 <LCD_DrawNBig+0x44>
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	2b09      	cmp	r3, #9
 8000c12:	dc05      	bgt.n	8000c20 <LCD_DrawNBig+0x44>
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	2b05      	cmp	r3, #5
 8000c18:	dd02      	ble.n	8000c20 <LCD_DrawNBig+0x44>
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	2b09      	cmp	r3, #9
 8000c1e:	dd17      	ble.n	8000c50 <LCD_DrawNBig+0x74>
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	dd08      	ble.n	8000c38 <LCD_DrawNBig+0x5c>
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	2b06      	cmp	r3, #6
 8000c2a:	dc05      	bgt.n	8000c38 <LCD_DrawNBig+0x5c>
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	dd02      	ble.n	8000c38 <LCD_DrawNBig+0x5c>
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	2b06      	cmp	r3, #6
 8000c36:	dd0b      	ble.n	8000c50 <LCD_DrawNBig+0x74>
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	2b08      	cmp	r3, #8
 8000c3c:	dd1d      	ble.n	8000c7a <LCD_DrawNBig+0x9e>
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	2b0c      	cmp	r3, #12
 8000c42:	dc1a      	bgt.n	8000c7a <LCD_DrawNBig+0x9e>
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	2b08      	cmp	r3, #8
 8000c48:	dd17      	ble.n	8000c7a <LCD_DrawNBig+0x9e>
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	2b0c      	cmp	r3, #12
 8000c4e:	dc14      	bgt.n	8000c7a <LCD_DrawNBig+0x9e>
				int y = y0 + dy;
 8000c50:	88bb      	ldrh	r3, [r7, #4]
 8000c52:	69fa      	ldr	r2, [r7, #28]
 8000c54:	4413      	add	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <LCD_DrawNBig+0xc4>)
 8000c62:	7818      	ldrb	r0, [r3, #0]
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	4613      	mov	r3, r2
 8000c68:	011b      	lsls	r3, r3, #4
 8000c6a:	1a9b      	subs	r3, r3, r2
 8000c6c:	011b      	lsls	r3, r3, #4
 8000c6e:	461a      	mov	r2, r3
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4413      	add	r3, r2
 8000c74:	4619      	mov	r1, r3
 8000c76:	f000 fdad 	bl	80017d4 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	61bb      	str	r3, [r7, #24]
 8000c80:	7dfb      	ldrb	r3, [r7, #23]
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	ddb9      	ble.n	8000bfc <LCD_DrawNBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	61fb      	str	r3, [r7, #28]
 8000c8e:	7dfb      	ldrb	r3, [r7, #23]
 8000c90:	69fa      	ldr	r2, [r7, #28]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	ddaf      	ble.n	8000bf6 <LCD_DrawNBig+0x1a>
			}
		}
	}
}
 8000c96:	bf00      	nop
 8000c98:	bf00      	nop
 8000c9a:	3720      	adds	r7, #32
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000000 	.word	0x20000000

08000ca4 <LCD_DrawOBig>:

void LCD_DrawOBig(uint16_t x0, uint16_t y0) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	460a      	mov	r2, r1
 8000cae:	80fb      	strh	r3, [r7, #6]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
 8000cbc:	e02d      	b.n	8000d1a <LCD_DrawOBig+0x76>
		for(int dx = 0; dx <=width; dx++){
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
 8000cc2:	e023      	b.n	8000d0c <LCD_DrawOBig+0x68>
			if ((dx <= 3 || dx >= 12) || (dy <= 3 || dy >= 12)) {
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	2b03      	cmp	r3, #3
 8000cc8:	dd08      	ble.n	8000cdc <LCD_DrawOBig+0x38>
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	2b0b      	cmp	r3, #11
 8000cce:	dc05      	bgt.n	8000cdc <LCD_DrawOBig+0x38>
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	2b03      	cmp	r3, #3
 8000cd4:	dd02      	ble.n	8000cdc <LCD_DrawOBig+0x38>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	2b0b      	cmp	r3, #11
 8000cda:	dd14      	ble.n	8000d06 <LCD_DrawOBig+0x62>
				int y = y0 + dy;
 8000cdc:	88bb      	ldrh	r3, [r7, #4]
 8000cde:	69fa      	ldr	r2, [r7, #28]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4413      	add	r3, r2
 8000cea:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <LCD_DrawOBig+0x88>)
 8000cee:	7818      	ldrb	r0, [r3, #0]
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	011b      	lsls	r3, r3, #4
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	011b      	lsls	r3, r3, #4
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4619      	mov	r1, r3
 8000d02:	f000 fd67 	bl	80017d4 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	61bb      	str	r3, [r7, #24]
 8000d0c:	7dfb      	ldrb	r3, [r7, #23]
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	ddd7      	ble.n	8000cc4 <LCD_DrawOBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	3301      	adds	r3, #1
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	7dfb      	ldrb	r3, [r7, #23]
 8000d1c:	69fa      	ldr	r2, [r7, #28]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	ddcd      	ble.n	8000cbe <LCD_DrawOBig+0x1a>
			}
		}
	}
}
 8000d22:	bf00      	nop
 8000d24:	bf00      	nop
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000000 	.word	0x20000000

08000d30 <LCD_DrawPBig>:

void LCD_DrawPBig(uint16_t x0, uint16_t y0) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b088      	sub	sp, #32
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	460a      	mov	r2, r1
 8000d3a:	80fb      	strh	r3, [r7, #6]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000d40:	230f      	movs	r3, #15
 8000d42:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
 8000d48:	e03c      	b.n	8000dc4 <LCD_DrawPBig+0x94>
		for(int dx = 0; dx <=width; dx++){
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61bb      	str	r3, [r7, #24]
 8000d4e:	e032      	b.n	8000db6 <LCD_DrawPBig+0x86>
			if ((dx <= 3) || (dy <= 3 && dx <= 11) || ((dy >= 6 && dy <= 9) && dx <= 11) || (dx >= 12 && (dy >= 3 && dy <= 6))) {
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	dd17      	ble.n	8000d86 <LCD_DrawPBig+0x56>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	2b03      	cmp	r3, #3
 8000d5a:	dc02      	bgt.n	8000d62 <LCD_DrawPBig+0x32>
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	2b0b      	cmp	r3, #11
 8000d60:	dd11      	ble.n	8000d86 <LCD_DrawPBig+0x56>
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	2b05      	cmp	r3, #5
 8000d66:	dd05      	ble.n	8000d74 <LCD_DrawPBig+0x44>
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	2b09      	cmp	r3, #9
 8000d6c:	dc02      	bgt.n	8000d74 <LCD_DrawPBig+0x44>
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	2b0b      	cmp	r3, #11
 8000d72:	dd08      	ble.n	8000d86 <LCD_DrawPBig+0x56>
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	2b0b      	cmp	r3, #11
 8000d78:	dd1a      	ble.n	8000db0 <LCD_DrawPBig+0x80>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	dd17      	ble.n	8000db0 <LCD_DrawPBig+0x80>
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	dc14      	bgt.n	8000db0 <LCD_DrawPBig+0x80>
				int y = y0 + dy;
 8000d86:	88bb      	ldrh	r3, [r7, #4]
 8000d88:	69fa      	ldr	r2, [r7, #28]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000d8e:	88fb      	ldrh	r3, [r7, #6]
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4413      	add	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <LCD_DrawPBig+0xa8>)
 8000d98:	7818      	ldrb	r0, [r3, #0]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	1a9b      	subs	r3, r3, r2
 8000da2:	011b      	lsls	r3, r3, #4
 8000da4:	461a      	mov	r2, r3
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	4413      	add	r3, r2
 8000daa:	4619      	mov	r1, r3
 8000dac:	f000 fd12 	bl	80017d4 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	3301      	adds	r3, #1
 8000db4:	61bb      	str	r3, [r7, #24]
 8000db6:	7dfb      	ldrb	r3, [r7, #23]
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	ddc8      	ble.n	8000d50 <LCD_DrawPBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	61fb      	str	r3, [r7, #28]
 8000dc4:	7dfb      	ldrb	r3, [r7, #23]
 8000dc6:	69fa      	ldr	r2, [r7, #28]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	ddbe      	ble.n	8000d4a <LCD_DrawPBig+0x1a>
			}
		}
	}
}
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	3720      	adds	r7, #32
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000000 	.word	0x20000000

08000ddc <LCD_DrawRBig>:
			}
		}
	}
}

void LCD_DrawRBig(uint16_t x0, uint16_t y0) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	460a      	mov	r2, r1
 8000de6:	80fb      	strh	r3, [r7, #6]
 8000de8:	4613      	mov	r3, r2
 8000dea:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000dec:	230f      	movs	r3, #15
 8000dee:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
 8000df4:	e04e      	b.n	8000e94 <LCD_DrawRBig+0xb8>
		for(int dx = 0; dx <=width; dx++){
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
 8000dfa:	e044      	b.n	8000e86 <LCD_DrawRBig+0xaa>
			if ((dx <= 3) || (dy <= 3 && dx <= 11) || ((dy >= 6 && dy <= 9) && dx <= 11) || (dx >= 12 && (dy >= 3 && dy <= 6))|| (dx >= 12 && dy >= 12) || (dx >= 8 && dx <= 11 && dy >= 8 && dy <= 11)) {
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	dd29      	ble.n	8000e56 <LCD_DrawRBig+0x7a>
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	dc02      	bgt.n	8000e0e <LCD_DrawRBig+0x32>
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	2b0b      	cmp	r3, #11
 8000e0c:	dd23      	ble.n	8000e56 <LCD_DrawRBig+0x7a>
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	2b05      	cmp	r3, #5
 8000e12:	dd05      	ble.n	8000e20 <LCD_DrawRBig+0x44>
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	2b09      	cmp	r3, #9
 8000e18:	dc02      	bgt.n	8000e20 <LCD_DrawRBig+0x44>
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	2b0b      	cmp	r3, #11
 8000e1e:	dd1a      	ble.n	8000e56 <LCD_DrawRBig+0x7a>
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	2b0b      	cmp	r3, #11
 8000e24:	dd05      	ble.n	8000e32 <LCD_DrawRBig+0x56>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	dd02      	ble.n	8000e32 <LCD_DrawRBig+0x56>
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	dd11      	ble.n	8000e56 <LCD_DrawRBig+0x7a>
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	2b0b      	cmp	r3, #11
 8000e36:	dd02      	ble.n	8000e3e <LCD_DrawRBig+0x62>
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	2b0b      	cmp	r3, #11
 8000e3c:	dc0b      	bgt.n	8000e56 <LCD_DrawRBig+0x7a>
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	2b07      	cmp	r3, #7
 8000e42:	dd1d      	ble.n	8000e80 <LCD_DrawRBig+0xa4>
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	2b0b      	cmp	r3, #11
 8000e48:	dc1a      	bgt.n	8000e80 <LCD_DrawRBig+0xa4>
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	2b07      	cmp	r3, #7
 8000e4e:	dd17      	ble.n	8000e80 <LCD_DrawRBig+0xa4>
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	2b0b      	cmp	r3, #11
 8000e54:	dc14      	bgt.n	8000e80 <LCD_DrawRBig+0xa4>
				int y = y0 + dy;
 8000e56:	88bb      	ldrh	r3, [r7, #4]
 8000e58:	69fa      	ldr	r2, [r7, #28]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4413      	add	r3, r2
 8000e64:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <LCD_DrawRBig+0xcc>)
 8000e68:	7818      	ldrb	r0, [r3, #0]
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	011b      	lsls	r3, r3, #4
 8000e70:	1a9b      	subs	r3, r3, r2
 8000e72:	011b      	lsls	r3, r3, #4
 8000e74:	461a      	mov	r2, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	4413      	add	r3, r2
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f000 fcaa 	bl	80017d4 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	3301      	adds	r3, #1
 8000e84:	61bb      	str	r3, [r7, #24]
 8000e86:	7dfb      	ldrb	r3, [r7, #23]
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	ddb6      	ble.n	8000dfc <LCD_DrawRBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3301      	adds	r3, #1
 8000e92:	61fb      	str	r3, [r7, #28]
 8000e94:	7dfb      	ldrb	r3, [r7, #23]
 8000e96:	69fa      	ldr	r2, [r7, #28]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	ddac      	ble.n	8000df6 <LCD_DrawRBig+0x1a>
			}
		}
	}
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	3720      	adds	r7, #32
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000000 	.word	0x20000000

08000eac <LCD_DrawSBig>:

void LCD_DrawSBig(uint16_t x0, uint16_t y0) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	460a      	mov	r2, r1
 8000eb6:	80fb      	strh	r3, [r7, #6]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
 8000ec4:	e03f      	b.n	8000f46 <LCD_DrawSBig+0x9a>
		for(int dx = 0; dx <=width; dx++){
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
 8000eca:	e035      	b.n	8000f38 <LCD_DrawSBig+0x8c>
			if ((dx <= 3 && dy <= 9) || (dx >= 12 && dy >= 6) || (dy <= 3 || dy == 6 || dy == 7 || dy == 8 || dy ==9 || dy >= 12)) {
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	dc02      	bgt.n	8000ed8 <LCD_DrawSBig+0x2c>
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	2b09      	cmp	r3, #9
 8000ed6:	dd17      	ble.n	8000f08 <LCD_DrawSBig+0x5c>
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	2b0b      	cmp	r3, #11
 8000edc:	dd02      	ble.n	8000ee4 <LCD_DrawSBig+0x38>
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	2b05      	cmp	r3, #5
 8000ee2:	dc11      	bgt.n	8000f08 <LCD_DrawSBig+0x5c>
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	dd0e      	ble.n	8000f08 <LCD_DrawSBig+0x5c>
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	2b06      	cmp	r3, #6
 8000eee:	d00b      	beq.n	8000f08 <LCD_DrawSBig+0x5c>
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	2b07      	cmp	r3, #7
 8000ef4:	d008      	beq.n	8000f08 <LCD_DrawSBig+0x5c>
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	2b08      	cmp	r3, #8
 8000efa:	d005      	beq.n	8000f08 <LCD_DrawSBig+0x5c>
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	2b09      	cmp	r3, #9
 8000f00:	d002      	beq.n	8000f08 <LCD_DrawSBig+0x5c>
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	2b0b      	cmp	r3, #11
 8000f06:	dd14      	ble.n	8000f32 <LCD_DrawSBig+0x86>
				int y = y0 + dy;
 8000f08:	88bb      	ldrh	r3, [r7, #4]
 8000f0a:	69fa      	ldr	r2, [r7, #28]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4413      	add	r3, r2
 8000f16:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <LCD_DrawSBig+0xac>)
 8000f1a:	7818      	ldrb	r0, [r3, #0]
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	011b      	lsls	r3, r3, #4
 8000f22:	1a9b      	subs	r3, r3, r2
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	461a      	mov	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f000 fc51 	bl	80017d4 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	3301      	adds	r3, #1
 8000f36:	61bb      	str	r3, [r7, #24]
 8000f38:	7dfb      	ldrb	r3, [r7, #23]
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	ddc5      	ble.n	8000ecc <LCD_DrawSBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	3301      	adds	r3, #1
 8000f44:	61fb      	str	r3, [r7, #28]
 8000f46:	7dfb      	ldrb	r3, [r7, #23]
 8000f48:	69fa      	ldr	r2, [r7, #28]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	ddbb      	ble.n	8000ec6 <LCD_DrawSBig+0x1a>
			}
		}
	}
}
 8000f4e:	bf00      	nop
 8000f50:	bf00      	nop
 8000f52:	3720      	adds	r7, #32
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000000 	.word	0x20000000

08000f5c <LCD_DrawTBig>:

void LCD_DrawTBig(uint16_t x0, uint16_t y0) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	460a      	mov	r2, r1
 8000f66:	80fb      	strh	r3, [r7, #6]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
 8000f74:	e02a      	b.n	8000fcc <LCD_DrawTBig+0x70>
		for(int dx = 0; dx <=width; dx++){
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
 8000f7a:	e020      	b.n	8000fbe <LCD_DrawTBig+0x62>
			if ((dy <= 3) || (dx >= 6 && dx <= 9)) {
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	dd05      	ble.n	8000f8e <LCD_DrawTBig+0x32>
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	2b05      	cmp	r3, #5
 8000f86:	dd17      	ble.n	8000fb8 <LCD_DrawTBig+0x5c>
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	2b09      	cmp	r3, #9
 8000f8c:	dc14      	bgt.n	8000fb8 <LCD_DrawTBig+0x5c>
				int y = y0 + dy;
 8000f8e:	88bb      	ldrh	r3, [r7, #4]
 8000f90:	69fa      	ldr	r2, [r7, #28]
 8000f92:	4413      	add	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <LCD_DrawTBig+0x84>)
 8000fa0:	7818      	ldrb	r0, [r3, #0]
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	1a9b      	subs	r3, r3, r2
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	461a      	mov	r2, r3
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f000 fc0e 	bl	80017d4 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	61bb      	str	r3, [r7, #24]
 8000fbe:	7dfb      	ldrb	r3, [r7, #23]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	ddda      	ble.n	8000f7c <LCD_DrawTBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	61fb      	str	r3, [r7, #28]
 8000fcc:	7dfb      	ldrb	r3, [r7, #23]
 8000fce:	69fa      	ldr	r2, [r7, #28]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	ddd0      	ble.n	8000f76 <LCD_DrawTBig+0x1a>
			}
		}
	}
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3720      	adds	r7, #32
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000000 	.word	0x20000000

08000fe4 <LCD_DrawUBig>:

void LCD_DrawUBig(uint16_t x0, uint16_t y0) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	80fb      	strh	r3, [r7, #6]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
 8000ffc:	e02a      	b.n	8001054 <LCD_DrawUBig+0x70>
		for(int dx = 0; dx <=width; dx++){
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
 8001002:	e020      	b.n	8001046 <LCD_DrawUBig+0x62>
			if ((dx <= 3) || (dx >= 12) || (dy >= 12)) {
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	2b03      	cmp	r3, #3
 8001008:	dd05      	ble.n	8001016 <LCD_DrawUBig+0x32>
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	2b0b      	cmp	r3, #11
 800100e:	dc02      	bgt.n	8001016 <LCD_DrawUBig+0x32>
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	2b0b      	cmp	r3, #11
 8001014:	dd14      	ble.n	8001040 <LCD_DrawUBig+0x5c>
				int y = y0 + dy;
 8001016:	88bb      	ldrh	r3, [r7, #4]
 8001018:	69fa      	ldr	r2, [r7, #28]
 800101a:	4413      	add	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4413      	add	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <LCD_DrawUBig+0x84>)
 8001028:	7818      	ldrb	r0, [r3, #0]
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4613      	mov	r3, r2
 800102e:	011b      	lsls	r3, r3, #4
 8001030:	1a9b      	subs	r3, r3, r2
 8001032:	011b      	lsls	r3, r3, #4
 8001034:	461a      	mov	r2, r3
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4413      	add	r3, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f000 fbca 	bl	80017d4 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	3301      	adds	r3, #1
 8001044:	61bb      	str	r3, [r7, #24]
 8001046:	7dfb      	ldrb	r3, [r7, #23]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	429a      	cmp	r2, r3
 800104c:	ddda      	ble.n	8001004 <LCD_DrawUBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3301      	adds	r3, #1
 8001052:	61fb      	str	r3, [r7, #28]
 8001054:	7dfb      	ldrb	r3, [r7, #23]
 8001056:	69fa      	ldr	r2, [r7, #28]
 8001058:	429a      	cmp	r2, r3
 800105a:	ddd0      	ble.n	8000ffe <LCD_DrawUBig+0x1a>
			}
		}
	}
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3720      	adds	r7, #32
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000000 	.word	0x20000000

0800106c <LCD_DrawWBig>:
			}
		}
	}
}

void LCD_DrawWBig(uint16_t x0, uint16_t y0) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	460a      	mov	r2, r1
 8001076:	80fb      	strh	r3, [r7, #6]
 8001078:	4613      	mov	r3, r2
 800107a:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 800107c:	230f      	movs	r3, #15
 800107e:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	e081      	b.n	800118a <LCD_DrawWBig+0x11e>
		for(int dx = 0; dx <=width; dx++){
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
 800108a:	e077      	b.n	800117c <LCD_DrawWBig+0x110>
			if ((dx <= 3 && dy <= 3) || (dx >= 12 && dy <= 3) || (dy >= 4 && dy <= 7 && dx >= 1 && dx <= 4) || (dy >= 8 && dy <= 11 && dx >= 2 && dx <= 5)  || (dy >= 12 && dy <= 15 && dx >= 3 && dx <= 6)|| (dy >= 4 && dy <= 7 && dx >= 11 && dx <= 14) || (dy >= 8 && dy <= 11 && dx >= 10 && dx <= 13) || (dy >= 12 && dy <= 15 && dx >= 9 && dx <= 12) || (dx >= 6 && dx <= 9 && dy >= 6 && dy <= 11)) {
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	2b03      	cmp	r3, #3
 8001090:	dc02      	bgt.n	8001098 <LCD_DrawWBig+0x2c>
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	2b03      	cmp	r3, #3
 8001096:	dd59      	ble.n	800114c <LCD_DrawWBig+0xe0>
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	2b0b      	cmp	r3, #11
 800109c:	dd02      	ble.n	80010a4 <LCD_DrawWBig+0x38>
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	dd53      	ble.n	800114c <LCD_DrawWBig+0xe0>
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	2b03      	cmp	r3, #3
 80010a8:	dd08      	ble.n	80010bc <LCD_DrawWBig+0x50>
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	2b07      	cmp	r3, #7
 80010ae:	dc05      	bgt.n	80010bc <LCD_DrawWBig+0x50>
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	dd02      	ble.n	80010bc <LCD_DrawWBig+0x50>
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	2b04      	cmp	r3, #4
 80010ba:	dd47      	ble.n	800114c <LCD_DrawWBig+0xe0>
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	2b07      	cmp	r3, #7
 80010c0:	dd08      	ble.n	80010d4 <LCD_DrawWBig+0x68>
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	2b0b      	cmp	r3, #11
 80010c6:	dc05      	bgt.n	80010d4 <LCD_DrawWBig+0x68>
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	dd02      	ble.n	80010d4 <LCD_DrawWBig+0x68>
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	2b05      	cmp	r3, #5
 80010d2:	dd3b      	ble.n	800114c <LCD_DrawWBig+0xe0>
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	2b0b      	cmp	r3, #11
 80010d8:	dd08      	ble.n	80010ec <LCD_DrawWBig+0x80>
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	dc05      	bgt.n	80010ec <LCD_DrawWBig+0x80>
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	dd02      	ble.n	80010ec <LCD_DrawWBig+0x80>
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	2b06      	cmp	r3, #6
 80010ea:	dd2f      	ble.n	800114c <LCD_DrawWBig+0xe0>
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	dd08      	ble.n	8001104 <LCD_DrawWBig+0x98>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	2b07      	cmp	r3, #7
 80010f6:	dc05      	bgt.n	8001104 <LCD_DrawWBig+0x98>
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	2b0a      	cmp	r3, #10
 80010fc:	dd02      	ble.n	8001104 <LCD_DrawWBig+0x98>
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	2b0e      	cmp	r3, #14
 8001102:	dd23      	ble.n	800114c <LCD_DrawWBig+0xe0>
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	2b07      	cmp	r3, #7
 8001108:	dd08      	ble.n	800111c <LCD_DrawWBig+0xb0>
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	2b0b      	cmp	r3, #11
 800110e:	dc05      	bgt.n	800111c <LCD_DrawWBig+0xb0>
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	2b09      	cmp	r3, #9
 8001114:	dd02      	ble.n	800111c <LCD_DrawWBig+0xb0>
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	2b0d      	cmp	r3, #13
 800111a:	dd17      	ble.n	800114c <LCD_DrawWBig+0xe0>
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	2b0b      	cmp	r3, #11
 8001120:	dd08      	ble.n	8001134 <LCD_DrawWBig+0xc8>
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	2b0f      	cmp	r3, #15
 8001126:	dc05      	bgt.n	8001134 <LCD_DrawWBig+0xc8>
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	2b08      	cmp	r3, #8
 800112c:	dd02      	ble.n	8001134 <LCD_DrawWBig+0xc8>
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	2b0c      	cmp	r3, #12
 8001132:	dd0b      	ble.n	800114c <LCD_DrawWBig+0xe0>
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	2b05      	cmp	r3, #5
 8001138:	dd1d      	ble.n	8001176 <LCD_DrawWBig+0x10a>
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	2b09      	cmp	r3, #9
 800113e:	dc1a      	bgt.n	8001176 <LCD_DrawWBig+0x10a>
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	2b05      	cmp	r3, #5
 8001144:	dd17      	ble.n	8001176 <LCD_DrawWBig+0x10a>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	2b0b      	cmp	r3, #11
 800114a:	dc14      	bgt.n	8001176 <LCD_DrawWBig+0x10a>
				int y = y0 + dy;
 800114c:	88bb      	ldrh	r3, [r7, #4]
 800114e:	69fa      	ldr	r2, [r7, #28]
 8001150:	4413      	add	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4413      	add	r3, r2
 800115a:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 800115c:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <LCD_DrawWBig+0x134>)
 800115e:	7818      	ldrb	r0, [r3, #0]
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4613      	mov	r3, r2
 8001164:	011b      	lsls	r3, r3, #4
 8001166:	1a9b      	subs	r3, r3, r2
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	461a      	mov	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	4619      	mov	r1, r3
 8001172:	f000 fb2f 	bl	80017d4 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	3301      	adds	r3, #1
 800117a:	61bb      	str	r3, [r7, #24]
 800117c:	7dfb      	ldrb	r3, [r7, #23]
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	429a      	cmp	r2, r3
 8001182:	dd83      	ble.n	800108c <LCD_DrawWBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	3301      	adds	r3, #1
 8001188:	61fb      	str	r3, [r7, #28]
 800118a:	7dfb      	ldrb	r3, [r7, #23]
 800118c:	69fa      	ldr	r2, [r7, #28]
 800118e:	429a      	cmp	r2, r3
 8001190:	f77f af79 	ble.w	8001086 <LCD_DrawWBig+0x1a>
			}
		}
	}
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3720      	adds	r7, #32
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000000 	.word	0x20000000

080011a4 <LCD_GpioInit>:
extern SPI_HandleTypeDef hspi5;
extern LTDC_HandleTypeDef hltdc;

uint8_t GRAM[LCD_WIDTH * LCD_HEIGHT] = {30, 30, 30, 10, 123, 123, 123, 123, 123, 123};

void LCD_GpioInit() {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0
	MX_SPI5_Init();
 80011aa:	f001 f9b1 	bl	8002510 <MX_SPI5_Init>
	// Enable Port Clock
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	4b20      	ldr	r3, [pc, #128]	; (8001234 <LCD_GpioInit+0x90>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a1f      	ldr	r2, [pc, #124]	; (8001234 <LCD_GpioInit+0x90>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <LCD_GpioInit+0x90>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <LCD_GpioInit+0x90>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a18      	ldr	r2, [pc, #96]	; (8001234 <LCD_GpioInit+0x90>)
 80011d4:	f043 0308 	orr.w	r3, r3, #8
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <LCD_GpioInit+0x90>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
	// Initialize NCS and DCX Port
	GPIO_InitTypeDef Gpio_InitStruct;
	Gpio_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	613b      	str	r3, [r7, #16]
	Gpio_InitStruct.Pull = GPIO_PULLUP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	617b      	str	r3, [r7, #20]
	Gpio_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	61bb      	str	r3, [r7, #24]
	Gpio_InitStruct.Pin = LCD_NCS_PIN;
 80011f2:	2304      	movs	r3, #4
 80011f4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LCD_NCS_GPIO, &Gpio_InitStruct);
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	4619      	mov	r1, r3
 80011fc:	480e      	ldr	r0, [pc, #56]	; (8001238 <LCD_GpioInit+0x94>)
 80011fe:	f001 fc41 	bl	8002a84 <HAL_GPIO_Init>
	Gpio_InitStruct.Pin = LCD_DCX_PIN;
 8001202:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001206:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LCD_DCX_GPIO, &Gpio_InitStruct);
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	4619      	mov	r1, r3
 800120e:	480b      	ldr	r0, [pc, #44]	; (800123c <LCD_GpioInit+0x98>)
 8001210:	f001 fc38 	bl	8002a84 <HAL_GPIO_Init>
	// Initialize NCS and DCX value
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	2104      	movs	r1, #4
 8001218:	4807      	ldr	r0, [pc, #28]	; (8001238 <LCD_GpioInit+0x94>)
 800121a:	f001 fddf 	bl	8002ddc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, GPIO_PIN_SET);
 800121e:	2201      	movs	r2, #1
 8001220:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001224:	4805      	ldr	r0, [pc, #20]	; (800123c <LCD_GpioInit+0x98>)
 8001226:	f001 fdd9 	bl	8002ddc <HAL_GPIO_WritePin>
}
 800122a:	bf00      	nop
 800122c:	3720      	adds	r7, #32
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	40020800 	.word	0x40020800
 800123c:	40020c00 	.word	0x40020c00

08001240 <LCD_LtdcInit>:

void LCD_LtdcInit() {
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	MX_LTDC_Init();
 8001244:	f000 faf0 	bl	8001828 <MX_LTDC_Init>
	HAL_LTDC_SetAddress(&hltdc, (uint32_t)GRAM, LTDC_LAYER_1);
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <LCD_LtdcInit+0x38>)
 800124a:	2200      	movs	r2, #0
 800124c:	4619      	mov	r1, r3
 800124e:	480b      	ldr	r0, [pc, #44]	; (800127c <LCD_LtdcInit+0x3c>)
 8001250:	f001 ffc1 	bl	80031d6 <HAL_LTDC_SetAddress>
	HAL_LTDC_ConfigCLUT(&hltdc, CLUT, 256, LTDC_LAYER_1);
 8001254:	2300      	movs	r3, #0
 8001256:	f44f 7280 	mov.w	r2, #256	; 0x100
 800125a:	4909      	ldr	r1, [pc, #36]	; (8001280 <LCD_LtdcInit+0x40>)
 800125c:	4807      	ldr	r0, [pc, #28]	; (800127c <LCD_LtdcInit+0x3c>)
 800125e:	f001 ff0d 	bl	800307c <HAL_LTDC_ConfigCLUT>
	HAL_LTDC_EnableCLUT(&hltdc, LTDC_LAYER_1);
 8001262:	2100      	movs	r1, #0
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <LCD_LtdcInit+0x3c>)
 8001266:	f001 ff7d 	bl	8003164 <HAL_LTDC_EnableCLUT>
	HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 800126a:	2102      	movs	r1, #2
 800126c:	4803      	ldr	r0, [pc, #12]	; (800127c <LCD_LtdcInit+0x3c>)
 800126e:	f001 ffe8 	bl	8003242 <HAL_LTDC_Reload>
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000004 	.word	0x20000004
 800127c:	20012c30 	.word	0x20012c30
 8001280:	08004728 	.word	0x08004728

08001284 <LCD_DispInit_Spi>:

void LCD_DispInit_Spi() {
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	//SOFTWARE RESET
	LCD_WriteCommand(0x01);
 8001288:	2001      	movs	r0, #1
 800128a:	f000 fa47 	bl	800171c <LCD_WriteCommand>
	HAL_Delay(1000);
 800128e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001292:	f001 fac1 	bl	8002818 <HAL_Delay>

	//POWER CONTROL A
	LCD_WriteCommand(0xCB);
 8001296:	20cb      	movs	r0, #203	; 0xcb
 8001298:	f000 fa40 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x39);
 800129c:	2039      	movs	r0, #57	; 0x39
 800129e:	f000 fa6b 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x2C);
 80012a2:	202c      	movs	r0, #44	; 0x2c
 80012a4:	f000 fa68 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x00);
 80012a8:	2000      	movs	r0, #0
 80012aa:	f000 fa65 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x34);
 80012ae:	2034      	movs	r0, #52	; 0x34
 80012b0:	f000 fa62 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x02);
 80012b4:	2002      	movs	r0, #2
 80012b6:	f000 fa5f 	bl	8001778 <LCD_WriteData>

	//POWER CONTROL B
	LCD_WriteCommand(0xCF);
 80012ba:	20cf      	movs	r0, #207	; 0xcf
 80012bc:	f000 fa2e 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80012c0:	2000      	movs	r0, #0
 80012c2:	f000 fa59 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0xC1);
 80012c6:	20c1      	movs	r0, #193	; 0xc1
 80012c8:	f000 fa56 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x30);
 80012cc:	2030      	movs	r0, #48	; 0x30
 80012ce:	f000 fa53 	bl	8001778 <LCD_WriteData>

	//DRIVER TIMING CONTROL A
	LCD_WriteCommand(0xE8);
 80012d2:	20e8      	movs	r0, #232	; 0xe8
 80012d4:	f000 fa22 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x85);
 80012d8:	2085      	movs	r0, #133	; 0x85
 80012da:	f000 fa4d 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x00);
 80012de:	2000      	movs	r0, #0
 80012e0:	f000 fa4a 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x78);
 80012e4:	2078      	movs	r0, #120	; 0x78
 80012e6:	f000 fa47 	bl	8001778 <LCD_WriteData>

	//DRIVER TIMING CONTROL B
	LCD_WriteCommand(0xEA);
 80012ea:	20ea      	movs	r0, #234	; 0xea
 80012ec:	f000 fa16 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80012f0:	2000      	movs	r0, #0
 80012f2:	f000 fa41 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x00);
 80012f6:	2000      	movs	r0, #0
 80012f8:	f000 fa3e 	bl	8001778 <LCD_WriteData>

	//POWER ON SEQUENCE CONTROL
	LCD_WriteCommand(0xED);
 80012fc:	20ed      	movs	r0, #237	; 0xed
 80012fe:	f000 fa0d 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x64);
 8001302:	2064      	movs	r0, #100	; 0x64
 8001304:	f000 fa38 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x03);
 8001308:	2003      	movs	r0, #3
 800130a:	f000 fa35 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x12);
 800130e:	2012      	movs	r0, #18
 8001310:	f000 fa32 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x81);
 8001314:	2081      	movs	r0, #129	; 0x81
 8001316:	f000 fa2f 	bl	8001778 <LCD_WriteData>

	//PUMP RATIO CONTROL
	LCD_WriteCommand(0xF7);
 800131a:	20f7      	movs	r0, #247	; 0xf7
 800131c:	f000 f9fe 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x20);
 8001320:	2020      	movs	r0, #32
 8001322:	f000 fa29 	bl	8001778 <LCD_WriteData>

	//POWER CONTROL,VRH[5:0]
	LCD_WriteCommand(0xC0);
 8001326:	20c0      	movs	r0, #192	; 0xc0
 8001328:	f000 f9f8 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x23);
 800132c:	2023      	movs	r0, #35	; 0x23
 800132e:	f000 fa23 	bl	8001778 <LCD_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	LCD_WriteCommand(0xC1);
 8001332:	20c1      	movs	r0, #193	; 0xc1
 8001334:	f000 f9f2 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x10);
 8001338:	2010      	movs	r0, #16
 800133a:	f000 fa1d 	bl	8001778 <LCD_WriteData>

	//VCM CONTROL
	LCD_WriteCommand(0xC5);
 800133e:	20c5      	movs	r0, #197	; 0xc5
 8001340:	f000 f9ec 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x3E);
 8001344:	203e      	movs	r0, #62	; 0x3e
 8001346:	f000 fa17 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x28);
 800134a:	2028      	movs	r0, #40	; 0x28
 800134c:	f000 fa14 	bl	8001778 <LCD_WriteData>

	//VCM CONTROL 2
	LCD_WriteCommand(0xC7);
 8001350:	20c7      	movs	r0, #199	; 0xc7
 8001352:	f000 f9e3 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x86);
 8001356:	2086      	movs	r0, #134	; 0x86
 8001358:	f000 fa0e 	bl	8001778 <LCD_WriteData>

	//MEMORY ACCESS CONTROL
	LCD_WriteCommand(0x36);
 800135c:	2036      	movs	r0, #54	; 0x36
 800135e:	f000 f9dd 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x48);
 8001362:	2048      	movs	r0, #72	; 0x48
 8001364:	f000 fa08 	bl	8001778 <LCD_WriteData>

	//PIXEL FORMAT
	LCD_WriteCommand(0x3A);
 8001368:	203a      	movs	r0, #58	; 0x3a
 800136a:	f000 f9d7 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x55);
 800136e:	2055      	movs	r0, #85	; 0x55
 8001370:	f000 fa02 	bl	8001778 <LCD_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	LCD_WriteCommand(0xB1);
 8001374:	20b1      	movs	r0, #177	; 0xb1
 8001376:	f000 f9d1 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800137a:	2000      	movs	r0, #0
 800137c:	f000 f9fc 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x18);
 8001380:	2018      	movs	r0, #24
 8001382:	f000 f9f9 	bl	8001778 <LCD_WriteData>

	//DISPLAY FUNCTION CONTROL
	LCD_WriteCommand(0xB6);
 8001386:	20b6      	movs	r0, #182	; 0xb6
 8001388:	f000 f9c8 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x08);
 800138c:	2008      	movs	r0, #8
 800138e:	f000 f9f3 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x82);
 8001392:	2082      	movs	r0, #130	; 0x82
 8001394:	f000 f9f0 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x27);
 8001398:	2027      	movs	r0, #39	; 0x27
 800139a:	f000 f9ed 	bl	8001778 <LCD_WriteData>

	//3GAMMA FUNCTION DISABLE
	LCD_WriteCommand(0xF2);
 800139e:	20f2      	movs	r0, #242	; 0xf2
 80013a0:	f000 f9bc 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80013a4:	2000      	movs	r0, #0
 80013a6:	f000 f9e7 	bl	8001778 <LCD_WriteData>

	//GAMMA CURVE SELECTED
	LCD_WriteCommand(0x26);
 80013aa:	2026      	movs	r0, #38	; 0x26
 80013ac:	f000 f9b6 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x01);
 80013b0:	2001      	movs	r0, #1
 80013b2:	f000 f9e1 	bl	8001778 <LCD_WriteData>

	//POSITIVE GAMMA CORRECTION
	LCD_WriteCommand(0xE0);
 80013b6:	20e0      	movs	r0, #224	; 0xe0
 80013b8:	f000 f9b0 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x0F);
 80013bc:	200f      	movs	r0, #15
 80013be:	f000 f9db 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x31);
 80013c2:	2031      	movs	r0, #49	; 0x31
 80013c4:	f000 f9d8 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x2B);
 80013c8:	202b      	movs	r0, #43	; 0x2b
 80013ca:	f000 f9d5 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x0C);
 80013ce:	200c      	movs	r0, #12
 80013d0:	f000 f9d2 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x0E);
 80013d4:	200e      	movs	r0, #14
 80013d6:	f000 f9cf 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x08);
 80013da:	2008      	movs	r0, #8
 80013dc:	f000 f9cc 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x4E);
 80013e0:	204e      	movs	r0, #78	; 0x4e
 80013e2:	f000 f9c9 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0xF1);
 80013e6:	20f1      	movs	r0, #241	; 0xf1
 80013e8:	f000 f9c6 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x37);
 80013ec:	2037      	movs	r0, #55	; 0x37
 80013ee:	f000 f9c3 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x07);
 80013f2:	2007      	movs	r0, #7
 80013f4:	f000 f9c0 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x10);
 80013f8:	2010      	movs	r0, #16
 80013fa:	f000 f9bd 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x03);
 80013fe:	2003      	movs	r0, #3
 8001400:	f000 f9ba 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x0E);
 8001404:	200e      	movs	r0, #14
 8001406:	f000 f9b7 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x09);
 800140a:	2009      	movs	r0, #9
 800140c:	f000 f9b4 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x00);
 8001410:	2000      	movs	r0, #0
 8001412:	f000 f9b1 	bl	8001778 <LCD_WriteData>

	//NEGATIVE GAMMA CORRECTION
	LCD_WriteCommand(0xE1);
 8001416:	20e1      	movs	r0, #225	; 0xe1
 8001418:	f000 f980 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800141c:	2000      	movs	r0, #0
 800141e:	f000 f9ab 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x0E);
 8001422:	200e      	movs	r0, #14
 8001424:	f000 f9a8 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x14);
 8001428:	2014      	movs	r0, #20
 800142a:	f000 f9a5 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x03);
 800142e:	2003      	movs	r0, #3
 8001430:	f000 f9a2 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x11);
 8001434:	2011      	movs	r0, #17
 8001436:	f000 f99f 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x07);
 800143a:	2007      	movs	r0, #7
 800143c:	f000 f99c 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x31);
 8001440:	2031      	movs	r0, #49	; 0x31
 8001442:	f000 f999 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0xC1);
 8001446:	20c1      	movs	r0, #193	; 0xc1
 8001448:	f000 f996 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x48);
 800144c:	2048      	movs	r0, #72	; 0x48
 800144e:	f000 f993 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x08);
 8001452:	2008      	movs	r0, #8
 8001454:	f000 f990 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x0F);
 8001458:	200f      	movs	r0, #15
 800145a:	f000 f98d 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x0C);
 800145e:	200c      	movs	r0, #12
 8001460:	f000 f98a 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x31);
 8001464:	2031      	movs	r0, #49	; 0x31
 8001466:	f000 f987 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x36);
 800146a:	2036      	movs	r0, #54	; 0x36
 800146c:	f000 f984 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x0F);
 8001470:	200f      	movs	r0, #15
 8001472:	f000 f981 	bl	8001778 <LCD_WriteData>

	//EXIT SLEEP
	LCD_WriteCommand(0x11);
 8001476:	2011      	movs	r0, #17
 8001478:	f000 f950 	bl	800171c <LCD_WriteCommand>
	HAL_Delay(120);
 800147c:	2078      	movs	r0, #120	; 0x78
 800147e:	f001 f9cb 	bl	8002818 <HAL_Delay>

	//TURN ON DISPLAY
	LCD_WriteCommand(0x29);
 8001482:	2029      	movs	r0, #41	; 0x29
 8001484:	f000 f94a 	bl	800171c <LCD_WriteCommand>
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}

0800148c <LCD_DispInit_Ltdc>:

void LCD_DispInit_Ltdc() {
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	LCD_WriteCommand(0xCA);
 8001490:	20ca      	movs	r0, #202	; 0xca
 8001492:	f000 f943 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0xC3);
 8001496:	20c3      	movs	r0, #195	; 0xc3
 8001498:	f000 f96e 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x08);
 800149c:	2008      	movs	r0, #8
 800149e:	f000 f96b 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x50);
 80014a2:	2050      	movs	r0, #80	; 0x50
 80014a4:	f000 f968 	bl	8001778 <LCD_WriteData>

	// LCD_POWERB
	LCD_WriteCommand(LCD_POWERB);
 80014a8:	20cf      	movs	r0, #207	; 0xcf
 80014aa:	f000 f937 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80014ae:	2000      	movs	r0, #0
 80014b0:	f000 f962 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0xC1);
 80014b4:	20c1      	movs	r0, #193	; 0xc1
 80014b6:	f000 f95f 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x30);
 80014ba:	2030      	movs	r0, #48	; 0x30
 80014bc:	f000 f95c 	bl	8001778 <LCD_WriteData>

	// LCD_POWER_SEQ
	LCD_WriteCommand(LCD_POWER_SEQ);
 80014c0:	20ed      	movs	r0, #237	; 0xed
 80014c2:	f000 f92b 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x64);
 80014c6:	2064      	movs	r0, #100	; 0x64
 80014c8:	f000 f956 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x03);
 80014cc:	2003      	movs	r0, #3
 80014ce:	f000 f953 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x12);
 80014d2:	2012      	movs	r0, #18
 80014d4:	f000 f950 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x81);
 80014d8:	2081      	movs	r0, #129	; 0x81
 80014da:	f000 f94d 	bl	8001778 <LCD_WriteData>

	// LCD_DTCA
	LCD_WriteCommand(LCD_DTCA);
 80014de:	20e8      	movs	r0, #232	; 0xe8
 80014e0:	f000 f91c 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x85);
 80014e4:	2085      	movs	r0, #133	; 0x85
 80014e6:	f000 f947 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x00);
 80014ea:	2000      	movs	r0, #0
 80014ec:	f000 f944 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x78);
 80014f0:	2078      	movs	r0, #120	; 0x78
 80014f2:	f000 f941 	bl	8001778 <LCD_WriteData>

	// LCD_POWERA
	LCD_WriteCommand(LCD_POWERA);
 80014f6:	20cb      	movs	r0, #203	; 0xcb
 80014f8:	f000 f910 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x39);
 80014fc:	2039      	movs	r0, #57	; 0x39
 80014fe:	f000 f93b 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x2C);
 8001502:	202c      	movs	r0, #44	; 0x2c
 8001504:	f000 f938 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x00);
 8001508:	2000      	movs	r0, #0
 800150a:	f000 f935 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x34);
 800150e:	2034      	movs	r0, #52	; 0x34
 8001510:	f000 f932 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x02);
 8001514:	2002      	movs	r0, #2
 8001516:	f000 f92f 	bl	8001778 <LCD_WriteData>

	// LCD_RPC
	LCD_WriteCommand(LCD_PRC);
 800151a:	20f7      	movs	r0, #247	; 0xf7
 800151c:	f000 f8fe 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x20);
 8001520:	2020      	movs	r0, #32
 8001522:	f000 f929 	bl	8001778 <LCD_WriteData>

	// LCD_DTCB
	LCD_WriteCommand(LCD_DTCB);
 8001526:	20ea      	movs	r0, #234	; 0xea
 8001528:	f000 f8f8 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800152c:	2000      	movs	r0, #0
 800152e:	f000 f923 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x00);
 8001532:	2000      	movs	r0, #0
 8001534:	f000 f920 	bl	8001778 <LCD_WriteData>

	// LCD_FRMCTR1
	LCD_WriteCommand(LCD_FRMCTR1);
 8001538:	20b1      	movs	r0, #177	; 0xb1
 800153a:	f000 f8ef 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800153e:	2000      	movs	r0, #0
 8001540:	f000 f91a 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x1B);
 8001544:	201b      	movs	r0, #27
 8001546:	f000 f917 	bl	8001778 <LCD_WriteData>

	// LCD_DFC
	LCD_WriteCommand(LCD_DFC);
 800154a:	20b6      	movs	r0, #182	; 0xb6
 800154c:	f000 f8e6 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 8001550:	200a      	movs	r0, #10
 8001552:	f000 f911 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0xA2);
 8001556:	20a2      	movs	r0, #162	; 0xa2
 8001558:	f000 f90e 	bl	8001778 <LCD_WriteData>

	// LCD_POWER1
	LCD_WriteCommand(LCD_POWER1);
 800155c:	20c0      	movs	r0, #192	; 0xc0
 800155e:	f000 f8dd 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x10);
 8001562:	2010      	movs	r0, #16
 8001564:	f000 f908 	bl	8001778 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER2);
 8001568:	20c1      	movs	r0, #193	; 0xc1
 800156a:	f000 f8d7 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x10);
 800156e:	2010      	movs	r0, #16
 8001570:	f000 f902 	bl	8001778 <LCD_WriteData>

	// LCD_VCOM
	LCD_WriteCommand(LCD_VCOM1);
 8001574:	20c5      	movs	r0, #197	; 0xc5
 8001576:	f000 f8d1 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x45);
 800157a:	2045      	movs	r0, #69	; 0x45
 800157c:	f000 f8fc 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x15);
 8001580:	2015      	movs	r0, #21
 8001582:	f000 f8f9 	bl	8001778 <LCD_WriteData>
	LCD_WriteCommand(LCD_VCOM2);
 8001586:	20c7      	movs	r0, #199	; 0xc7
 8001588:	f000 f8c8 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x90);
 800158c:	2090      	movs	r0, #144	; 0x90
 800158e:	f000 f8f3 	bl	8001778 <LCD_WriteData>

	// LCD_MAC
	LCD_WriteCommand(LCD_MAC);
 8001592:	2036      	movs	r0, #54	; 0x36
 8001594:	f000 f8c2 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0xC8);
 8001598:	20c8      	movs	r0, #200	; 0xc8
 800159a:	f000 f8ed 	bl	8001778 <LCD_WriteData>

	// LCD_GAMMA
	LCD_WriteCommand(LCD_3GAMMA_EN);
 800159e:	20f2      	movs	r0, #242	; 0xf2
 80015a0:	f000 f8bc 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80015a4:	2000      	movs	r0, #0
 80015a6:	f000 f8e7 	bl	8001778 <LCD_WriteData>

	// LCD_RGB_INTERFACE
	LCD_WriteCommand(LCD_RGB_INTERFACE);
 80015aa:	20b0      	movs	r0, #176	; 0xb0
 80015ac:	f000 f8b6 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0xC2);
 80015b0:	20c2      	movs	r0, #194	; 0xc2
 80015b2:	f000 f8e1 	bl	8001778 <LCD_WriteData>

	// LCD_DFC
	LCD_WriteCommand(LCD_DFC);
 80015b6:	20b6      	movs	r0, #182	; 0xb6
 80015b8:	f000 f8b0 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 80015bc:	200a      	movs	r0, #10
 80015be:	f000 f8db 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0xA7);
 80015c2:	20a7      	movs	r0, #167	; 0xa7
 80015c4:	f000 f8d8 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x27);
 80015c8:	2027      	movs	r0, #39	; 0x27
 80015ca:	f000 f8d5 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x04);
 80015ce:	2004      	movs	r0, #4
 80015d0:	f000 f8d2 	bl	8001778 <LCD_WriteData>

	// COLUMN_ADDR
	LCD_WriteCommand(LCD_COLUMN_ADDR);
 80015d4:	202a      	movs	r0, #42	; 0x2a
 80015d6:	f000 f8a1 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80015da:	2000      	movs	r0, #0
 80015dc:	f000 f8cc 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x00);
 80015e0:	2000      	movs	r0, #0
 80015e2:	f000 f8c9 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x00);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f000 f8c6 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0xEF);
 80015ec:	20ef      	movs	r0, #239	; 0xef
 80015ee:	f000 f8c3 	bl	8001778 <LCD_WriteData>

	// PAGE_ADDR
	LCD_WriteCommand(LCD_PAGE_ADDR);
 80015f2:	202b      	movs	r0, #43	; 0x2b
 80015f4:	f000 f892 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80015f8:	2000      	movs	r0, #0
 80015fa:	f000 f8bd 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x00);
 80015fe:	2000      	movs	r0, #0
 8001600:	f000 f8ba 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x01);
 8001604:	2001      	movs	r0, #1
 8001606:	f000 f8b7 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x3F);
 800160a:	203f      	movs	r0, #63	; 0x3f
 800160c:	f000 f8b4 	bl	8001778 <LCD_WriteData>

	// INERFACE
	LCD_WriteCommand(LCD_INTERFACE);
 8001610:	20f6      	movs	r0, #246	; 0xf6
 8001612:	f000 f883 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x01);
 8001616:	2001      	movs	r0, #1
 8001618:	f000 f8ae 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x00);
 800161c:	2000      	movs	r0, #0
 800161e:	f000 f8ab 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x06);
 8001622:	2006      	movs	r0, #6
 8001624:	f000 f8a8 	bl	8001778 <LCD_WriteData>

	// LCD_GRAM
	LCD_WriteCommand(LCD_GRAM);
 8001628:	202c      	movs	r0, #44	; 0x2c
 800162a:	f000 f877 	bl	800171c <LCD_WriteCommand>
	HAL_Delay(200);
 800162e:	20c8      	movs	r0, #200	; 0xc8
 8001630:	f001 f8f2 	bl	8002818 <HAL_Delay>

	// LCD_GAMMA
	LCD_WriteCommand(LCD_GAMMA);
 8001634:	2026      	movs	r0, #38	; 0x26
 8001636:	f000 f871 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x01);
 800163a:	2001      	movs	r0, #1
 800163c:	f000 f89c 	bl	8001778 <LCD_WriteData>

	// LCD_PGAMMA
	LCD_WriteCommand(LCD_PGAMMA);
 8001640:	20e0      	movs	r0, #224	; 0xe0
 8001642:	f000 f86b 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x0F);
 8001646:	200f      	movs	r0, #15
 8001648:	f000 f896 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x29);
 800164c:	2029      	movs	r0, #41	; 0x29
 800164e:	f000 f893 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x24);
 8001652:	2024      	movs	r0, #36	; 0x24
 8001654:	f000 f890 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x0C);
 8001658:	200c      	movs	r0, #12
 800165a:	f000 f88d 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x0E);
 800165e:	200e      	movs	r0, #14
 8001660:	f000 f88a 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x09);
 8001664:	2009      	movs	r0, #9
 8001666:	f000 f887 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x4E);
 800166a:	204e      	movs	r0, #78	; 0x4e
 800166c:	f000 f884 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x78);
 8001670:	2078      	movs	r0, #120	; 0x78
 8001672:	f000 f881 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x3C);
 8001676:	203c      	movs	r0, #60	; 0x3c
 8001678:	f000 f87e 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x09);
 800167c:	2009      	movs	r0, #9
 800167e:	f000 f87b 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x13);
 8001682:	2013      	movs	r0, #19
 8001684:	f000 f878 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x05);
 8001688:	2005      	movs	r0, #5
 800168a:	f000 f875 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x17);
 800168e:	2017      	movs	r0, #23
 8001690:	f000 f872 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x11);
 8001694:	2011      	movs	r0, #17
 8001696:	f000 f86f 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x00);
 800169a:	2000      	movs	r0, #0
 800169c:	f000 f86c 	bl	8001778 <LCD_WriteData>
	LCD_WriteCommand(LCD_NGAMMA);
 80016a0:	20e1      	movs	r0, #225	; 0xe1
 80016a2:	f000 f83b 	bl	800171c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80016a6:	2000      	movs	r0, #0
 80016a8:	f000 f866 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x16);
 80016ac:	2016      	movs	r0, #22
 80016ae:	f000 f863 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x1B);
 80016b2:	201b      	movs	r0, #27
 80016b4:	f000 f860 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x04);
 80016b8:	2004      	movs	r0, #4
 80016ba:	f000 f85d 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x11);
 80016be:	2011      	movs	r0, #17
 80016c0:	f000 f85a 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x07);
 80016c4:	2007      	movs	r0, #7
 80016c6:	f000 f857 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x31);
 80016ca:	2031      	movs	r0, #49	; 0x31
 80016cc:	f000 f854 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x33);
 80016d0:	2033      	movs	r0, #51	; 0x33
 80016d2:	f000 f851 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x42);
 80016d6:	2042      	movs	r0, #66	; 0x42
 80016d8:	f000 f84e 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x05);
 80016dc:	2005      	movs	r0, #5
 80016de:	f000 f84b 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x0C);
 80016e2:	200c      	movs	r0, #12
 80016e4:	f000 f848 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x0A);
 80016e8:	200a      	movs	r0, #10
 80016ea:	f000 f845 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x28);
 80016ee:	2028      	movs	r0, #40	; 0x28
 80016f0:	f000 f842 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x2F);
 80016f4:	202f      	movs	r0, #47	; 0x2f
 80016f6:	f000 f83f 	bl	8001778 <LCD_WriteData>
	LCD_WriteData(0x0F);
 80016fa:	200f      	movs	r0, #15
 80016fc:	f000 f83c 	bl	8001778 <LCD_WriteData>

	// LCD_SLEEP_OUT
	LCD_WriteCommand(LCD_SLEEP_OUT);
 8001700:	2011      	movs	r0, #17
 8001702:	f000 f80b 	bl	800171c <LCD_WriteCommand>
	HAL_Delay(200);
 8001706:	20c8      	movs	r0, #200	; 0xc8
 8001708:	f001 f886 	bl	8002818 <HAL_Delay>

	// LCD_DISP_ON
	LCD_WriteCommand(LCD_DISPLAY_ON);
 800170c:	2029      	movs	r0, #41	; 0x29
 800170e:	f000 f805 	bl	800171c <LCD_WriteCommand>

	// LCD_WRITE_RAM
	LCD_WriteCommand(LCD_GRAM);
 8001712:	202c      	movs	r0, #44	; 0x2c
 8001714:	f000 f802 	bl	800171c <LCD_WriteCommand>
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}

0800171c <LCD_WriteCommand>:

void LCD_ModeSelect(DcMode mode){
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, mode);
}

void LCD_WriteCommand(uint8_t data) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	2104      	movs	r1, #4
 800172a:	4810      	ldr	r0, [pc, #64]	; (800176c <LCD_WriteCommand+0x50>)
 800172c:	f001 fb56 	bl	8002ddc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001736:	480e      	ldr	r0, [pc, #56]	; (8001770 <LCD_WriteCommand+0x54>)
 8001738:	f001 fb50 	bl	8002ddc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &data, 1, 1);
 800173c:	1df9      	adds	r1, r7, #7
 800173e:	2301      	movs	r3, #1
 8001740:	2201      	movs	r2, #1
 8001742:	480c      	ldr	r0, [pc, #48]	; (8001774 <LCD_WriteCommand+0x58>)
 8001744:	f002 fdf4 	bl	8004330 <HAL_SPI_Transmit>
	while(!((hspi5.Instance->SR) & SPI_SR_TXE));
 8001748:	bf00      	nop
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <LCD_WriteCommand+0x58>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f8      	beq.n	800174a <LCD_WriteCommand+0x2e>
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
 8001758:	2201      	movs	r2, #1
 800175a:	2104      	movs	r1, #4
 800175c:	4803      	ldr	r0, [pc, #12]	; (800176c <LCD_WriteCommand+0x50>)
 800175e:	f001 fb3d 	bl	8002ddc <HAL_GPIO_WritePin>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40020800 	.word	0x40020800
 8001770:	40020c00 	.word	0x40020c00
 8001774:	20012cd8 	.word	0x20012cd8

08001778 <LCD_WriteData>:

void LCD_WriteData(uint8_t data) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_RESET);
 8001782:	2200      	movs	r2, #0
 8001784:	2104      	movs	r1, #4
 8001786:	4810      	ldr	r0, [pc, #64]	; (80017c8 <LCD_WriteData+0x50>)
 8001788:	f001 fb28 	bl	8002ddc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, GPIO_PIN_SET);
 800178c:	2201      	movs	r2, #1
 800178e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001792:	480e      	ldr	r0, [pc, #56]	; (80017cc <LCD_WriteData+0x54>)
 8001794:	f001 fb22 	bl	8002ddc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &data, 1, 10);
 8001798:	1df9      	adds	r1, r7, #7
 800179a:	230a      	movs	r3, #10
 800179c:	2201      	movs	r2, #1
 800179e:	480c      	ldr	r0, [pc, #48]	; (80017d0 <LCD_WriteData+0x58>)
 80017a0:	f002 fdc6 	bl	8004330 <HAL_SPI_Transmit>
	while(!((hspi5.Instance->SR) & SPI_SR_TXE));
 80017a4:	bf00      	nop
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <LCD_WriteData+0x58>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0f8      	beq.n	80017a6 <LCD_WriteData+0x2e>
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
 80017b4:	2201      	movs	r2, #1
 80017b6:	2104      	movs	r1, #4
 80017b8:	4803      	ldr	r0, [pc, #12]	; (80017c8 <LCD_WriteData+0x50>)
 80017ba:	f001 fb0f 	bl	8002ddc <HAL_GPIO_WritePin>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40020800 	.word	0x40020800
 80017cc:	40020c00 	.word	0x40020c00
 80017d0:	20012cd8 	.word	0x20012cd8

080017d4 <LCD_WriteGRAM>:
	HAL_SPI_Transmit(&hspi5, data, 2, 10);
	while(!((hspi5.Instance->SR) & SPI_SR_TXE));
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
}

void LCD_WriteGRAM(uint8_t data, uint32_t addr) {
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	71fb      	strb	r3, [r7, #7]
	if (addr >= LCD_WIDTH * LCD_HEIGHT)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80017e6:	d205      	bcs.n	80017f4 <LCD_WriteGRAM+0x20>
		return;
	GRAM[addr] = data;
 80017e8:	4a05      	ldr	r2, [pc, #20]	; (8001800 <LCD_WriteGRAM+0x2c>)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	4413      	add	r3, r2
 80017ee:	79fa      	ldrb	r2, [r7, #7]
 80017f0:	701a      	strb	r2, [r3, #0]
 80017f2:	e000      	b.n	80017f6 <LCD_WriteGRAM+0x22>
		return;
 80017f4:	bf00      	nop
}
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	20000004 	.word	0x20000004

08001804 <LCD_ClearScreenLtdc>:

void LCD_ClearScreenLtdc(uint8_t c) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
	memset(GRAM, c, LCD_WIDTH * LCD_HEIGHT);
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8001814:	4619      	mov	r1, r3
 8001816:	4803      	ldr	r0, [pc, #12]	; (8001824 <LCD_ClearScreenLtdc+0x20>)
 8001818:	f002 ff72 	bl	8004700 <memset>
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000004 	.word	0x20000004

08001828 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;


void MX_LTDC_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08e      	sub	sp, #56	; 0x38
 800182c:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2234      	movs	r2, #52	; 0x34
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f002 ff63 	bl	8004700 <memset>

  hltdc.Instance = LTDC;
 800183a:	4b39      	ldr	r3, [pc, #228]	; (8001920 <MX_LTDC_Init+0xf8>)
 800183c:	4a39      	ldr	r2, [pc, #228]	; (8001924 <MX_LTDC_Init+0xfc>)
 800183e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001840:	4b37      	ldr	r3, [pc, #220]	; (8001920 <MX_LTDC_Init+0xf8>)
 8001842:	2200      	movs	r2, #0
 8001844:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001846:	4b36      	ldr	r3, [pc, #216]	; (8001920 <MX_LTDC_Init+0xf8>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800184c:	4b34      	ldr	r3, [pc, #208]	; (8001920 <MX_LTDC_Init+0xf8>)
 800184e:	2200      	movs	r2, #0
 8001850:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <MX_LTDC_Init+0xf8>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001858:	4b31      	ldr	r3, [pc, #196]	; (8001920 <MX_LTDC_Init+0xf8>)
 800185a:	2209      	movs	r2, #9
 800185c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800185e:	4b30      	ldr	r3, [pc, #192]	; (8001920 <MX_LTDC_Init+0xf8>)
 8001860:	2201      	movs	r2, #1
 8001862:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <MX_LTDC_Init+0xf8>)
 8001866:	221d      	movs	r2, #29
 8001868:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800186a:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <MX_LTDC_Init+0xf8>)
 800186c:	2203      	movs	r2, #3
 800186e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001870:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <MX_LTDC_Init+0xf8>)
 8001872:	f240 120d 	movw	r2, #269	; 0x10d
 8001876:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8001878:	4b29      	ldr	r3, [pc, #164]	; (8001920 <MX_LTDC_Init+0xf8>)
 800187a:	f240 1243 	movw	r2, #323	; 0x143
 800187e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001880:	4b27      	ldr	r3, [pc, #156]	; (8001920 <MX_LTDC_Init+0xf8>)
 8001882:	f240 1217 	movw	r2, #279	; 0x117
 8001886:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <MX_LTDC_Init+0xf8>)
 800188a:	f240 1247 	movw	r2, #327	; 0x147
 800188e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001890:	4b23      	ldr	r3, [pc, #140]	; (8001920 <MX_LTDC_Init+0xf8>)
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001898:	4b21      	ldr	r3, [pc, #132]	; (8001920 <MX_LTDC_Init+0xf8>)
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80018a0:	4b1f      	ldr	r3, [pc, #124]	; (8001920 <MX_LTDC_Init+0xf8>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80018a8:	481d      	ldr	r0, [pc, #116]	; (8001920 <MX_LTDC_Init+0xf8>)
 80018aa:	f001 fad5 	bl	8002e58 <HAL_LTDC_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80018b4:	f000 f9e6 	bl	8001c84 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 239;
 80018bc:	23ef      	movs	r3, #239	; 0xef
 80018be:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 319;
 80018c4:	f240 133f 	movw	r3, #319	; 0x13f
 80018c8:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_L8;
 80018ca:	2305      	movs	r3, #5
 80018cc:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0xff;
 80018ce:	23ff      	movs	r3, #255	; 0xff
 80018d0:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0x00;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80018d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018da:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80018dc:	2307      	movs	r3, #7
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80018e4:	23f0      	movs	r3, #240	; 0xf0
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80018e8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80018ec:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	2200      	movs	r2, #0
 8001904:	4619      	mov	r1, r3
 8001906:	4806      	ldr	r0, [pc, #24]	; (8001920 <MX_LTDC_Init+0xf8>)
 8001908:	f001 fb7a 	bl	8003000 <HAL_LTDC_ConfigLayer>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8001912:	f000 f9b7 	bl	8001c84 <Error_Handler>
  }

}
 8001916:	bf00      	nop
 8001918:	3738      	adds	r7, #56	; 0x38
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20012c30 	.word	0x20012c30
 8001924:	40016800 	.word	0x40016800

08001928 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b090      	sub	sp, #64	; 0x40
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a75      	ldr	r2, [pc, #468]	; (8001b1c <HAL_LTDC_MspInit+0x1f4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	f040 80e4 	bne.w	8001b14 <HAL_LTDC_MspInit+0x1ec>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800194c:	2300      	movs	r3, #0
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001950:	4b73      	ldr	r3, [pc, #460]	; (8001b20 <HAL_LTDC_MspInit+0x1f8>)
 8001952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001954:	4a72      	ldr	r2, [pc, #456]	; (8001b20 <HAL_LTDC_MspInit+0x1f8>)
 8001956:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800195a:	6453      	str	r3, [r2, #68]	; 0x44
 800195c:	4b70      	ldr	r3, [pc, #448]	; (8001b20 <HAL_LTDC_MspInit+0x1f8>)
 800195e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001960:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
 8001966:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001968:	2300      	movs	r3, #0
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
 800196c:	4b6c      	ldr	r3, [pc, #432]	; (8001b20 <HAL_LTDC_MspInit+0x1f8>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	4a6b      	ldr	r2, [pc, #428]	; (8001b20 <HAL_LTDC_MspInit+0x1f8>)
 8001972:	f043 0320 	orr.w	r3, r3, #32
 8001976:	6313      	str	r3, [r2, #48]	; 0x30
 8001978:	4b69      	ldr	r3, [pc, #420]	; (8001b20 <HAL_LTDC_MspInit+0x1f8>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	f003 0320 	and.w	r3, r3, #32
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001984:	2300      	movs	r3, #0
 8001986:	623b      	str	r3, [r7, #32]
 8001988:	4b65      	ldr	r3, [pc, #404]	; (8001b20 <HAL_LTDC_MspInit+0x1f8>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	4a64      	ldr	r2, [pc, #400]	; (8001b20 <HAL_LTDC_MspInit+0x1f8>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6313      	str	r3, [r2, #48]	; 0x30
 8001994:	4b62      	ldr	r3, [pc, #392]	; (8001b20 <HAL_LTDC_MspInit+0x1f8>)
 8001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	623b      	str	r3, [r7, #32]
 800199e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
 80019a4:	4b5e      	ldr	r3, [pc, #376]	; (8001b20 <HAL_LTDC_MspInit+0x1f8>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	4a5d      	ldr	r2, [pc, #372]	; (8001b20 <HAL_LTDC_MspInit+0x1f8>)
 80019aa:	f043 0302 	orr.w	r3, r3, #2
 80019ae:	6313      	str	r3, [r2, #48]	; 0x30
 80019b0:	4b5b      	ldr	r3, [pc, #364]	; (8001b20 <HAL_LTDC_MspInit+0x1f8>)
 80019b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	61fb      	str	r3, [r7, #28]
 80019ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019bc:	2300      	movs	r3, #0
 80019be:	61bb      	str	r3, [r7, #24]
 80019c0:	4b57      	ldr	r3, [pc, #348]	; (8001b20 <HAL_LTDC_MspInit+0x1f8>)
 80019c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c4:	4a56      	ldr	r2, [pc, #344]	; (8001b20 <HAL_LTDC_MspInit+0x1f8>)
 80019c6:	f043 0310 	orr.w	r3, r3, #16
 80019ca:	6313      	str	r3, [r2, #48]	; 0x30
 80019cc:	4b54      	ldr	r3, [pc, #336]	; (8001b20 <HAL_LTDC_MspInit+0x1f8>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	f003 0310 	and.w	r3, r3, #16
 80019d4:	61bb      	str	r3, [r7, #24]
 80019d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	4b50      	ldr	r3, [pc, #320]	; (8001b20 <HAL_LTDC_MspInit+0x1f8>)
 80019de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e0:	4a4f      	ldr	r2, [pc, #316]	; (8001b20 <HAL_LTDC_MspInit+0x1f8>)
 80019e2:	f043 0308 	orr.w	r3, r3, #8
 80019e6:	6313      	str	r3, [r2, #48]	; 0x30
 80019e8:	4b4d      	ldr	r3, [pc, #308]	; (8001b20 <HAL_LTDC_MspInit+0x1f8>)
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	4b49      	ldr	r3, [pc, #292]	; (8001b20 <HAL_LTDC_MspInit+0x1f8>)
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fc:	4a48      	ldr	r2, [pc, #288]	; (8001b20 <HAL_LTDC_MspInit+0x1f8>)
 80019fe:	f043 0304 	orr.w	r3, r3, #4
 8001a02:	6313      	str	r3, [r2, #48]	; 0x30
 8001a04:	4b46      	ldr	r3, [pc, #280]	; (8001b20 <HAL_LTDC_MspInit+0x1f8>)
 8001a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	4b42      	ldr	r3, [pc, #264]	; (8001b20 <HAL_LTDC_MspInit+0x1f8>)
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	4a41      	ldr	r2, [pc, #260]	; (8001b20 <HAL_LTDC_MspInit+0x1f8>)
 8001a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a20:	4b3f      	ldr	r3, [pc, #252]	; (8001b20 <HAL_LTDC_MspInit+0x1f8>)
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
    PA12     ------> LTDC_R5
    PD3     ------> LTDC_G7
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a3e:	230e      	movs	r3, #14
 8001a40:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a46:	4619      	mov	r1, r3
 8001a48:	4836      	ldr	r0, [pc, #216]	; (8001b24 <HAL_LTDC_MspInit+0x1fc>)
 8001a4a:	f001 f81b 	bl	8002a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 8001a4e:	f641 0358 	movw	r3, #6232	; 0x1858
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a60:	230e      	movs	r3, #14
 8001a62:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a68:	4619      	mov	r1, r3
 8001a6a:	482f      	ldr	r0, [pc, #188]	; (8001b28 <HAL_LTDC_MspInit+0x200>)
 8001a6c:	f001 f80a 	bl	8002a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a70:	2303      	movs	r3, #3
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001a80:	2309      	movs	r3, #9
 8001a82:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4828      	ldr	r0, [pc, #160]	; (8001b2c <HAL_LTDC_MspInit+0x204>)
 8001a8c:	f000 fffa 	bl	8002a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_11;
 8001a90:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 8001a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a96:	2302      	movs	r3, #2
 8001a98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001aa2:	230e      	movs	r3, #14
 8001aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4820      	ldr	r0, [pc, #128]	; (8001b30 <HAL_LTDC_MspInit+0x208>)
 8001aae:	f000 ffe9 	bl	8002a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001ab2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ac4:	230e      	movs	r3, #14
 8001ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001acc:	4619      	mov	r1, r3
 8001ace:	4817      	ldr	r0, [pc, #92]	; (8001b2c <HAL_LTDC_MspInit+0x204>)
 8001ad0:	f000 ffd8 	bl	8002a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ad4:	2308      	movs	r3, #8
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ae4:	230e      	movs	r3, #14
 8001ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aec:	4619      	mov	r1, r3
 8001aee:	4811      	ldr	r0, [pc, #68]	; (8001b34 <HAL_LTDC_MspInit+0x20c>)
 8001af0:	f000 ffc8 	bl	8002a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001af4:	23c0      	movs	r3, #192	; 0xc0
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2300      	movs	r3, #0
 8001b02:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b04:	230e      	movs	r3, #14
 8001b06:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	480a      	ldr	r0, [pc, #40]	; (8001b38 <HAL_LTDC_MspInit+0x210>)
 8001b10:	f000 ffb8 	bl	8002a84 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001b14:	bf00      	nop
 8001b16:	3740      	adds	r7, #64	; 0x40
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40016800 	.word	0x40016800
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40021400 	.word	0x40021400
 8001b28:	40020000 	.word	0x40020000
 8001b2c:	40020400 	.word	0x40020400
 8001b30:	40021800 	.word	0x40021800
 8001b34:	40020c00 	.word	0x40020c00
 8001b38:	40020800 	.word	0x40020800

08001b3c <main>:

extern uint8_t *GRAM;


int main(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  HAL_Init();
 8001b40:	f000 fdf8 	bl	8002734 <HAL_Init>
  SystemClock_Config();
 8001b44:	f000 f812 	bl	8001b6c <SystemClock_Config>
  MX_GPIO_Init();
 8001b48:	f7fe fccc 	bl	80004e4 <MX_GPIO_Init>
  LCD_GpioInit();
 8001b4c:	f7ff fb2a 	bl	80011a4 <LCD_GpioInit>
  LCD_LtdcInit();
 8001b50:	f7ff fb76 	bl	8001240 <LCD_LtdcInit>
  LCD_DispInit_Spi();
 8001b54:	f7ff fb96 	bl	8001284 <LCD_DispInit_Spi>
  LCD_DispInit_Ltdc();
 8001b58:	f7ff fc98 	bl	800148c <LCD_DispInit_Ltdc>
  initializeGPIONVIC();
 8001b5c:	f000 f89a 	bl	8001c94 <initializeGPIONVIC>

  InitialScreen();
 8001b60:	f000 f8ee 	bl	8001d40 <InitialScreen>
  MenuScreen();
 8001b64:	f000 f98c 	bl	8001e80 <MenuScreen>

  while (1)
 8001b68:	e7fe      	b.n	8001b68 <main+0x2c>
	...

08001b6c <SystemClock_Config>:

  }
}

void SystemClock_Config(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b0a0      	sub	sp, #128	; 0x80
 8001b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b76:	2230      	movs	r2, #48	; 0x30
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f002 fdc0 	bl	8004700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	2230      	movs	r2, #48	; 0x30
 8001b96:	2100      	movs	r1, #0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f002 fdb1 	bl	8004700 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <SystemClock_Config+0x110>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	4a35      	ldr	r2, [pc, #212]	; (8001c7c <SystemClock_Config+0x110>)
 8001ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bac:	6413      	str	r3, [r2, #64]	; 0x40
 8001bae:	4b33      	ldr	r3, [pc, #204]	; (8001c7c <SystemClock_Config+0x110>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	4b30      	ldr	r3, [pc, #192]	; (8001c80 <SystemClock_Config+0x114>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bc6:	4a2e      	ldr	r2, [pc, #184]	; (8001c80 <SystemClock_Config+0x114>)
 8001bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <SystemClock_Config+0x114>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bde:	2301      	movs	r3, #1
 8001be0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001be2:	2310      	movs	r3, #16
 8001be4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be6:	2302      	movs	r3, #2
 8001be8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bea:	2300      	movs	r3, #0
 8001bec:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bee:	2308      	movs	r3, #8
 8001bf0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001bf2:	23b4      	movs	r3, #180	; 0xb4
 8001bf4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bfe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c02:	4618      	mov	r0, r3
 8001c04:	f001 fd3a 	bl	800367c <HAL_RCC_OscConfig>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c0e:	f000 f839 	bl	8001c84 <Error_Handler>
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c12:	f001 fce3 	bl	80035dc <HAL_PWREx_EnableOverDrive>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001c1c:	f000 f832 	bl	8001c84 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c20:	230f      	movs	r3, #15
 8001c22:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c24:	2302      	movs	r3, #2
 8001c26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c36:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c3c:	2102      	movs	r1, #2
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f001 ff8c 	bl	8003b5c <HAL_RCC_ClockConfig>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8001c4a:	f000 f81b 	bl	8001c84 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001c4e:	2308      	movs	r3, #8
 8001c50:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 56;
 8001c52:	2338      	movs	r3, #56	; 0x38
 8001c54:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8001c56:	2307      	movs	r3, #7
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c5e:	f107 030c 	add.w	r3, r7, #12
 8001c62:	4618      	mov	r0, r3
 8001c64:	f002 f942 	bl	8003eec <HAL_RCCEx_PeriphCLKConfig>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <SystemClock_Config+0x106>
  {
    Error_Handler();
 8001c6e:	f000 f809 	bl	8001c84 <Error_Handler>
  }
}
 8001c72:	bf00      	nop
 8001c74:	3780      	adds	r7, #128	; 0x80
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40007000 	.word	0x40007000

08001c84 <Error_Handler>:

void Error_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0

}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <initializeGPIONVIC>:
}
#endif

// initialize GPIO, NVIC
void initializeGPIONVIC(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cac:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <initializeGPIONVIC+0x44>)
 8001cae:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4808      	ldr	r0, [pc, #32]	; (8001cdc <initializeGPIONVIC+0x48>)
 8001cba:	f000 fee3 	bl	8002a84 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2103      	movs	r1, #3
 8001cc2:	2006      	movs	r0, #6
 8001cc4:	f000 fea7 	bl	8002a16 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001cc8:	2006      	movs	r0, #6
 8001cca:	f000 fec0 	bl	8002a4e <HAL_NVIC_EnableIRQ>
}
 8001cce:	bf00      	nop
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	10110000 	.word	0x10110000
 8001cdc:	40020000 	.word	0x40020000

08001ce0 <EXTI0_IRQHandler>:

// EXIT0 handler
void EXTI0_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
	if (view_index == 0)
 8001ce4:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <EXTI0_IRQHandler+0x5c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d102      	bne.n	8001cf2 <EXTI0_IRQHandler+0x12>
	{
		BluetoothScreen();
 8001cec:	f000 f91e 	bl	8001f2c <BluetoothScreen>
 8001cf0:	e013      	b.n	8001d1a <EXTI0_IRQHandler+0x3a>
	}
	else if (view_index == 1)
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <EXTI0_IRQHandler+0x5c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d102      	bne.n	8001d00 <EXTI0_IRQHandler+0x20>
	{
		ScheduleScreen();
 8001cfa:	f000 fa77 	bl	80021ec <ScheduleScreen>
 8001cfe:	e00c      	b.n	8001d1a <EXTI0_IRQHandler+0x3a>
	}
	else if (view_index == 2)
 8001d00:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <EXTI0_IRQHandler+0x5c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d102      	bne.n	8001d0e <EXTI0_IRQHandler+0x2e>
	{
		DispensedScreen();
 8001d08:	f000 fb2e 	bl	8002368 <DispensedScreen>
 8001d0c:	e005      	b.n	8001d1a <EXTI0_IRQHandler+0x3a>
	}
	else if (view_index == 3)
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <EXTI0_IRQHandler+0x5c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d101      	bne.n	8001d1a <EXTI0_IRQHandler+0x3a>
	{
		MenuScreen();
 8001d16:	f000 f8b3 	bl	8001e80 <MenuScreen>
	}
	view_index = (view_index + 1) % 4;
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <EXTI0_IRQHandler+0x5c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	425a      	negs	r2, r3
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	f002 0203 	and.w	r2, r2, #3
 8001d2a:	bf58      	it	pl
 8001d2c:	4253      	negpl	r3, r2
 8001d2e:	4a03      	ldr	r2, [pc, #12]	; (8001d3c <EXTI0_IRQHandler+0x5c>)
 8001d30:	6013      	str	r3, [r2, #0]
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001d32:	2001      	movs	r0, #1
 8001d34:	f001 f86c 	bl	8002e10 <HAL_GPIO_EXTI_IRQHandler>
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20012c2c 	.word	0x20012c2c

08001d40 <InitialScreen>:
#include "main.h"
#include "graphic.h"
#include "lcd.h"

void InitialScreen(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
	int x = 50;
 8001d46:	2332      	movs	r3, #50	; 0x32
 8001d48:	607b      	str	r3, [r7, #4]
	LCD_ClearScreenLtdc(0x10);
 8001d4a:	2010      	movs	r0, #16
 8001d4c:	f7ff fd5a 	bl	8001804 <LCD_ClearScreenLtdc>
	LCD_DrawWBig(x, 100);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	2164      	movs	r1, #100	; 0x64
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff f988 	bl	800106c <LCD_DrawWBig>
	x = (x + 18) % LCD_WIDTH;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f103 0212 	add.w	r2, r3, #18
 8001d62:	4b46      	ldr	r3, [pc, #280]	; (8001e7c <InitialScreen+0x13c>)
 8001d64:	fb83 1302 	smull	r1, r3, r3, r2
 8001d68:	4413      	add	r3, r2
 8001d6a:	11d9      	asrs	r1, r3, #7
 8001d6c:	17d3      	asrs	r3, r2, #31
 8001d6e:	1ac9      	subs	r1, r1, r3
 8001d70:	460b      	mov	r3, r1
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	1a5b      	subs	r3, r3, r1
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	607b      	str	r3, [r7, #4]
	LCD_DrawEBig(x, 100);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	2164      	movs	r1, #100	; 0x64
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fd52 	bl	800082c <LCD_DrawEBig>
	x = (x + 18) % LCD_WIDTH;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f103 0212 	add.w	r2, r3, #18
 8001d8e:	4b3b      	ldr	r3, [pc, #236]	; (8001e7c <InitialScreen+0x13c>)
 8001d90:	fb83 1302 	smull	r1, r3, r3, r2
 8001d94:	4413      	add	r3, r2
 8001d96:	11d9      	asrs	r1, r3, #7
 8001d98:	17d3      	asrs	r3, r2, #31
 8001d9a:	1ac9      	subs	r1, r1, r3
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	1a5b      	subs	r3, r3, r1
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	607b      	str	r3, [r7, #4]
	LCD_DrawLBig(x, 100);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	2164      	movs	r1, #100	; 0x64
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe fe70 	bl	8000a94 <LCD_DrawLBig>
	x = (x + 18) % LCD_WIDTH;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f103 0212 	add.w	r2, r3, #18
 8001dba:	4b30      	ldr	r3, [pc, #192]	; (8001e7c <InitialScreen+0x13c>)
 8001dbc:	fb83 1302 	smull	r1, r3, r3, r2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	11d9      	asrs	r1, r3, #7
 8001dc4:	17d3      	asrs	r3, r2, #31
 8001dc6:	1ac9      	subs	r1, r1, r3
 8001dc8:	460b      	mov	r3, r1
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	1a5b      	subs	r3, r3, r1
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	607b      	str	r3, [r7, #4]
	LCD_DrawCBig(x, 100);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	2164      	movs	r1, #100	; 0x64
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fc90 	bl	8000700 <LCD_DrawCBig>
	x = (x + 18) % LCD_WIDTH;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f103 0212 	add.w	r2, r3, #18
 8001de6:	4b25      	ldr	r3, [pc, #148]	; (8001e7c <InitialScreen+0x13c>)
 8001de8:	fb83 1302 	smull	r1, r3, r3, r2
 8001dec:	4413      	add	r3, r2
 8001dee:	11d9      	asrs	r1, r3, #7
 8001df0:	17d3      	asrs	r3, r2, #31
 8001df2:	1ac9      	subs	r1, r1, r3
 8001df4:	460b      	mov	r3, r1
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	1a5b      	subs	r3, r3, r1
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	607b      	str	r3, [r7, #4]
	LCD_DrawOBig(x, 100);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	2164      	movs	r1, #100	; 0x64
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe ff4c 	bl	8000ca4 <LCD_DrawOBig>
	x = (x + 18) % LCD_WIDTH;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f103 0212 	add.w	r2, r3, #18
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <InitialScreen+0x13c>)
 8001e14:	fb83 1302 	smull	r1, r3, r3, r2
 8001e18:	4413      	add	r3, r2
 8001e1a:	11d9      	asrs	r1, r3, #7
 8001e1c:	17d3      	asrs	r3, r2, #31
 8001e1e:	1ac9      	subs	r1, r1, r3
 8001e20:	460b      	mov	r3, r1
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	1a5b      	subs	r3, r3, r1
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	607b      	str	r3, [r7, #4]
	LCD_DrawMBig(x, 100);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	2164      	movs	r1, #100	; 0x64
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fe6e 	bl	8000b14 <LCD_DrawMBig>
	x = (x + 18) % LCD_WIDTH;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f103 0212 	add.w	r2, r3, #18
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <InitialScreen+0x13c>)
 8001e40:	fb83 1302 	smull	r1, r3, r3, r2
 8001e44:	4413      	add	r3, r2
 8001e46:	11d9      	asrs	r1, r3, #7
 8001e48:	17d3      	asrs	r3, r2, #31
 8001e4a:	1ac9      	subs	r1, r1, r3
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	1a5b      	subs	r3, r3, r1
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	607b      	str	r3, [r7, #4]
	LCD_DrawEBig(x, 100);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	2164      	movs	r1, #100	; 0x64
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fce4 	bl	800082c <LCD_DrawEBig>
	HAL_Delay(2000);
 8001e64:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e68:	f000 fcd6 	bl	8002818 <HAL_Delay>
	LCD_ClearScreenLtdc(0xFF);
 8001e6c:	20ff      	movs	r0, #255	; 0xff
 8001e6e:	f7ff fcc9 	bl	8001804 <LCD_ClearScreenLtdc>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	88888889 	.word	0x88888889

08001e80 <MenuScreen>:

void MenuScreen(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
	int x = 50;
 8001e86:	2332      	movs	r3, #50	; 0x32
 8001e88:	607b      	str	r3, [r7, #4]
	LCD_ClearScreenLtdc(0x11);
 8001e8a:	2011      	movs	r0, #17
 8001e8c:	f7ff fcba 	bl	8001804 <LCD_ClearScreenLtdc>
	LCD_DrawMBig(x, 100);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	2164      	movs	r1, #100	; 0x64
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fe3c 	bl	8000b14 <LCD_DrawMBig>
	x = (x + 18) % LCD_WIDTH;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f103 0212 	add.w	r2, r3, #18
 8001ea2:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <MenuScreen+0xa8>)
 8001ea4:	fb83 1302 	smull	r1, r3, r3, r2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	11d9      	asrs	r1, r3, #7
 8001eac:	17d3      	asrs	r3, r2, #31
 8001eae:	1ac9      	subs	r1, r1, r3
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	011b      	lsls	r3, r3, #4
 8001eb4:	1a5b      	subs	r3, r3, r1
 8001eb6:	011b      	lsls	r3, r3, #4
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	607b      	str	r3, [r7, #4]
	LCD_DrawEBig(x, 100);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	2164      	movs	r1, #100	; 0x64
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe fcb2 	bl	800082c <LCD_DrawEBig>
	x = (x + 18) % LCD_WIDTH;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f103 0212 	add.w	r2, r3, #18
 8001ece:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <MenuScreen+0xa8>)
 8001ed0:	fb83 1302 	smull	r1, r3, r3, r2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	11d9      	asrs	r1, r3, #7
 8001ed8:	17d3      	asrs	r3, r2, #31
 8001eda:	1ac9      	subs	r1, r1, r3
 8001edc:	460b      	mov	r3, r1
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	1a5b      	subs	r3, r3, r1
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	607b      	str	r3, [r7, #4]
	LCD_DrawNBig(x, 100);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	2164      	movs	r1, #100	; 0x64
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe fe74 	bl	8000bdc <LCD_DrawNBig>
	x = (x + 18) % LCD_WIDTH;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f103 0212 	add.w	r2, r3, #18
 8001efa:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <MenuScreen+0xa8>)
 8001efc:	fb83 1302 	smull	r1, r3, r3, r2
 8001f00:	4413      	add	r3, r2
 8001f02:	11d9      	asrs	r1, r3, #7
 8001f04:	17d3      	asrs	r3, r2, #31
 8001f06:	1ac9      	subs	r1, r1, r3
 8001f08:	460b      	mov	r3, r1
 8001f0a:	011b      	lsls	r3, r3, #4
 8001f0c:	1a5b      	subs	r3, r3, r1
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	607b      	str	r3, [r7, #4]
	LCD_DrawUBig(x,100);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	2164      	movs	r1, #100	; 0x64
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff f862 	bl	8000fe4 <LCD_DrawUBig>
}
 8001f20:	bf00      	nop
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	88888889 	.word	0x88888889

08001f2c <BluetoothScreen>:

void BluetoothScreen(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
	int x = 30;
 8001f32:	231e      	movs	r3, #30
 8001f34:	607b      	str	r3, [r7, #4]
	LCD_ClearScreenLtdc(0x12);
 8001f36:	2012      	movs	r0, #18
 8001f38:	f7ff fc64 	bl	8001804 <LCD_ClearScreenLtdc>
	LCD_DrawBBig(x, 100);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	2164      	movs	r1, #100	; 0x64
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fb78 	bl	8000638 <LCD_DrawBBig>
	x = (x + 18) % LCD_WIDTH;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f103 0212 	add.w	r2, r3, #18
 8001f4e:	4ba6      	ldr	r3, [pc, #664]	; (80021e8 <BluetoothScreen+0x2bc>)
 8001f50:	fb83 1302 	smull	r1, r3, r3, r2
 8001f54:	4413      	add	r3, r2
 8001f56:	11d9      	asrs	r1, r3, #7
 8001f58:	17d3      	asrs	r3, r2, #31
 8001f5a:	1ac9      	subs	r1, r1, r3
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	1a5b      	subs	r3, r3, r1
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	607b      	str	r3, [r7, #4]
	LCD_DrawLBig(x, 100);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	2164      	movs	r1, #100	; 0x64
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fd90 	bl	8000a94 <LCD_DrawLBig>
	x = (x + 18) % LCD_WIDTH;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f103 0212 	add.w	r2, r3, #18
 8001f7a:	4b9b      	ldr	r3, [pc, #620]	; (80021e8 <BluetoothScreen+0x2bc>)
 8001f7c:	fb83 1302 	smull	r1, r3, r3, r2
 8001f80:	4413      	add	r3, r2
 8001f82:	11d9      	asrs	r1, r3, #7
 8001f84:	17d3      	asrs	r3, r2, #31
 8001f86:	1ac9      	subs	r1, r1, r3
 8001f88:	460b      	mov	r3, r1
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	1a5b      	subs	r3, r3, r1
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	607b      	str	r3, [r7, #4]
	LCD_DrawUBig(x, 100);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	2164      	movs	r1, #100	; 0x64
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff f822 	bl	8000fe4 <LCD_DrawUBig>
	x = (x + 18) % LCD_WIDTH;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f103 0212 	add.w	r2, r3, #18
 8001fa6:	4b90      	ldr	r3, [pc, #576]	; (80021e8 <BluetoothScreen+0x2bc>)
 8001fa8:	fb83 1302 	smull	r1, r3, r3, r2
 8001fac:	4413      	add	r3, r2
 8001fae:	11d9      	asrs	r1, r3, #7
 8001fb0:	17d3      	asrs	r3, r2, #31
 8001fb2:	1ac9      	subs	r1, r1, r3
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	1a5b      	subs	r3, r3, r1
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	607b      	str	r3, [r7, #4]
	LCD_DrawEBig(x,100);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	2164      	movs	r1, #100	; 0x64
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe fc30 	bl	800082c <LCD_DrawEBig>
	x = (x + 18) % LCD_WIDTH;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f103 0212 	add.w	r2, r3, #18
 8001fd2:	4b85      	ldr	r3, [pc, #532]	; (80021e8 <BluetoothScreen+0x2bc>)
 8001fd4:	fb83 1302 	smull	r1, r3, r3, r2
 8001fd8:	4413      	add	r3, r2
 8001fda:	11d9      	asrs	r1, r3, #7
 8001fdc:	17d3      	asrs	r3, r2, #31
 8001fde:	1ac9      	subs	r1, r1, r3
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	1a5b      	subs	r3, r3, r1
 8001fe6:	011b      	lsls	r3, r3, #4
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	607b      	str	r3, [r7, #4]
	LCD_DrawTBig(x, 100);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	2164      	movs	r1, #100	; 0x64
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe ffb2 	bl	8000f5c <LCD_DrawTBig>
	x = (x + 18) % LCD_WIDTH;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f103 0212 	add.w	r2, r3, #18
 8001ffe:	4b7a      	ldr	r3, [pc, #488]	; (80021e8 <BluetoothScreen+0x2bc>)
 8002000:	fb83 1302 	smull	r1, r3, r3, r2
 8002004:	4413      	add	r3, r2
 8002006:	11d9      	asrs	r1, r3, #7
 8002008:	17d3      	asrs	r3, r2, #31
 800200a:	1ac9      	subs	r1, r1, r3
 800200c:	460b      	mov	r3, r1
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	1a5b      	subs	r3, r3, r1
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	607b      	str	r3, [r7, #4]
	LCD_DrawOBig(x, 100);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	b29b      	uxth	r3, r3
 800201c:	2164      	movs	r1, #100	; 0x64
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fe40 	bl	8000ca4 <LCD_DrawOBig>
	x = (x + 18) % LCD_WIDTH;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f103 0212 	add.w	r2, r3, #18
 800202a:	4b6f      	ldr	r3, [pc, #444]	; (80021e8 <BluetoothScreen+0x2bc>)
 800202c:	fb83 1302 	smull	r1, r3, r3, r2
 8002030:	4413      	add	r3, r2
 8002032:	11d9      	asrs	r1, r3, #7
 8002034:	17d3      	asrs	r3, r2, #31
 8002036:	1ac9      	subs	r1, r1, r3
 8002038:	460b      	mov	r3, r1
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	1a5b      	subs	r3, r3, r1
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	607b      	str	r3, [r7, #4]
	LCD_DrawOBig(x,100);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	b29b      	uxth	r3, r3
 8002048:	2164      	movs	r1, #100	; 0x64
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe fe2a 	bl	8000ca4 <LCD_DrawOBig>
	x = (x + 18) % LCD_WIDTH;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f103 0212 	add.w	r2, r3, #18
 8002056:	4b64      	ldr	r3, [pc, #400]	; (80021e8 <BluetoothScreen+0x2bc>)
 8002058:	fb83 1302 	smull	r1, r3, r3, r2
 800205c:	4413      	add	r3, r2
 800205e:	11d9      	asrs	r1, r3, #7
 8002060:	17d3      	asrs	r3, r2, #31
 8002062:	1ac9      	subs	r1, r1, r3
 8002064:	460b      	mov	r3, r1
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	1a5b      	subs	r3, r3, r1
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	607b      	str	r3, [r7, #4]
	LCD_DrawTBig(x, 100);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	b29b      	uxth	r3, r3
 8002074:	2164      	movs	r1, #100	; 0x64
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe ff70 	bl	8000f5c <LCD_DrawTBig>
	x = (x + 18) % LCD_WIDTH;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f103 0212 	add.w	r2, r3, #18
 8002082:	4b59      	ldr	r3, [pc, #356]	; (80021e8 <BluetoothScreen+0x2bc>)
 8002084:	fb83 1302 	smull	r1, r3, r3, r2
 8002088:	4413      	add	r3, r2
 800208a:	11d9      	asrs	r1, r3, #7
 800208c:	17d3      	asrs	r3, r2, #31
 800208e:	1ac9      	subs	r1, r1, r3
 8002090:	460b      	mov	r3, r1
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	1a5b      	subs	r3, r3, r1
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	607b      	str	r3, [r7, #4]
	LCD_DrawHBig(x,100);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	2164      	movs	r1, #100	; 0x64
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fc64 	bl	8000970 <LCD_DrawHBig>
	x = (x + 18) % LCD_WIDTH;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f103 0212 	add.w	r2, r3, #18
 80020ae:	4b4e      	ldr	r3, [pc, #312]	; (80021e8 <BluetoothScreen+0x2bc>)
 80020b0:	fb83 1302 	smull	r1, r3, r3, r2
 80020b4:	4413      	add	r3, r2
 80020b6:	11d9      	asrs	r1, r3, #7
 80020b8:	17d3      	asrs	r3, r2, #31
 80020ba:	1ac9      	subs	r1, r1, r3
 80020bc:	460b      	mov	r3, r1
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	1a5b      	subs	r3, r3, r1
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	607b      	str	r3, [r7, #4]
	x = 30;
 80020c8:	231e      	movs	r3, #30
 80020ca:	607b      	str	r3, [r7, #4]
	LCD_DrawPBig(x, 118);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	2176      	movs	r1, #118	; 0x76
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fe2c 	bl	8000d30 <LCD_DrawPBig>
	x = (x + 18) % LCD_WIDTH;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f103 0212 	add.w	r2, r3, #18
 80020de:	4b42      	ldr	r3, [pc, #264]	; (80021e8 <BluetoothScreen+0x2bc>)
 80020e0:	fb83 1302 	smull	r1, r3, r3, r2
 80020e4:	4413      	add	r3, r2
 80020e6:	11d9      	asrs	r1, r3, #7
 80020e8:	17d3      	asrs	r3, r2, #31
 80020ea:	1ac9      	subs	r1, r1, r3
 80020ec:	460b      	mov	r3, r1
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	1a5b      	subs	r3, r3, r1
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	607b      	str	r3, [r7, #4]
	LCD_DrawABig(x, 118);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2176      	movs	r1, #118	; 0x76
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe fa50 	bl	80005a4 <LCD_DrawABig>
	x = (x + 18) % LCD_WIDTH;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f103 0212 	add.w	r2, r3, #18
 800210a:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <BluetoothScreen+0x2bc>)
 800210c:	fb83 1302 	smull	r1, r3, r3, r2
 8002110:	4413      	add	r3, r2
 8002112:	11d9      	asrs	r1, r3, #7
 8002114:	17d3      	asrs	r3, r2, #31
 8002116:	1ac9      	subs	r1, r1, r3
 8002118:	460b      	mov	r3, r1
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	1a5b      	subs	r3, r3, r1
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	607b      	str	r3, [r7, #4]
	LCD_DrawIBig(x, 118);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	b29b      	uxth	r3, r3
 8002128:	2176      	movs	r1, #118	; 0x76
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe fc6c 	bl	8000a08 <LCD_DrawIBig>
	x = (x + 18) % LCD_WIDTH;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f103 0212 	add.w	r2, r3, #18
 8002136:	4b2c      	ldr	r3, [pc, #176]	; (80021e8 <BluetoothScreen+0x2bc>)
 8002138:	fb83 1302 	smull	r1, r3, r3, r2
 800213c:	4413      	add	r3, r2
 800213e:	11d9      	asrs	r1, r3, #7
 8002140:	17d3      	asrs	r3, r2, #31
 8002142:	1ac9      	subs	r1, r1, r3
 8002144:	460b      	mov	r3, r1
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	1a5b      	subs	r3, r3, r1
 800214a:	011b      	lsls	r3, r3, #4
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	607b      	str	r3, [r7, #4]
	LCD_DrawRBig(x, 118);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	b29b      	uxth	r3, r3
 8002154:	2176      	movs	r1, #118	; 0x76
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fe40 	bl	8000ddc <LCD_DrawRBig>
	x = (x + 18) % LCD_WIDTH;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f103 0212 	add.w	r2, r3, #18
 8002162:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <BluetoothScreen+0x2bc>)
 8002164:	fb83 1302 	smull	r1, r3, r3, r2
 8002168:	4413      	add	r3, r2
 800216a:	11d9      	asrs	r1, r3, #7
 800216c:	17d3      	asrs	r3, r2, #31
 800216e:	1ac9      	subs	r1, r1, r3
 8002170:	460b      	mov	r3, r1
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	1a5b      	subs	r3, r3, r1
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	607b      	str	r3, [r7, #4]
	LCD_DrawIBig(x, 118);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	b29b      	uxth	r3, r3
 8002180:	2176      	movs	r1, #118	; 0x76
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe fc40 	bl	8000a08 <LCD_DrawIBig>
	x = (x + 18) % LCD_WIDTH;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f103 0212 	add.w	r2, r3, #18
 800218e:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <BluetoothScreen+0x2bc>)
 8002190:	fb83 1302 	smull	r1, r3, r3, r2
 8002194:	4413      	add	r3, r2
 8002196:	11d9      	asrs	r1, r3, #7
 8002198:	17d3      	asrs	r3, r2, #31
 800219a:	1ac9      	subs	r1, r1, r3
 800219c:	460b      	mov	r3, r1
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	1a5b      	subs	r3, r3, r1
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	607b      	str	r3, [r7, #4]
	LCD_DrawNBig(x, 118);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2176      	movs	r1, #118	; 0x76
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fd14 	bl	8000bdc <LCD_DrawNBig>
	x = (x + 18) % LCD_WIDTH;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f103 0212 	add.w	r2, r3, #18
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <BluetoothScreen+0x2bc>)
 80021bc:	fb83 1302 	smull	r1, r3, r3, r2
 80021c0:	4413      	add	r3, r2
 80021c2:	11d9      	asrs	r1, r3, #7
 80021c4:	17d3      	asrs	r3, r2, #31
 80021c6:	1ac9      	subs	r1, r1, r3
 80021c8:	460b      	mov	r3, r1
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	1a5b      	subs	r3, r3, r1
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	607b      	str	r3, [r7, #4]
	LCD_DrawGBig(x,118);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	2176      	movs	r1, #118	; 0x76
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe fb76 	bl	80008cc <LCD_DrawGBig>
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	88888889 	.word	0x88888889

080021ec <ScheduleScreen>:

void ScheduleScreen()
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
	int x = 50;
 80021f2:	2332      	movs	r3, #50	; 0x32
 80021f4:	607b      	str	r3, [r7, #4]
	LCD_ClearScreenLtdc(0x13);
 80021f6:	2013      	movs	r0, #19
 80021f8:	f7ff fb04 	bl	8001804 <LCD_ClearScreenLtdc>
	LCD_DrawSBig(x, 100);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	2164      	movs	r1, #100	; 0x64
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe fe52 	bl	8000eac <LCD_DrawSBig>
	x = (x + 18) % LCD_WIDTH;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f103 0212 	add.w	r2, r3, #18
 800220e:	4b55      	ldr	r3, [pc, #340]	; (8002364 <ScheduleScreen+0x178>)
 8002210:	fb83 1302 	smull	r1, r3, r3, r2
 8002214:	4413      	add	r3, r2
 8002216:	11d9      	asrs	r1, r3, #7
 8002218:	17d3      	asrs	r3, r2, #31
 800221a:	1ac9      	subs	r1, r1, r3
 800221c:	460b      	mov	r3, r1
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	1a5b      	subs	r3, r3, r1
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	607b      	str	r3, [r7, #4]
	LCD_DrawCBig(x, 100);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	b29b      	uxth	r3, r3
 800222c:	2164      	movs	r1, #100	; 0x64
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe fa66 	bl	8000700 <LCD_DrawCBig>
	x = (x + 18) % LCD_WIDTH;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f103 0212 	add.w	r2, r3, #18
 800223a:	4b4a      	ldr	r3, [pc, #296]	; (8002364 <ScheduleScreen+0x178>)
 800223c:	fb83 1302 	smull	r1, r3, r3, r2
 8002240:	4413      	add	r3, r2
 8002242:	11d9      	asrs	r1, r3, #7
 8002244:	17d3      	asrs	r3, r2, #31
 8002246:	1ac9      	subs	r1, r1, r3
 8002248:	460b      	mov	r3, r1
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	1a5b      	subs	r3, r3, r1
 800224e:	011b      	lsls	r3, r3, #4
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	607b      	str	r3, [r7, #4]
	LCD_DrawHBig(x, 100);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	b29b      	uxth	r3, r3
 8002258:	2164      	movs	r1, #100	; 0x64
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe fb88 	bl	8000970 <LCD_DrawHBig>
	x = (x + 18) % LCD_WIDTH;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f103 0212 	add.w	r2, r3, #18
 8002266:	4b3f      	ldr	r3, [pc, #252]	; (8002364 <ScheduleScreen+0x178>)
 8002268:	fb83 1302 	smull	r1, r3, r3, r2
 800226c:	4413      	add	r3, r2
 800226e:	11d9      	asrs	r1, r3, #7
 8002270:	17d3      	asrs	r3, r2, #31
 8002272:	1ac9      	subs	r1, r1, r3
 8002274:	460b      	mov	r3, r1
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	1a5b      	subs	r3, r3, r1
 800227a:	011b      	lsls	r3, r3, #4
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	607b      	str	r3, [r7, #4]
	LCD_DrawEBig(x,100);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	b29b      	uxth	r3, r3
 8002284:	2164      	movs	r1, #100	; 0x64
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe fad0 	bl	800082c <LCD_DrawEBig>
	x = (x + 18) % LCD_WIDTH;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f103 0212 	add.w	r2, r3, #18
 8002292:	4b34      	ldr	r3, [pc, #208]	; (8002364 <ScheduleScreen+0x178>)
 8002294:	fb83 1302 	smull	r1, r3, r3, r2
 8002298:	4413      	add	r3, r2
 800229a:	11d9      	asrs	r1, r3, #7
 800229c:	17d3      	asrs	r3, r2, #31
 800229e:	1ac9      	subs	r1, r1, r3
 80022a0:	460b      	mov	r3, r1
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	1a5b      	subs	r3, r3, r1
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	607b      	str	r3, [r7, #4]
	LCD_DrawDBig(x, 100);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	2164      	movs	r1, #100	; 0x64
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe fa68 	bl	8000788 <LCD_DrawDBig>
	x = (x + 18) % LCD_WIDTH;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f103 0212 	add.w	r2, r3, #18
 80022be:	4b29      	ldr	r3, [pc, #164]	; (8002364 <ScheduleScreen+0x178>)
 80022c0:	fb83 1302 	smull	r1, r3, r3, r2
 80022c4:	4413      	add	r3, r2
 80022c6:	11d9      	asrs	r1, r3, #7
 80022c8:	17d3      	asrs	r3, r2, #31
 80022ca:	1ac9      	subs	r1, r1, r3
 80022cc:	460b      	mov	r3, r1
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	1a5b      	subs	r3, r3, r1
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	607b      	str	r3, [r7, #4]
	LCD_DrawUBig(x, 100);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	2164      	movs	r1, #100	; 0x64
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe fe80 	bl	8000fe4 <LCD_DrawUBig>
	x = (x + 18) % LCD_WIDTH;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f103 0212 	add.w	r2, r3, #18
 80022ea:	4b1e      	ldr	r3, [pc, #120]	; (8002364 <ScheduleScreen+0x178>)
 80022ec:	fb83 1302 	smull	r1, r3, r3, r2
 80022f0:	4413      	add	r3, r2
 80022f2:	11d9      	asrs	r1, r3, #7
 80022f4:	17d3      	asrs	r3, r2, #31
 80022f6:	1ac9      	subs	r1, r1, r3
 80022f8:	460b      	mov	r3, r1
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	1a5b      	subs	r3, r3, r1
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	607b      	str	r3, [r7, #4]
	LCD_DrawLBig(x,100);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	b29b      	uxth	r3, r3
 8002308:	2164      	movs	r1, #100	; 0x64
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe fbc2 	bl	8000a94 <LCD_DrawLBig>
	x = (x + 18) % LCD_WIDTH;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f103 0212 	add.w	r2, r3, #18
 8002316:	4b13      	ldr	r3, [pc, #76]	; (8002364 <ScheduleScreen+0x178>)
 8002318:	fb83 1302 	smull	r1, r3, r3, r2
 800231c:	4413      	add	r3, r2
 800231e:	11d9      	asrs	r1, r3, #7
 8002320:	17d3      	asrs	r3, r2, #31
 8002322:	1ac9      	subs	r1, r1, r3
 8002324:	460b      	mov	r3, r1
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	1a5b      	subs	r3, r3, r1
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	607b      	str	r3, [r7, #4]
	LCD_DrawEBig(x, 100);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	b29b      	uxth	r3, r3
 8002334:	2164      	movs	r1, #100	; 0x64
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe fa78 	bl	800082c <LCD_DrawEBig>
	x = (x + 18) % LCD_WIDTH;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f103 0212 	add.w	r2, r3, #18
 8002342:	4b08      	ldr	r3, [pc, #32]	; (8002364 <ScheduleScreen+0x178>)
 8002344:	fb83 1302 	smull	r1, r3, r3, r2
 8002348:	4413      	add	r3, r2
 800234a:	11d9      	asrs	r1, r3, #7
 800234c:	17d3      	asrs	r3, r2, #31
 800234e:	1ac9      	subs	r1, r1, r3
 8002350:	460b      	mov	r3, r1
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	1a5b      	subs	r3, r3, r1
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	607b      	str	r3, [r7, #4]
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	88888889 	.word	0x88888889

08002368 <DispensedScreen>:

void DispensedScreen()
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
	int x = 50;
 800236e:	2332      	movs	r3, #50	; 0x32
 8002370:	607b      	str	r3, [r7, #4]
	LCD_ClearScreenLtdc(0x14);
 8002372:	2014      	movs	r0, #20
 8002374:	f7ff fa46 	bl	8001804 <LCD_ClearScreenLtdc>
	LCD_DrawDBig(x, 100);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	b29b      	uxth	r3, r3
 800237c:	2164      	movs	r1, #100	; 0x64
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe fa02 	bl	8000788 <LCD_DrawDBig>
	x = (x + 18) % LCD_WIDTH;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f103 0212 	add.w	r2, r3, #18
 800238a:	4b60      	ldr	r3, [pc, #384]	; (800250c <DispensedScreen+0x1a4>)
 800238c:	fb83 1302 	smull	r1, r3, r3, r2
 8002390:	4413      	add	r3, r2
 8002392:	11d9      	asrs	r1, r3, #7
 8002394:	17d3      	asrs	r3, r2, #31
 8002396:	1ac9      	subs	r1, r1, r3
 8002398:	460b      	mov	r3, r1
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	1a5b      	subs	r3, r3, r1
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	607b      	str	r3, [r7, #4]
	LCD_DrawIBig(x, 100);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	2164      	movs	r1, #100	; 0x64
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe fb2c 	bl	8000a08 <LCD_DrawIBig>
	x = (x + 18) % LCD_WIDTH;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f103 0212 	add.w	r2, r3, #18
 80023b6:	4b55      	ldr	r3, [pc, #340]	; (800250c <DispensedScreen+0x1a4>)
 80023b8:	fb83 1302 	smull	r1, r3, r3, r2
 80023bc:	4413      	add	r3, r2
 80023be:	11d9      	asrs	r1, r3, #7
 80023c0:	17d3      	asrs	r3, r2, #31
 80023c2:	1ac9      	subs	r1, r1, r3
 80023c4:	460b      	mov	r3, r1
 80023c6:	011b      	lsls	r3, r3, #4
 80023c8:	1a5b      	subs	r3, r3, r1
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	607b      	str	r3, [r7, #4]
	LCD_DrawSBig(x, 100);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	2164      	movs	r1, #100	; 0x64
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe fd68 	bl	8000eac <LCD_DrawSBig>
	x = (x + 18) % LCD_WIDTH;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f103 0212 	add.w	r2, r3, #18
 80023e2:	4b4a      	ldr	r3, [pc, #296]	; (800250c <DispensedScreen+0x1a4>)
 80023e4:	fb83 1302 	smull	r1, r3, r3, r2
 80023e8:	4413      	add	r3, r2
 80023ea:	11d9      	asrs	r1, r3, #7
 80023ec:	17d3      	asrs	r3, r2, #31
 80023ee:	1ac9      	subs	r1, r1, r3
 80023f0:	460b      	mov	r3, r1
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	1a5b      	subs	r3, r3, r1
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	607b      	str	r3, [r7, #4]
	LCD_DrawPBig(x,100);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2164      	movs	r1, #100	; 0x64
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fc94 	bl	8000d30 <LCD_DrawPBig>
	x = (x + 18) % LCD_WIDTH;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f103 0212 	add.w	r2, r3, #18
 800240e:	4b3f      	ldr	r3, [pc, #252]	; (800250c <DispensedScreen+0x1a4>)
 8002410:	fb83 1302 	smull	r1, r3, r3, r2
 8002414:	4413      	add	r3, r2
 8002416:	11d9      	asrs	r1, r3, #7
 8002418:	17d3      	asrs	r3, r2, #31
 800241a:	1ac9      	subs	r1, r1, r3
 800241c:	460b      	mov	r3, r1
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	1a5b      	subs	r3, r3, r1
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	607b      	str	r3, [r7, #4]
	LCD_DrawEBig(x, 100);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	b29b      	uxth	r3, r3
 800242c:	2164      	movs	r1, #100	; 0x64
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe f9fc 	bl	800082c <LCD_DrawEBig>
	x = (x + 18) % LCD_WIDTH;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f103 0212 	add.w	r2, r3, #18
 800243a:	4b34      	ldr	r3, [pc, #208]	; (800250c <DispensedScreen+0x1a4>)
 800243c:	fb83 1302 	smull	r1, r3, r3, r2
 8002440:	4413      	add	r3, r2
 8002442:	11d9      	asrs	r1, r3, #7
 8002444:	17d3      	asrs	r3, r2, #31
 8002446:	1ac9      	subs	r1, r1, r3
 8002448:	460b      	mov	r3, r1
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	1a5b      	subs	r3, r3, r1
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	607b      	str	r3, [r7, #4]
	LCD_DrawNBig(x, 100);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	b29b      	uxth	r3, r3
 8002458:	2164      	movs	r1, #100	; 0x64
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe fbbe 	bl	8000bdc <LCD_DrawNBig>
	x = (x + 18) % LCD_WIDTH;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f103 0212 	add.w	r2, r3, #18
 8002466:	4b29      	ldr	r3, [pc, #164]	; (800250c <DispensedScreen+0x1a4>)
 8002468:	fb83 1302 	smull	r1, r3, r3, r2
 800246c:	4413      	add	r3, r2
 800246e:	11d9      	asrs	r1, r3, #7
 8002470:	17d3      	asrs	r3, r2, #31
 8002472:	1ac9      	subs	r1, r1, r3
 8002474:	460b      	mov	r3, r1
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	1a5b      	subs	r3, r3, r1
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	607b      	str	r3, [r7, #4]
	LCD_DrawSBig(x,100);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	b29b      	uxth	r3, r3
 8002484:	2164      	movs	r1, #100	; 0x64
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe fd10 	bl	8000eac <LCD_DrawSBig>
	x = (x + 18) % LCD_WIDTH;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f103 0212 	add.w	r2, r3, #18
 8002492:	4b1e      	ldr	r3, [pc, #120]	; (800250c <DispensedScreen+0x1a4>)
 8002494:	fb83 1302 	smull	r1, r3, r3, r2
 8002498:	4413      	add	r3, r2
 800249a:	11d9      	asrs	r1, r3, #7
 800249c:	17d3      	asrs	r3, r2, #31
 800249e:	1ac9      	subs	r1, r1, r3
 80024a0:	460b      	mov	r3, r1
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	1a5b      	subs	r3, r3, r1
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	607b      	str	r3, [r7, #4]
	LCD_DrawEBig(x, 100);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	2164      	movs	r1, #100	; 0x64
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe f9ba 	bl	800082c <LCD_DrawEBig>
	x = (x + 18) % LCD_WIDTH;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f103 0212 	add.w	r2, r3, #18
 80024be:	4b13      	ldr	r3, [pc, #76]	; (800250c <DispensedScreen+0x1a4>)
 80024c0:	fb83 1302 	smull	r1, r3, r3, r2
 80024c4:	4413      	add	r3, r2
 80024c6:	11d9      	asrs	r1, r3, #7
 80024c8:	17d3      	asrs	r3, r2, #31
 80024ca:	1ac9      	subs	r1, r1, r3
 80024cc:	460b      	mov	r3, r1
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	1a5b      	subs	r3, r3, r1
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	607b      	str	r3, [r7, #4]
	LCD_DrawDBig(x, 100);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	2164      	movs	r1, #100	; 0x64
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe f952 	bl	8000788 <LCD_DrawDBig>
	x = (x + 18) % LCD_WIDTH;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f103 0212 	add.w	r2, r3, #18
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <DispensedScreen+0x1a4>)
 80024ec:	fb83 1302 	smull	r1, r3, r3, r2
 80024f0:	4413      	add	r3, r2
 80024f2:	11d9      	asrs	r1, r3, #7
 80024f4:	17d3      	asrs	r3, r2, #31
 80024f6:	1ac9      	subs	r1, r1, r3
 80024f8:	460b      	mov	r3, r1
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	1a5b      	subs	r3, r3, r1
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	607b      	str	r3, [r7, #4]
}
 8002504:	bf00      	nop
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	88888889 	.word	0x88888889

08002510 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8002514:	4b18      	ldr	r3, [pc, #96]	; (8002578 <MX_SPI5_Init+0x68>)
 8002516:	4a19      	ldr	r2, [pc, #100]	; (800257c <MX_SPI5_Init+0x6c>)
 8002518:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800251a:	4b17      	ldr	r3, [pc, #92]	; (8002578 <MX_SPI5_Init+0x68>)
 800251c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002520:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 8002522:	4b15      	ldr	r3, [pc, #84]	; (8002578 <MX_SPI5_Init+0x68>)
 8002524:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002528:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800252a:	4b13      	ldr	r3, [pc, #76]	; (8002578 <MX_SPI5_Init+0x68>)
 800252c:	2200      	movs	r2, #0
 800252e:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <MX_SPI5_Init+0x68>)
 8002532:	2200      	movs	r2, #0
 8002534:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002536:	4b10      	ldr	r3, [pc, #64]	; (8002578 <MX_SPI5_Init+0x68>)
 8002538:	2200      	movs	r2, #0
 800253a:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800253c:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <MX_SPI5_Init+0x68>)
 800253e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002542:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <MX_SPI5_Init+0x68>)
 8002546:	2200      	movs	r2, #0
 8002548:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800254a:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <MX_SPI5_Init+0x68>)
 800254c:	2200      	movs	r2, #0
 800254e:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <MX_SPI5_Init+0x68>)
 8002552:	2200      	movs	r2, #0
 8002554:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002556:	4b08      	ldr	r3, [pc, #32]	; (8002578 <MX_SPI5_Init+0x68>)
 8002558:	2200      	movs	r2, #0
 800255a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <MX_SPI5_Init+0x68>)
 800255e:	220a      	movs	r2, #10
 8002560:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002562:	4805      	ldr	r0, [pc, #20]	; (8002578 <MX_SPI5_Init+0x68>)
 8002564:	f001 fe80 	bl	8004268 <HAL_SPI_Init>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_SPI5_Init+0x62>
  {
    Error_Handler();
 800256e:	f7ff fb89 	bl	8001c84 <Error_Handler>
  }

}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20012cd8 	.word	0x20012cd8
 800257c:	40015000 	.word	0x40015000

08002580 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08a      	sub	sp, #40	; 0x28
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a19      	ldr	r2, [pc, #100]	; (8002604 <HAL_SPI_MspInit+0x84>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d12c      	bne.n	80025fc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	4b18      	ldr	r3, [pc, #96]	; (8002608 <HAL_SPI_MspInit+0x88>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	4a17      	ldr	r2, [pc, #92]	; (8002608 <HAL_SPI_MspInit+0x88>)
 80025ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b0:	6453      	str	r3, [r2, #68]	; 0x44
 80025b2:	4b15      	ldr	r3, [pc, #84]	; (8002608 <HAL_SPI_MspInit+0x88>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	4b11      	ldr	r3, [pc, #68]	; (8002608 <HAL_SPI_MspInit+0x88>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	4a10      	ldr	r2, [pc, #64]	; (8002608 <HAL_SPI_MspInit+0x88>)
 80025c8:	f043 0320 	orr.w	r3, r3, #32
 80025cc:	6313      	str	r3, [r2, #48]	; 0x30
 80025ce:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <HAL_SPI_MspInit+0x88>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f003 0320 	and.w	r3, r3, #32
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80025da:	f44f 7320 	mov.w	r3, #640	; 0x280
 80025de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e0:	2302      	movs	r3, #2
 80025e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e8:	2303      	movs	r3, #3
 80025ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80025ec:	2305      	movs	r3, #5
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	4619      	mov	r1, r3
 80025f6:	4805      	ldr	r0, [pc, #20]	; (800260c <HAL_SPI_MspInit+0x8c>)
 80025f8:	f000 fa44 	bl	8002a84 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80025fc:	bf00      	nop
 80025fe:	3728      	adds	r7, #40	; 0x28
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40015000 	.word	0x40015000
 8002608:	40023800 	.word	0x40023800
 800260c:	40021400 	.word	0x40021400

08002610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	607b      	str	r3, [r7, #4]
 800261a:	4b10      	ldr	r3, [pc, #64]	; (800265c <HAL_MspInit+0x4c>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	4a0f      	ldr	r2, [pc, #60]	; (800265c <HAL_MspInit+0x4c>)
 8002620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002624:	6453      	str	r3, [r2, #68]	; 0x44
 8002626:	4b0d      	ldr	r3, [pc, #52]	; (800265c <HAL_MspInit+0x4c>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262e:	607b      	str	r3, [r7, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	603b      	str	r3, [r7, #0]
 8002636:	4b09      	ldr	r3, [pc, #36]	; (800265c <HAL_MspInit+0x4c>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	4a08      	ldr	r2, [pc, #32]	; (800265c <HAL_MspInit+0x4c>)
 800263c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002640:	6413      	str	r3, [r2, #64]	; 0x40
 8002642:	4b06      	ldr	r3, [pc, #24]	; (800265c <HAL_MspInit+0x4c>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800264e:	2007      	movs	r0, #7
 8002650:	f000 f9d6 	bl	8002a00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40023800 	.word	0x40023800

08002660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002664:	e7fe      	b.n	8002664 <NMI_Handler+0x4>

08002666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800266a:	e7fe      	b.n	800266a <HardFault_Handler+0x4>

0800266c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002670:	e7fe      	b.n	8002670 <MemManage_Handler+0x4>

08002672 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002676:	e7fe      	b.n	8002676 <BusFault_Handler+0x4>

08002678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800267c:	e7fe      	b.n	800267c <UsageFault_Handler+0x4>

0800267e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800269a:	b480      	push	{r7}
 800269c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026ac:	f000 f894 	bl	80027d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026b0:	bf00      	nop
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026b8:	4b08      	ldr	r3, [pc, #32]	; (80026dc <SystemInit+0x28>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026be:	4a07      	ldr	r2, [pc, #28]	; (80026dc <SystemInit+0x28>)
 80026c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026c8:	4b04      	ldr	r3, [pc, #16]	; (80026dc <SystemInit+0x28>)
 80026ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026ce:	609a      	str	r2, [r3, #8]
#endif
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80026e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002718 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026e6:	e003      	b.n	80026f0 <LoopCopyDataInit>

080026e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026e8:	4b0c      	ldr	r3, [pc, #48]	; (800271c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026ee:	3104      	adds	r1, #4

080026f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026f0:	480b      	ldr	r0, [pc, #44]	; (8002720 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026f2:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026f8:	d3f6      	bcc.n	80026e8 <CopyDataInit>
  ldr  r2, =_sbss
 80026fa:	4a0b      	ldr	r2, [pc, #44]	; (8002728 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80026fc:	e002      	b.n	8002704 <LoopFillZerobss>

080026fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80026fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002700:	f842 3b04 	str.w	r3, [r2], #4

08002704 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002704:	4b09      	ldr	r3, [pc, #36]	; (800272c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002706:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002708:	d3f9      	bcc.n	80026fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800270a:	f7ff ffd3 	bl	80026b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800270e:	f001 ffd3 	bl	80046b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002712:	f7ff fa13 	bl	8001b3c <main>
  bx  lr    
 8002716:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002718:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800271c:	08004b48 	.word	0x08004b48
  ldr  r0, =_sdata
 8002720:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002724:	20012c10 	.word	0x20012c10
  ldr  r2, =_sbss
 8002728:	20012c10 	.word	0x20012c10
  ldr  r3, = _ebss
 800272c:	20012d34 	.word	0x20012d34

08002730 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002730:	e7fe      	b.n	8002730 <ADC_IRQHandler>
	...

08002734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002738:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <HAL_Init+0x40>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0d      	ldr	r2, [pc, #52]	; (8002774 <HAL_Init+0x40>)
 800273e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002742:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_Init+0x40>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <HAL_Init+0x40>)
 800274a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800274e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002750:	4b08      	ldr	r3, [pc, #32]	; (8002774 <HAL_Init+0x40>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a07      	ldr	r2, [pc, #28]	; (8002774 <HAL_Init+0x40>)
 8002756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800275c:	2003      	movs	r0, #3
 800275e:	f000 f94f 	bl	8002a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002762:	2000      	movs	r0, #0
 8002764:	f000 f808 	bl	8002778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002768:	f7ff ff52 	bl	8002610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40023c00 	.word	0x40023c00

08002778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002780:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_InitTick+0x54>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <HAL_InitTick+0x58>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	4619      	mov	r1, r3
 800278a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800278e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002792:	fbb2 f3f3 	udiv	r3, r2, r3
 8002796:	4618      	mov	r0, r3
 8002798:	f000 f967 	bl	8002a6a <HAL_SYSTICK_Config>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e00e      	b.n	80027c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b0f      	cmp	r3, #15
 80027aa:	d80a      	bhi.n	80027c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027ac:	2200      	movs	r2, #0
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	f04f 30ff 	mov.w	r0, #4294967295
 80027b4:	f000 f92f 	bl	8002a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027b8:	4a06      	ldr	r2, [pc, #24]	; (80027d4 <HAL_InitTick+0x5c>)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	e000      	b.n	80027c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20012c04 	.word	0x20012c04
 80027d0:	20012c0c 	.word	0x20012c0c
 80027d4:	20012c08 	.word	0x20012c08

080027d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027dc:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_IncTick+0x20>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_IncTick+0x24>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4413      	add	r3, r2
 80027e8:	4a04      	ldr	r2, [pc, #16]	; (80027fc <HAL_IncTick+0x24>)
 80027ea:	6013      	str	r3, [r2, #0]
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20012c0c 	.word	0x20012c0c
 80027fc:	20012d30 	.word	0x20012d30

08002800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return uwTick;
 8002804:	4b03      	ldr	r3, [pc, #12]	; (8002814 <HAL_GetTick+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	20012d30 	.word	0x20012d30

08002818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002820:	f7ff ffee 	bl	8002800 <HAL_GetTick>
 8002824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002830:	d005      	beq.n	800283e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002832:	4b0a      	ldr	r3, [pc, #40]	; (800285c <HAL_Delay+0x44>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4413      	add	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800283e:	bf00      	nop
 8002840:	f7ff ffde 	bl	8002800 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	429a      	cmp	r2, r3
 800284e:	d8f7      	bhi.n	8002840 <HAL_Delay+0x28>
  {
  }
}
 8002850:	bf00      	nop
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20012c0c 	.word	0x20012c0c

08002860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800287c:	4013      	ands	r3, r2
 800287e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800288c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002892:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	60d3      	str	r3, [r2, #12]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <__NVIC_GetPriorityGrouping+0x18>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	0a1b      	lsrs	r3, r3, #8
 80028b2:	f003 0307 	and.w	r3, r3, #7
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	db0b      	blt.n	80028ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	f003 021f 	and.w	r2, r3, #31
 80028dc:	4907      	ldr	r1, [pc, #28]	; (80028fc <__NVIC_EnableIRQ+0x38>)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	2001      	movs	r0, #1
 80028e6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000e100 	.word	0xe000e100

08002900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	6039      	str	r1, [r7, #0]
 800290a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800290c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002910:	2b00      	cmp	r3, #0
 8002912:	db0a      	blt.n	800292a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	b2da      	uxtb	r2, r3
 8002918:	490c      	ldr	r1, [pc, #48]	; (800294c <__NVIC_SetPriority+0x4c>)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	0112      	lsls	r2, r2, #4
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	440b      	add	r3, r1
 8002924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002928:	e00a      	b.n	8002940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	4908      	ldr	r1, [pc, #32]	; (8002950 <__NVIC_SetPriority+0x50>)
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	3b04      	subs	r3, #4
 8002938:	0112      	lsls	r2, r2, #4
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	440b      	add	r3, r1
 800293e:	761a      	strb	r2, [r3, #24]
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	e000e100 	.word	0xe000e100
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002954:	b480      	push	{r7}
 8002956:	b089      	sub	sp, #36	; 0x24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f1c3 0307 	rsb	r3, r3, #7
 800296e:	2b04      	cmp	r3, #4
 8002970:	bf28      	it	cs
 8002972:	2304      	movcs	r3, #4
 8002974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	3304      	adds	r3, #4
 800297a:	2b06      	cmp	r3, #6
 800297c:	d902      	bls.n	8002984 <NVIC_EncodePriority+0x30>
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3b03      	subs	r3, #3
 8002982:	e000      	b.n	8002986 <NVIC_EncodePriority+0x32>
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002988:	f04f 32ff 	mov.w	r2, #4294967295
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43da      	mvns	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	401a      	ands	r2, r3
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800299c:	f04f 31ff 	mov.w	r1, #4294967295
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	fa01 f303 	lsl.w	r3, r1, r3
 80029a6:	43d9      	mvns	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ac:	4313      	orrs	r3, r2
         );
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3724      	adds	r7, #36	; 0x24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029cc:	d301      	bcc.n	80029d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ce:	2301      	movs	r3, #1
 80029d0:	e00f      	b.n	80029f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029d2:	4a0a      	ldr	r2, [pc, #40]	; (80029fc <SysTick_Config+0x40>)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029da:	210f      	movs	r1, #15
 80029dc:	f04f 30ff 	mov.w	r0, #4294967295
 80029e0:	f7ff ff8e 	bl	8002900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <SysTick_Config+0x40>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ea:	4b04      	ldr	r3, [pc, #16]	; (80029fc <SysTick_Config+0x40>)
 80029ec:	2207      	movs	r2, #7
 80029ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	e000e010 	.word	0xe000e010

08002a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ff29 	bl	8002860 <__NVIC_SetPriorityGrouping>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b086      	sub	sp, #24
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
 8002a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a28:	f7ff ff3e 	bl	80028a8 <__NVIC_GetPriorityGrouping>
 8002a2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	6978      	ldr	r0, [r7, #20]
 8002a34:	f7ff ff8e 	bl	8002954 <NVIC_EncodePriority>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ff5d 	bl	8002900 <__NVIC_SetPriority>
}
 8002a46:	bf00      	nop
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4603      	mov	r3, r0
 8002a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ff31 	bl	80028c4 <__NVIC_EnableIRQ>
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff ffa2 	bl	80029bc <SysTick_Config>
 8002a78:	4603      	mov	r3, r0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b089      	sub	sp, #36	; 0x24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	e177      	b.n	8002d90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	f040 8166 	bne.w	8002d8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d00b      	beq.n	8002ade <HAL_GPIO_Init+0x5a>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d007      	beq.n	8002ade <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ad2:	2b11      	cmp	r3, #17
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b12      	cmp	r3, #18
 8002adc:	d130      	bne.n	8002b40 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	2203      	movs	r2, #3
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4013      	ands	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b14:	2201      	movs	r2, #1
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f003 0201 	and.w	r2, r3, #1
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d003      	beq.n	8002b80 <HAL_GPIO_Init+0xfc>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b12      	cmp	r3, #18
 8002b7e:	d123      	bne.n	8002bc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	08da      	lsrs	r2, r3, #3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3208      	adds	r2, #8
 8002b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	220f      	movs	r2, #15
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	08da      	lsrs	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3208      	adds	r2, #8
 8002bc2:	69b9      	ldr	r1, [r7, #24]
 8002bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0203 	and.w	r2, r3, #3
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 80c0 	beq.w	8002d8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	4b66      	ldr	r3, [pc, #408]	; (8002da8 <HAL_GPIO_Init+0x324>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	4a65      	ldr	r2, [pc, #404]	; (8002da8 <HAL_GPIO_Init+0x324>)
 8002c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c18:	6453      	str	r3, [r2, #68]	; 0x44
 8002c1a:	4b63      	ldr	r3, [pc, #396]	; (8002da8 <HAL_GPIO_Init+0x324>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c26:	4a61      	ldr	r2, [pc, #388]	; (8002dac <HAL_GPIO_Init+0x328>)
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	089b      	lsrs	r3, r3, #2
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	220f      	movs	r2, #15
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a58      	ldr	r2, [pc, #352]	; (8002db0 <HAL_GPIO_Init+0x32c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d037      	beq.n	8002cc2 <HAL_GPIO_Init+0x23e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a57      	ldr	r2, [pc, #348]	; (8002db4 <HAL_GPIO_Init+0x330>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d031      	beq.n	8002cbe <HAL_GPIO_Init+0x23a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a56      	ldr	r2, [pc, #344]	; (8002db8 <HAL_GPIO_Init+0x334>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d02b      	beq.n	8002cba <HAL_GPIO_Init+0x236>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a55      	ldr	r2, [pc, #340]	; (8002dbc <HAL_GPIO_Init+0x338>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d025      	beq.n	8002cb6 <HAL_GPIO_Init+0x232>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a54      	ldr	r2, [pc, #336]	; (8002dc0 <HAL_GPIO_Init+0x33c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d01f      	beq.n	8002cb2 <HAL_GPIO_Init+0x22e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a53      	ldr	r2, [pc, #332]	; (8002dc4 <HAL_GPIO_Init+0x340>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d019      	beq.n	8002cae <HAL_GPIO_Init+0x22a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a52      	ldr	r2, [pc, #328]	; (8002dc8 <HAL_GPIO_Init+0x344>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d013      	beq.n	8002caa <HAL_GPIO_Init+0x226>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a51      	ldr	r2, [pc, #324]	; (8002dcc <HAL_GPIO_Init+0x348>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d00d      	beq.n	8002ca6 <HAL_GPIO_Init+0x222>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a50      	ldr	r2, [pc, #320]	; (8002dd0 <HAL_GPIO_Init+0x34c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d007      	beq.n	8002ca2 <HAL_GPIO_Init+0x21e>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a4f      	ldr	r2, [pc, #316]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d101      	bne.n	8002c9e <HAL_GPIO_Init+0x21a>
 8002c9a:	2309      	movs	r3, #9
 8002c9c:	e012      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002c9e:	230a      	movs	r3, #10
 8002ca0:	e010      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	e00e      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002ca6:	2307      	movs	r3, #7
 8002ca8:	e00c      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002caa:	2306      	movs	r3, #6
 8002cac:	e00a      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002cae:	2305      	movs	r3, #5
 8002cb0:	e008      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002cb2:	2304      	movs	r3, #4
 8002cb4:	e006      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e004      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e002      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_GPIO_Init+0x240>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	69fa      	ldr	r2, [r7, #28]
 8002cc6:	f002 0203 	and.w	r2, r2, #3
 8002cca:	0092      	lsls	r2, r2, #2
 8002ccc:	4093      	lsls	r3, r2
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cd4:	4935      	ldr	r1, [pc, #212]	; (8002dac <HAL_GPIO_Init+0x328>)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	089b      	lsrs	r3, r3, #2
 8002cda:	3302      	adds	r3, #2
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ce2:	4b3d      	ldr	r3, [pc, #244]	; (8002dd8 <HAL_GPIO_Init+0x354>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	43db      	mvns	r3, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d06:	4a34      	ldr	r2, [pc, #208]	; (8002dd8 <HAL_GPIO_Init+0x354>)
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d0c:	4b32      	ldr	r3, [pc, #200]	; (8002dd8 <HAL_GPIO_Init+0x354>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d30:	4a29      	ldr	r2, [pc, #164]	; (8002dd8 <HAL_GPIO_Init+0x354>)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d36:	4b28      	ldr	r3, [pc, #160]	; (8002dd8 <HAL_GPIO_Init+0x354>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d5a:	4a1f      	ldr	r2, [pc, #124]	; (8002dd8 <HAL_GPIO_Init+0x354>)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d60:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <HAL_GPIO_Init+0x354>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d84:	4a14      	ldr	r2, [pc, #80]	; (8002dd8 <HAL_GPIO_Init+0x354>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	61fb      	str	r3, [r7, #28]
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	2b0f      	cmp	r3, #15
 8002d94:	f67f ae84 	bls.w	8002aa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d98:	bf00      	nop
 8002d9a:	bf00      	nop
 8002d9c:	3724      	adds	r7, #36	; 0x24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40013800 	.word	0x40013800
 8002db0:	40020000 	.word	0x40020000
 8002db4:	40020400 	.word	0x40020400
 8002db8:	40020800 	.word	0x40020800
 8002dbc:	40020c00 	.word	0x40020c00
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40021400 	.word	0x40021400
 8002dc8:	40021800 	.word	0x40021800
 8002dcc:	40021c00 	.word	0x40021c00
 8002dd0:	40022000 	.word	0x40022000
 8002dd4:	40022400 	.word	0x40022400
 8002dd8:	40013c00 	.word	0x40013c00

08002ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	807b      	strh	r3, [r7, #2]
 8002de8:	4613      	mov	r3, r2
 8002dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dec:	787b      	ldrb	r3, [r7, #1]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002df2:	887a      	ldrh	r2, [r7, #2]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002df8:	e003      	b.n	8002e02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dfa:	887b      	ldrh	r3, [r7, #2]
 8002dfc:	041a      	lsls	r2, r3, #16
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	619a      	str	r2, [r3, #24]
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
	...

08002e10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e1a:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	88fb      	ldrh	r3, [r7, #6]
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d006      	beq.n	8002e34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e26:	4a05      	ldr	r2, [pc, #20]	; (8002e3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e2c:	88fb      	ldrh	r3, [r7, #6]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 f806 	bl	8002e40 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e34:	bf00      	nop
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40013c00 	.word	0x40013c00

08002e40 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U, tmp1 = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	2300      	movs	r3, #0
 8002e66:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e0bf      	b.n	8002ff2 <HAL_LTDC_Init+0x19a>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d106      	bne.n	8002e8c <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fe fd4e 	bl	8001928 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699a      	ldr	r2, [r3, #24]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002ea2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6999      	ldr	r1, [r3, #24]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002eb8:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6899      	ldr	r1, [r3, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	4b4a      	ldr	r3, [pc, #296]	; (8002ffc <HAL_LTDC_Init+0x1a4>)
 8002ed4:	400b      	ands	r3, r1
 8002ed6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	041b      	lsls	r3, r3, #16
 8002ede:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6899      	ldr	r1, [r3, #8]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68d9      	ldr	r1, [r3, #12]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4b3e      	ldr	r3, [pc, #248]	; (8002ffc <HAL_LTDC_Init+0x1a4>)
 8002f02:	400b      	ands	r3, r1
 8002f04:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	041b      	lsls	r3, r3, #16
 8002f0c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68d9      	ldr	r1, [r3, #12]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1a      	ldr	r2, [r3, #32]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6919      	ldr	r1, [r3, #16]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	4b33      	ldr	r3, [pc, #204]	; (8002ffc <HAL_LTDC_Init+0x1a4>)
 8002f30:	400b      	ands	r3, r1
 8002f32:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	041b      	lsls	r3, r3, #16
 8002f3a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6919      	ldr	r1, [r3, #16]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6959      	ldr	r1, [r3, #20]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	4b27      	ldr	r3, [pc, #156]	; (8002ffc <HAL_LTDC_Init+0x1a4>)
 8002f5e:	400b      	ands	r3, r1
 8002f60:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f66:	041b      	lsls	r3, r3, #16
 8002f68:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6959      	ldr	r1, [r3, #20]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f86:	021b      	lsls	r3, r3, #8
 8002f88:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002f90:	041b      	lsls	r3, r3, #16
 8002f92:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0206 	orr.w	r2, r2, #6
 8002fce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699a      	ldr	r2, [r3, #24]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0201 	orr.w	r2, r2, #1
 8002fde:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	f000f800 	.word	0xf000f800

08003000 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8003000:	b5b0      	push	{r4, r5, r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));	
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <HAL_LTDC_ConfigLayer+0x1a>
 8003016:	2302      	movs	r3, #2
 8003018:	e02c      	b.n	8003074 <HAL_LTDC_ConfigLayer+0x74>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2202      	movs	r2, #2
 8003026:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2134      	movs	r1, #52	; 0x34
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	4413      	add	r3, r2
 8003036:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	4614      	mov	r4, r2
 800303e:	461d      	mov	r5, r3
 8003040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800304a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800304c:	682b      	ldr	r3, [r5, #0]
 800304e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	68b9      	ldr	r1, [r7, #8]
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f923 	bl	80032a0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2201      	movs	r2, #1
 8003060:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bdb0      	pop	{r4, r5, r7, pc}

0800307c <HAL_LTDC_ConfigCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigCLUT(LTDC_HandleTypeDef *hltdc, uint32_t *pCLUT, uint32_t CLUTSize, uint32_t LayerIdx)
{
 800307c:	b480      	push	{r7}
 800307e:	b089      	sub	sp, #36	; 0x24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	61fb      	str	r3, [r7, #28]
  uint32_t counter = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	61bb      	str	r3, [r7, #24]
  uint32_t pcounter = 0U;
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_LTDC_ConfigCLUT+0x28>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e059      	b.n	8003158 <HAL_LTDC_ConfigCLUT+0xdc>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;  
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  for(counter = 0U; (counter < CLUTSize); counter++)
 80030b4:	2300      	movs	r3, #0
 80030b6:	61bb      	str	r3, [r7, #24]
 80030b8:	e041      	b.n	800313e <HAL_LTDC_ConfigCLUT+0xc2>
  {
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2134      	movs	r1, #52	; 0x34
 80030c0:	fb01 f303 	mul.w	r3, r1, r3
 80030c4:	4413      	add	r3, r2
 80030c6:	3348      	adds	r3, #72	; 0x48
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b06      	cmp	r3, #6
 80030cc:	d114      	bne.n	80030f8 <HAL_LTDC_ConfigCLUT+0x7c>
    {
      tmp  = (((counter + 16U*counter) << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4613      	mov	r3, r2
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	4413      	add	r3, r2
 80030d6:	061a      	lsls	r2, r3, #24
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	431a      	orrs	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80030e8:	431a      	orrs	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61fb      	str	r3, [r7, #28]
 80030f6:	e010      	b.n	800311a <HAL_LTDC_ConfigCLUT+0x9e>
    }
    else
    { 
      tmp  = ((counter << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	061a      	lsls	r2, r3, #24
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	431a      	orrs	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800310c:	431a      	orrs	r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003116:	4313      	orrs	r3, r2
 8003118:	61fb      	str	r3, [r7, #28]
    }
    pcounter = (uint32_t)pCLUT + sizeof(*pCLUT);
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	3304      	adds	r3, #4
 800311e:	617b      	str	r3, [r7, #20]
    pCLUT = (uint32_t *)pcounter;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	60bb      	str	r3, [r7, #8]

    /* Specifies the C-LUT address and RGB value */
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	461a      	mov	r2, r3
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	01db      	lsls	r3, r3, #7
 800312e:	4413      	add	r3, r2
 8003130:	3384      	adds	r3, #132	; 0x84
 8003132:	461a      	mov	r2, r3
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	6413      	str	r3, [r2, #64]	; 0x40
  for(counter = 0U; (counter < CLUTSize); counter++)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	3301      	adds	r3, #1
 800313c:	61bb      	str	r3, [r7, #24]
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	429a      	cmp	r2, r3
 8003144:	d3b9      	bcc.n	80030ba <HAL_LTDC_ConfigCLUT+0x3e>
  }
  
  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);  
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3724      	adds	r7, #36	; 0x24
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_LTDC_EnableCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_LTDC_EnableCLUT+0x18>
 8003178:	2302      	movs	r3, #2
 800317a:	e026      	b.n	80031ca <HAL_LTDC_EnableCLUT+0x66>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color lookup table by setting CLUTEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	461a      	mov	r2, r3
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	01db      	lsls	r3, r3, #7
 8003196:	4413      	add	r3, r2
 8003198:	3384      	adds	r3, #132	; 0x84
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	4611      	mov	r1, r2
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	01d2      	lsls	r2, r2, #7
 80031a6:	440a      	add	r2, r1
 80031a8:	3284      	adds	r2, #132	; 0x84
 80031aa:	f043 0310 	orr.w	r3, r3, #16
 80031ae:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2201      	movs	r2, #1
 80031b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b086      	sub	sp, #24
 80031da:	af00      	add	r7, sp, #0
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_LTDC_SetAddress+0x1a>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e024      	b.n	800323a <HAL_LTDC_SetAddress+0x64>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2234      	movs	r2, #52	; 0x34
 8003204:	fb02 f303 	mul.w	r3, r2, r3
 8003208:	3338      	adds	r3, #56	; 0x38
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4413      	add	r3, r2
 800320e:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6979      	ldr	r1, [r7, #20]
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f840 	bl	80032a0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2201      	movs	r2, #1
 8003226:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation. 
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003252:	2b01      	cmp	r3, #1
 8003254:	d101      	bne.n	800325a <HAL_LTDC_Reload+0x18>
 8003256:	2302      	movs	r3, #2
 8003258:	e01c      	b.n	8003294 <HAL_LTDC_Reload+0x52>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;  
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2202      	movs	r2, #2
 8003266:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  
  /* Enable the Reload interrupt */  
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0208 	orr.w	r2, r2, #8
 8003278:	635a      	str	r2, [r3, #52]	; 0x34
       
  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;        
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  
  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b089      	sub	sp, #36	; 0x24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	0c1b      	lsrs	r3, r3, #16
 80032c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c8:	4413      	add	r3, r2
 80032ca:	041b      	lsls	r3, r3, #16
 80032cc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	01db      	lsls	r3, r3, #7
 80032d8:	4413      	add	r3, r2
 80032da:	3384      	adds	r3, #132	; 0x84
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	6812      	ldr	r2, [r2, #0]
 80032e2:	4611      	mov	r1, r2
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	01d2      	lsls	r2, r2, #7
 80032e8:	440a      	add	r2, r1
 80032ea:	3284      	adds	r2, #132	; 0x84
 80032ec:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80032f0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	0c1b      	lsrs	r3, r3, #16
 80032fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003302:	4413      	add	r3, r2
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4619      	mov	r1, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	01db      	lsls	r3, r3, #7
 8003310:	440b      	add	r3, r1
 8003312:	3384      	adds	r3, #132	; 0x84
 8003314:	4619      	mov	r1, r3
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	4313      	orrs	r3, r2
 800331a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800332a:	4413      	add	r3, r2
 800332c:	041b      	lsls	r3, r3, #16
 800332e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	01db      	lsls	r3, r3, #7
 800333a:	4413      	add	r3, r2
 800333c:	3384      	adds	r3, #132	; 0x84
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	6812      	ldr	r2, [r2, #0]
 8003344:	4611      	mov	r1, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	01d2      	lsls	r2, r2, #7
 800334a:	440a      	add	r2, r1
 800334c:	3284      	adds	r2, #132	; 0x84
 800334e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003352:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003362:	4413      	add	r3, r2
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4619      	mov	r1, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	01db      	lsls	r3, r3, #7
 8003370:	440b      	add	r3, r1
 8003372:	3384      	adds	r3, #132	; 0x84
 8003374:	4619      	mov	r1, r3
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	4313      	orrs	r3, r2
 800337a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	01db      	lsls	r3, r3, #7
 8003386:	4413      	add	r3, r2
 8003388:	3384      	adds	r3, #132	; 0x84
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	6812      	ldr	r2, [r2, #0]
 8003390:	4611      	mov	r1, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	01d2      	lsls	r2, r2, #7
 8003396:	440a      	add	r2, r1
 8003398:	3284      	adds	r2, #132	; 0x84
 800339a:	f023 0307 	bic.w	r3, r3, #7
 800339e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	461a      	mov	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	01db      	lsls	r3, r3, #7
 80033aa:	4413      	add	r3, r2
 80033ac:	3384      	adds	r3, #132	; 0x84
 80033ae:	461a      	mov	r2, r3
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80033bc:	021b      	lsls	r3, r3, #8
 80033be:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80033c6:	041b      	lsls	r3, r3, #16
 80033c8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	061b      	lsls	r3, r3, #24
 80033d0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	01db      	lsls	r3, r3, #7
 80033dc:	4413      	add	r3, r2
 80033de:	3384      	adds	r3, #132	; 0x84
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	01db      	lsls	r3, r3, #7
 80033ec:	4413      	add	r3, r2
 80033ee:	3384      	adds	r3, #132	; 0x84
 80033f0:	461a      	mov	r2, r3
 80033f2:	2300      	movs	r3, #0
 80033f4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033fc:	461a      	mov	r2, r3
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	431a      	orrs	r2, r3
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	431a      	orrs	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4619      	mov	r1, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	01db      	lsls	r3, r3, #7
 8003410:	440b      	add	r3, r1
 8003412:	3384      	adds	r3, #132	; 0x84
 8003414:	4619      	mov	r1, r3
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	4313      	orrs	r3, r2
 800341a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	461a      	mov	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	01db      	lsls	r3, r3, #7
 8003426:	4413      	add	r3, r2
 8003428:	3384      	adds	r3, #132	; 0x84
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	4611      	mov	r1, r2
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	01d2      	lsls	r2, r2, #7
 8003436:	440a      	add	r2, r1
 8003438:	3284      	adds	r2, #132	; 0x84
 800343a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800343e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	01db      	lsls	r3, r3, #7
 800344a:	4413      	add	r3, r2
 800344c:	3384      	adds	r3, #132	; 0x84
 800344e:	461a      	mov	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	01db      	lsls	r3, r3, #7
 8003460:	4413      	add	r3, r2
 8003462:	3384      	adds	r3, #132	; 0x84
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	6812      	ldr	r2, [r2, #0]
 800346a:	4611      	mov	r1, r2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	01d2      	lsls	r2, r2, #7
 8003470:	440a      	add	r2, r1
 8003472:	3284      	adds	r2, #132	; 0x84
 8003474:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003478:	f023 0307 	bic.w	r3, r3, #7
 800347c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	69da      	ldr	r2, [r3, #28]
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	68f9      	ldr	r1, [r7, #12]
 8003488:	6809      	ldr	r1, [r1, #0]
 800348a:	4608      	mov	r0, r1
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	01c9      	lsls	r1, r1, #7
 8003490:	4401      	add	r1, r0
 8003492:	3184      	adds	r1, #132	; 0x84
 8003494:	4313      	orrs	r3, r2
 8003496:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	461a      	mov	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	01db      	lsls	r3, r3, #7
 80034a2:	4413      	add	r3, r2
 80034a4:	3384      	adds	r3, #132	; 0x84
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	461a      	mov	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	01db      	lsls	r3, r3, #7
 80034b2:	4413      	add	r3, r2
 80034b4:	3384      	adds	r3, #132	; 0x84
 80034b6:	461a      	mov	r2, r3
 80034b8:	2300      	movs	r3, #0
 80034ba:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	461a      	mov	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	01db      	lsls	r3, r3, #7
 80034c6:	4413      	add	r3, r2
 80034c8:	3384      	adds	r3, #132	; 0x84
 80034ca:	461a      	mov	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d102      	bne.n	80034e0 <LTDC_SetConfig+0x240>
  {
    tmp = 4U;
 80034da:	2304      	movs	r3, #4
 80034dc:	61fb      	str	r3, [r7, #28]
 80034de:	e01b      	b.n	8003518 <LTDC_SetConfig+0x278>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d102      	bne.n	80034ee <LTDC_SetConfig+0x24e>
  {
    tmp = 3U;
 80034e8:	2303      	movs	r3, #3
 80034ea:	61fb      	str	r3, [r7, #28]
 80034ec:	e014      	b.n	8003518 <LTDC_SetConfig+0x278>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d00b      	beq.n	800350e <LTDC_SetConfig+0x26e>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d007      	beq.n	800350e <LTDC_SetConfig+0x26e>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003502:	2b03      	cmp	r3, #3
 8003504:	d003      	beq.n	800350e <LTDC_SetConfig+0x26e>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800350a:	2b07      	cmp	r3, #7
 800350c:	d102      	bne.n	8003514 <LTDC_SetConfig+0x274>
  {
    tmp = 2U;
 800350e:	2302      	movs	r3, #2
 8003510:	61fb      	str	r3, [r7, #28]
 8003512:	e001      	b.n	8003518 <LTDC_SetConfig+0x278>
  }
  else
  {
    tmp = 1U;
 8003514:	2301      	movs	r3, #1
 8003516:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	461a      	mov	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	01db      	lsls	r3, r3, #7
 8003522:	4413      	add	r3, r2
 8003524:	3384      	adds	r3, #132	; 0x84
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	6812      	ldr	r2, [r2, #0]
 800352c:	4611      	mov	r1, r2
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	01d2      	lsls	r2, r2, #7
 8003532:	440a      	add	r2, r1
 8003534:	3284      	adds	r2, #132	; 0x84
 8003536:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800353a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	69fa      	ldr	r2, [r7, #28]
 8003542:	fb02 f303 	mul.w	r3, r2, r3
 8003546:	041a      	lsls	r2, r3, #16
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	6859      	ldr	r1, [r3, #4]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	1acb      	subs	r3, r1, r3
 8003552:	69f9      	ldr	r1, [r7, #28]
 8003554:	fb01 f303 	mul.w	r3, r1, r3
 8003558:	3303      	adds	r3, #3
 800355a:	68f9      	ldr	r1, [r7, #12]
 800355c:	6809      	ldr	r1, [r1, #0]
 800355e:	4608      	mov	r0, r1
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	01c9      	lsls	r1, r1, #7
 8003564:	4401      	add	r1, r0
 8003566:	3184      	adds	r1, #132	; 0x84
 8003568:	4313      	orrs	r3, r2
 800356a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	461a      	mov	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	01db      	lsls	r3, r3, #7
 8003576:	4413      	add	r3, r2
 8003578:	3384      	adds	r3, #132	; 0x84
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	6812      	ldr	r2, [r2, #0]
 8003580:	4611      	mov	r1, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	01d2      	lsls	r2, r2, #7
 8003586:	440a      	add	r2, r1
 8003588:	3284      	adds	r2, #132	; 0x84
 800358a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800358e:	f023 0307 	bic.w	r3, r3, #7
 8003592:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	461a      	mov	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	01db      	lsls	r3, r3, #7
 800359e:	4413      	add	r3, r2
 80035a0:	3384      	adds	r3, #132	; 0x84
 80035a2:	461a      	mov	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	01db      	lsls	r3, r3, #7
 80035b4:	4413      	add	r3, r2
 80035b6:	3384      	adds	r3, #132	; 0x84
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	4611      	mov	r1, r2
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	01d2      	lsls	r2, r2, #7
 80035c4:	440a      	add	r2, r1
 80035c6:	3284      	adds	r2, #132	; 0x84
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6013      	str	r3, [r2, #0]
}
 80035ce:	bf00      	nop
 80035d0:	3724      	adds	r7, #36	; 0x24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
	...

080035dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	603b      	str	r3, [r7, #0]
 80035ea:	4b20      	ldr	r3, [pc, #128]	; (800366c <HAL_PWREx_EnableOverDrive+0x90>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	4a1f      	ldr	r2, [pc, #124]	; (800366c <HAL_PWREx_EnableOverDrive+0x90>)
 80035f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f4:	6413      	str	r3, [r2, #64]	; 0x40
 80035f6:	4b1d      	ldr	r3, [pc, #116]	; (800366c <HAL_PWREx_EnableOverDrive+0x90>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003602:	4b1b      	ldr	r3, [pc, #108]	; (8003670 <HAL_PWREx_EnableOverDrive+0x94>)
 8003604:	2201      	movs	r2, #1
 8003606:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003608:	f7ff f8fa 	bl	8002800 <HAL_GetTick>
 800360c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800360e:	e009      	b.n	8003624 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003610:	f7ff f8f6 	bl	8002800 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800361e:	d901      	bls.n	8003624 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e01f      	b.n	8003664 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003624:	4b13      	ldr	r3, [pc, #76]	; (8003674 <HAL_PWREx_EnableOverDrive+0x98>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800362c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003630:	d1ee      	bne.n	8003610 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003632:	4b11      	ldr	r3, [pc, #68]	; (8003678 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003634:	2201      	movs	r2, #1
 8003636:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003638:	f7ff f8e2 	bl	8002800 <HAL_GetTick>
 800363c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800363e:	e009      	b.n	8003654 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003640:	f7ff f8de 	bl	8002800 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800364e:	d901      	bls.n	8003654 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e007      	b.n	8003664 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003654:	4b07      	ldr	r3, [pc, #28]	; (8003674 <HAL_PWREx_EnableOverDrive+0x98>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003660:	d1ee      	bne.n	8003640 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40023800 	.word	0x40023800
 8003670:	420e0040 	.word	0x420e0040
 8003674:	40007000 	.word	0x40007000
 8003678:	420e0044 	.word	0x420e0044

0800367c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e25b      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d075      	beq.n	8003786 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800369a:	4ba3      	ldr	r3, [pc, #652]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d00c      	beq.n	80036c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036a6:	4ba0      	ldr	r3, [pc, #640]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d112      	bne.n	80036d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036b2:	4b9d      	ldr	r3, [pc, #628]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036be:	d10b      	bne.n	80036d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c0:	4b99      	ldr	r3, [pc, #612]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d05b      	beq.n	8003784 <HAL_RCC_OscConfig+0x108>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d157      	bne.n	8003784 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e236      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e0:	d106      	bne.n	80036f0 <HAL_RCC_OscConfig+0x74>
 80036e2:	4b91      	ldr	r3, [pc, #580]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a90      	ldr	r2, [pc, #576]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80036e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	e01d      	b.n	800372c <HAL_RCC_OscConfig+0xb0>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036f8:	d10c      	bne.n	8003714 <HAL_RCC_OscConfig+0x98>
 80036fa:	4b8b      	ldr	r3, [pc, #556]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a8a      	ldr	r2, [pc, #552]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	4b88      	ldr	r3, [pc, #544]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a87      	ldr	r2, [pc, #540]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 800370c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e00b      	b.n	800372c <HAL_RCC_OscConfig+0xb0>
 8003714:	4b84      	ldr	r3, [pc, #528]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a83      	ldr	r2, [pc, #524]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 800371a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	4b81      	ldr	r3, [pc, #516]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a80      	ldr	r2, [pc, #512]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800372a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d013      	beq.n	800375c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7ff f864 	bl	8002800 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800373c:	f7ff f860 	bl	8002800 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b64      	cmp	r3, #100	; 0x64
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e1fb      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374e:	4b76      	ldr	r3, [pc, #472]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0xc0>
 800375a:	e014      	b.n	8003786 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375c:	f7ff f850 	bl	8002800 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003764:	f7ff f84c 	bl	8002800 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	; 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e1e7      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003776:	4b6c      	ldr	r3, [pc, #432]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0xe8>
 8003782:	e000      	b.n	8003786 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d063      	beq.n	800385a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003792:	4b65      	ldr	r3, [pc, #404]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00b      	beq.n	80037b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800379e:	4b62      	ldr	r3, [pc, #392]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d11c      	bne.n	80037e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037aa:	4b5f      	ldr	r3, [pc, #380]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d116      	bne.n	80037e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b6:	4b5c      	ldr	r3, [pc, #368]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_RCC_OscConfig+0x152>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d001      	beq.n	80037ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e1bb      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ce:	4b56      	ldr	r3, [pc, #344]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	4952      	ldr	r1, [pc, #328]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e2:	e03a      	b.n	800385a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d020      	beq.n	800382e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037ec:	4b4f      	ldr	r3, [pc, #316]	; (800392c <HAL_RCC_OscConfig+0x2b0>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f2:	f7ff f805 	bl	8002800 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037fa:	f7ff f801 	bl	8002800 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e19c      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380c:	4b46      	ldr	r3, [pc, #280]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003818:	4b43      	ldr	r3, [pc, #268]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4940      	ldr	r1, [pc, #256]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003828:	4313      	orrs	r3, r2
 800382a:	600b      	str	r3, [r1, #0]
 800382c:	e015      	b.n	800385a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800382e:	4b3f      	ldr	r3, [pc, #252]	; (800392c <HAL_RCC_OscConfig+0x2b0>)
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7fe ffe4 	bl	8002800 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800383c:	f7fe ffe0 	bl	8002800 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e17b      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800384e:	4b36      	ldr	r3, [pc, #216]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f0      	bne.n	800383c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d030      	beq.n	80038c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d016      	beq.n	800389c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800386e:	4b30      	ldr	r3, [pc, #192]	; (8003930 <HAL_RCC_OscConfig+0x2b4>)
 8003870:	2201      	movs	r2, #1
 8003872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003874:	f7fe ffc4 	bl	8002800 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800387c:	f7fe ffc0 	bl	8002800 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e15b      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800388e:	4b26      	ldr	r3, [pc, #152]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 8003890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0x200>
 800389a:	e015      	b.n	80038c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800389c:	4b24      	ldr	r3, [pc, #144]	; (8003930 <HAL_RCC_OscConfig+0x2b4>)
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a2:	f7fe ffad 	bl	8002800 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038aa:	f7fe ffa9 	bl	8002800 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e144      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038bc:	4b1a      	ldr	r3, [pc, #104]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80038be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1f0      	bne.n	80038aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 80a0 	beq.w	8003a16 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038d6:	2300      	movs	r3, #0
 80038d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038da:	4b13      	ldr	r3, [pc, #76]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10f      	bne.n	8003906 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038e6:	2300      	movs	r3, #0
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	4a0e      	ldr	r2, [pc, #56]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80038f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f4:	6413      	str	r3, [r2, #64]	; 0x40
 80038f6:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <HAL_RCC_OscConfig+0x2ac>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fe:	60bb      	str	r3, [r7, #8]
 8003900:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003902:	2301      	movs	r3, #1
 8003904:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003906:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <HAL_RCC_OscConfig+0x2b8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d121      	bne.n	8003956 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003912:	4b08      	ldr	r3, [pc, #32]	; (8003934 <HAL_RCC_OscConfig+0x2b8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a07      	ldr	r2, [pc, #28]	; (8003934 <HAL_RCC_OscConfig+0x2b8>)
 8003918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800391c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800391e:	f7fe ff6f 	bl	8002800 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003924:	e011      	b.n	800394a <HAL_RCC_OscConfig+0x2ce>
 8003926:	bf00      	nop
 8003928:	40023800 	.word	0x40023800
 800392c:	42470000 	.word	0x42470000
 8003930:	42470e80 	.word	0x42470e80
 8003934:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003938:	f7fe ff62 	bl	8002800 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e0fd      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394a:	4b81      	ldr	r3, [pc, #516]	; (8003b50 <HAL_RCC_OscConfig+0x4d4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f0      	beq.n	8003938 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d106      	bne.n	800396c <HAL_RCC_OscConfig+0x2f0>
 800395e:	4b7d      	ldr	r3, [pc, #500]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003962:	4a7c      	ldr	r2, [pc, #496]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003964:	f043 0301 	orr.w	r3, r3, #1
 8003968:	6713      	str	r3, [r2, #112]	; 0x70
 800396a:	e01c      	b.n	80039a6 <HAL_RCC_OscConfig+0x32a>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	2b05      	cmp	r3, #5
 8003972:	d10c      	bne.n	800398e <HAL_RCC_OscConfig+0x312>
 8003974:	4b77      	ldr	r3, [pc, #476]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003978:	4a76      	ldr	r2, [pc, #472]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 800397a:	f043 0304 	orr.w	r3, r3, #4
 800397e:	6713      	str	r3, [r2, #112]	; 0x70
 8003980:	4b74      	ldr	r3, [pc, #464]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003984:	4a73      	ldr	r2, [pc, #460]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	6713      	str	r3, [r2, #112]	; 0x70
 800398c:	e00b      	b.n	80039a6 <HAL_RCC_OscConfig+0x32a>
 800398e:	4b71      	ldr	r3, [pc, #452]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003992:	4a70      	ldr	r2, [pc, #448]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003994:	f023 0301 	bic.w	r3, r3, #1
 8003998:	6713      	str	r3, [r2, #112]	; 0x70
 800399a:	4b6e      	ldr	r3, [pc, #440]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 800399c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399e:	4a6d      	ldr	r2, [pc, #436]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 80039a0:	f023 0304 	bic.w	r3, r3, #4
 80039a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d015      	beq.n	80039da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ae:	f7fe ff27 	bl	8002800 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b4:	e00a      	b.n	80039cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039b6:	f7fe ff23 	bl	8002800 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e0bc      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039cc:	4b61      	ldr	r3, [pc, #388]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 80039ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0ee      	beq.n	80039b6 <HAL_RCC_OscConfig+0x33a>
 80039d8:	e014      	b.n	8003a04 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039da:	f7fe ff11 	bl	8002800 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e0:	e00a      	b.n	80039f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e2:	f7fe ff0d 	bl	8002800 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e0a6      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039f8:	4b56      	ldr	r3, [pc, #344]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 80039fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1ee      	bne.n	80039e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a04:	7dfb      	ldrb	r3, [r7, #23]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d105      	bne.n	8003a16 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a0a:	4b52      	ldr	r3, [pc, #328]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	4a51      	ldr	r2, [pc, #324]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003a10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 8092 	beq.w	8003b44 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a20:	4b4c      	ldr	r3, [pc, #304]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 030c 	and.w	r3, r3, #12
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d05c      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d141      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a34:	4b48      	ldr	r3, [pc, #288]	; (8003b58 <HAL_RCC_OscConfig+0x4dc>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3a:	f7fe fee1 	bl	8002800 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a42:	f7fe fedd 	bl	8002800 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e078      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a54:	4b3f      	ldr	r3, [pc, #252]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f0      	bne.n	8003a42 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	69da      	ldr	r2, [r3, #28]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	019b      	lsls	r3, r3, #6
 8003a70:	431a      	orrs	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	085b      	lsrs	r3, r3, #1
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	041b      	lsls	r3, r3, #16
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	061b      	lsls	r3, r3, #24
 8003a84:	4933      	ldr	r1, [pc, #204]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a8a:	4b33      	ldr	r3, [pc, #204]	; (8003b58 <HAL_RCC_OscConfig+0x4dc>)
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a90:	f7fe feb6 	bl	8002800 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a98:	f7fe feb2 	bl	8002800 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e04d      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aaa:	4b2a      	ldr	r3, [pc, #168]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0x41c>
 8003ab6:	e045      	b.n	8003b44 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab8:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <HAL_RCC_OscConfig+0x4dc>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abe:	f7fe fe9f 	bl	8002800 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac6:	f7fe fe9b 	bl	8002800 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e036      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad8:	4b1e      	ldr	r3, [pc, #120]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1f0      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x44a>
 8003ae4:	e02e      	b.n	8003b44 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e029      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003af2:	4b18      	ldr	r3, [pc, #96]	; (8003b54 <HAL_RCC_OscConfig+0x4d8>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d11c      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d115      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d10d      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d106      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40007000 	.word	0x40007000
 8003b54:	40023800 	.word	0x40023800
 8003b58:	42470060 	.word	0x42470060

08003b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0cc      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b70:	4b68      	ldr	r3, [pc, #416]	; (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d90c      	bls.n	8003b98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7e:	4b65      	ldr	r3, [pc, #404]	; (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b86:	4b63      	ldr	r3, [pc, #396]	; (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d001      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0b8      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d020      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bb0:	4b59      	ldr	r3, [pc, #356]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	4a58      	ldr	r2, [pc, #352]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bc8:	4b53      	ldr	r3, [pc, #332]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	4a52      	ldr	r2, [pc, #328]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd4:	4b50      	ldr	r3, [pc, #320]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	494d      	ldr	r1, [pc, #308]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d044      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d107      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfa:	4b47      	ldr	r3, [pc, #284]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d119      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e07f      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d003      	beq.n	8003c1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d107      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c1a:	4b3f      	ldr	r3, [pc, #252]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d109      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e06f      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c2a:	4b3b      	ldr	r3, [pc, #236]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e067      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c3a:	4b37      	ldr	r3, [pc, #220]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f023 0203 	bic.w	r2, r3, #3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	4934      	ldr	r1, [pc, #208]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c4c:	f7fe fdd8 	bl	8002800 <HAL_GetTick>
 8003c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c52:	e00a      	b.n	8003c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c54:	f7fe fdd4 	bl	8002800 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e04f      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6a:	4b2b      	ldr	r3, [pc, #172]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 020c 	and.w	r2, r3, #12
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d1eb      	bne.n	8003c54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c7c:	4b25      	ldr	r3, [pc, #148]	; (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 030f 	and.w	r3, r3, #15
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d20c      	bcs.n	8003ca4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8a:	4b22      	ldr	r3, [pc, #136]	; (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c92:	4b20      	ldr	r3, [pc, #128]	; (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e032      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb0:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	4916      	ldr	r1, [pc, #88]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d009      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cce:	4b12      	ldr	r3, [pc, #72]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	490e      	ldr	r1, [pc, #56]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ce2:	f000 f821 	bl	8003d28 <HAL_RCC_GetSysClockFreq>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	091b      	lsrs	r3, r3, #4
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	490a      	ldr	r1, [pc, #40]	; (8003d1c <HAL_RCC_ClockConfig+0x1c0>)
 8003cf4:	5ccb      	ldrb	r3, [r1, r3]
 8003cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfa:	4a09      	ldr	r2, [pc, #36]	; (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cfe:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <HAL_RCC_ClockConfig+0x1c8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fe fd38 	bl	8002778 <HAL_InitTick>

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40023c00 	.word	0x40023c00
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	08004b28 	.word	0x08004b28
 8003d20:	20012c04 	.word	0x20012c04
 8003d24:	20012c08 	.word	0x20012c08

08003d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	607b      	str	r3, [r7, #4]
 8003d34:	2300      	movs	r3, #0
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	2300      	movs	r3, #0
 8003d3a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d40:	4b67      	ldr	r3, [pc, #412]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 030c 	and.w	r3, r3, #12
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d00d      	beq.n	8003d68 <HAL_RCC_GetSysClockFreq+0x40>
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	f200 80bd 	bhi.w	8003ecc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <HAL_RCC_GetSysClockFreq+0x34>
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d003      	beq.n	8003d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d5a:	e0b7      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d5c:	4b61      	ldr	r3, [pc, #388]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003d5e:	60bb      	str	r3, [r7, #8]
       break;
 8003d60:	e0b7      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d62:	4b61      	ldr	r3, [pc, #388]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003d64:	60bb      	str	r3, [r7, #8]
      break;
 8003d66:	e0b4      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d68:	4b5d      	ldr	r3, [pc, #372]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d70:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d72:	4b5b      	ldr	r3, [pc, #364]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d04d      	beq.n	8003e1a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d7e:	4b58      	ldr	r3, [pc, #352]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	099b      	lsrs	r3, r3, #6
 8003d84:	461a      	mov	r2, r3
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d8e:	f04f 0100 	mov.w	r1, #0
 8003d92:	ea02 0800 	and.w	r8, r2, r0
 8003d96:	ea03 0901 	and.w	r9, r3, r1
 8003d9a:	4640      	mov	r0, r8
 8003d9c:	4649      	mov	r1, r9
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	014b      	lsls	r3, r1, #5
 8003da8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003dac:	0142      	lsls	r2, r0, #5
 8003dae:	4610      	mov	r0, r2
 8003db0:	4619      	mov	r1, r3
 8003db2:	ebb0 0008 	subs.w	r0, r0, r8
 8003db6:	eb61 0109 	sbc.w	r1, r1, r9
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	018b      	lsls	r3, r1, #6
 8003dc4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003dc8:	0182      	lsls	r2, r0, #6
 8003dca:	1a12      	subs	r2, r2, r0
 8003dcc:	eb63 0301 	sbc.w	r3, r3, r1
 8003dd0:	f04f 0000 	mov.w	r0, #0
 8003dd4:	f04f 0100 	mov.w	r1, #0
 8003dd8:	00d9      	lsls	r1, r3, #3
 8003dda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dde:	00d0      	lsls	r0, r2, #3
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	eb12 0208 	adds.w	r2, r2, r8
 8003de8:	eb43 0309 	adc.w	r3, r3, r9
 8003dec:	f04f 0000 	mov.w	r0, #0
 8003df0:	f04f 0100 	mov.w	r1, #0
 8003df4:	0259      	lsls	r1, r3, #9
 8003df6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003dfa:	0250      	lsls	r0, r2, #9
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4610      	mov	r0, r2
 8003e02:	4619      	mov	r1, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	461a      	mov	r2, r3
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	f7fc f9ee 	bl	80001ec <__aeabi_uldivmod>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4613      	mov	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	e04a      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e1a:	4b31      	ldr	r3, [pc, #196]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	099b      	lsrs	r3, r3, #6
 8003e20:	461a      	mov	r2, r3
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e2a:	f04f 0100 	mov.w	r1, #0
 8003e2e:	ea02 0400 	and.w	r4, r2, r0
 8003e32:	ea03 0501 	and.w	r5, r3, r1
 8003e36:	4620      	mov	r0, r4
 8003e38:	4629      	mov	r1, r5
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	f04f 0300 	mov.w	r3, #0
 8003e42:	014b      	lsls	r3, r1, #5
 8003e44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e48:	0142      	lsls	r2, r0, #5
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	1b00      	subs	r0, r0, r4
 8003e50:	eb61 0105 	sbc.w	r1, r1, r5
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	018b      	lsls	r3, r1, #6
 8003e5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e62:	0182      	lsls	r2, r0, #6
 8003e64:	1a12      	subs	r2, r2, r0
 8003e66:	eb63 0301 	sbc.w	r3, r3, r1
 8003e6a:	f04f 0000 	mov.w	r0, #0
 8003e6e:	f04f 0100 	mov.w	r1, #0
 8003e72:	00d9      	lsls	r1, r3, #3
 8003e74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e78:	00d0      	lsls	r0, r2, #3
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	1912      	adds	r2, r2, r4
 8003e80:	eb45 0303 	adc.w	r3, r5, r3
 8003e84:	f04f 0000 	mov.w	r0, #0
 8003e88:	f04f 0100 	mov.w	r1, #0
 8003e8c:	0299      	lsls	r1, r3, #10
 8003e8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e92:	0290      	lsls	r0, r2, #10
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	4610      	mov	r0, r2
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	f7fc f9a2 	bl	80001ec <__aeabi_uldivmod>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4613      	mov	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	0c1b      	lsrs	r3, r3, #16
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	3301      	adds	r3, #1
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec8:	60bb      	str	r3, [r7, #8]
      break;
 8003eca:	e002      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ece:	60bb      	str	r3, [r7, #8]
      break;
 8003ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ede:	bf00      	nop
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	00f42400 	.word	0x00f42400
 8003ee8:	007a1200 	.word	0x007a1200

08003eec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10b      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d105      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d075      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f20:	4bad      	ldr	r3, [pc, #692]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f26:	f7fe fc6b 	bl	8002800 <HAL_GetTick>
 8003f2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f2e:	f7fe fc67 	bl	8002800 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e18b      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f40:	4ba6      	ldr	r3, [pc, #664]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1f0      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d009      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	019a      	lsls	r2, r3, #6
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	071b      	lsls	r3, r3, #28
 8003f64:	499d      	ldr	r1, [pc, #628]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01f      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f78:	4b98      	ldr	r3, [pc, #608]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f7e:	0f1b      	lsrs	r3, r3, #28
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	019a      	lsls	r2, r3, #6
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	061b      	lsls	r3, r3, #24
 8003f92:	431a      	orrs	r2, r3
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	071b      	lsls	r3, r3, #28
 8003f98:	4990      	ldr	r1, [pc, #576]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003fa0:	4b8e      	ldr	r3, [pc, #568]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fa6:	f023 021f 	bic.w	r2, r3, #31
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	498a      	ldr	r1, [pc, #552]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00d      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	019a      	lsls	r2, r3, #6
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	061b      	lsls	r3, r3, #24
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	071b      	lsls	r3, r3, #28
 8003fd8:	4980      	ldr	r1, [pc, #512]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003fe0:	4b7d      	ldr	r3, [pc, #500]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fe6:	f7fe fc0b 	bl	8002800 <HAL_GetTick>
 8003fea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fec:	e008      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003fee:	f7fe fc07 	bl	8002800 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e12b      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004000:	4b76      	ldr	r3, [pc, #472]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0f0      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	d105      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004020:	2b00      	cmp	r3, #0
 8004022:	d079      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004024:	4b6e      	ldr	r3, [pc, #440]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800402a:	f7fe fbe9 	bl	8002800 <HAL_GetTick>
 800402e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004030:	e008      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004032:	f7fe fbe5 	bl	8002800 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e109      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004044:	4b65      	ldr	r3, [pc, #404]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800404c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004050:	d0ef      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b00      	cmp	r3, #0
 800405c:	d020      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800405e:	4b5f      	ldr	r3, [pc, #380]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004064:	0f1b      	lsrs	r3, r3, #28
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	019a      	lsls	r2, r3, #6
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	061b      	lsls	r3, r3, #24
 8004078:	431a      	orrs	r2, r3
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	071b      	lsls	r3, r3, #28
 800407e:	4957      	ldr	r1, [pc, #348]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004086:	4b55      	ldr	r3, [pc, #340]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800408c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	3b01      	subs	r3, #1
 8004096:	021b      	lsls	r3, r3, #8
 8004098:	4950      	ldr	r1, [pc, #320]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d01e      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040ac:	4b4b      	ldr	r3, [pc, #300]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b2:	0e1b      	lsrs	r3, r3, #24
 80040b4:	f003 030f 	and.w	r3, r3, #15
 80040b8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	019a      	lsls	r2, r3, #6
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	061b      	lsls	r3, r3, #24
 80040c4:	431a      	orrs	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	071b      	lsls	r3, r3, #28
 80040cc:	4943      	ldr	r1, [pc, #268]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80040d4:	4b41      	ldr	r3, [pc, #260]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	493e      	ldr	r1, [pc, #248]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040ea:	4b3d      	ldr	r3, [pc, #244]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040f0:	f7fe fb86 	bl	8002800 <HAL_GetTick>
 80040f4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80040f8:	f7fe fb82 	bl	8002800 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e0a6      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800410a:	4b34      	ldr	r3, [pc, #208]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004112:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004116:	d1ef      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0320 	and.w	r3, r3, #32
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 808d 	beq.w	8004240 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004126:	2300      	movs	r3, #0
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	4b2c      	ldr	r3, [pc, #176]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	4a2b      	ldr	r2, [pc, #172]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004134:	6413      	str	r3, [r2, #64]	; 0x40
 8004136:	4b29      	ldr	r3, [pc, #164]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004142:	4b28      	ldr	r3, [pc, #160]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a27      	ldr	r2, [pc, #156]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800414e:	f7fe fb57 	bl	8002800 <HAL_GetTick>
 8004152:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004154:	e008      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004156:	f7fe fb53 	bl	8002800 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e077      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004168:	4b1e      	ldr	r3, [pc, #120]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0f0      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004174:	4b19      	ldr	r3, [pc, #100]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d039      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	429a      	cmp	r2, r3
 8004190:	d032      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004192:	4b12      	ldr	r3, [pc, #72]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800419a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800419c:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800419e:	2201      	movs	r2, #1
 80041a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041a2:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80041a8:	4a0c      	ldr	r2, [pc, #48]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041ae:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d11e      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80041ba:	f7fe fb21 	bl	8002800 <HAL_GetTick>
 80041be:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c0:	e014      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041c2:	f7fe fb1d 	bl	8002800 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d90b      	bls.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e03f      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80041d8:	42470068 	.word	0x42470068
 80041dc:	40023800 	.word	0x40023800
 80041e0:	42470070 	.word	0x42470070
 80041e4:	40007000 	.word	0x40007000
 80041e8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ec:	4b1c      	ldr	r3, [pc, #112]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80041ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0e4      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004200:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004204:	d10d      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004206:	4b16      	ldr	r3, [pc, #88]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800421a:	4911      	ldr	r1, [pc, #68]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800421c:	4313      	orrs	r3, r2
 800421e:	608b      	str	r3, [r1, #8]
 8004220:	e005      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004222:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	4a0e      	ldr	r2, [pc, #56]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004228:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800422c:	6093      	str	r3, [r2, #8]
 800422e:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004230:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800423a:	4909      	ldr	r1, [pc, #36]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800423c:	4313      	orrs	r3, r2
 800423e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	2b00      	cmp	r3, #0
 800424a:	d004      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004252:	4b04      	ldr	r3, [pc, #16]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004254:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40023800 	.word	0x40023800
 8004264:	424711e0 	.word	0x424711e0

08004268 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e056      	b.n	8004328 <HAL_SPI_Init+0xc0>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d106      	bne.n	800429a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7fe f973 	bl	8002580 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2202      	movs	r2, #2
 800429e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042b0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	431a      	orrs	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	431a      	orrs	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	ea42 0103 	orr.w	r1, r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	0c1b      	lsrs	r3, r3, #16
 80042f8:	f003 0104 	and.w	r1, r3, #4
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69da      	ldr	r2, [r3, #28]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004316:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08a      	sub	sp, #40	; 0x28
 8004334:	af02      	add	r7, sp, #8
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	603b      	str	r3, [r7, #0]
 800433c:	4613      	mov	r3, r2
 800433e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004344:	2300      	movs	r3, #0
 8004346:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <HAL_SPI_Transmit+0x26>
 8004352:	2302      	movs	r3, #2
 8004354:	e125      	b.n	80045a2 <HAL_SPI_Transmit+0x272>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800435e:	f7fe fa4f 	bl	8002800 <HAL_GetTick>
 8004362:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b01      	cmp	r3, #1
 800436e:	d002      	beq.n	8004376 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004370:	2302      	movs	r3, #2
 8004372:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004374:	e10c      	b.n	8004590 <HAL_SPI_Transmit+0x260>
  }

  if((pData == NULL ) || (Size == 0))
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <HAL_SPI_Transmit+0x52>
 800437c:	88fb      	ldrh	r3, [r7, #6]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d102      	bne.n	8004388 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004386:	e103      	b.n	8004590 <HAL_SPI_Transmit+0x260>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2203      	movs	r2, #3
 800438c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	88fa      	ldrh	r2, [r7, #6]
 80043a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	88fa      	ldrh	r2, [r7, #6]
 80043a6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ce:	d107      	bne.n	80043e0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ea:	2b40      	cmp	r3, #64	; 0x40
 80043ec:	d007      	beq.n	80043fe <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004406:	d147      	bne.n	8004498 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d004      	beq.n	800441a <HAL_SPI_Transmit+0xea>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b01      	cmp	r3, #1
 8004418:	d138      	bne.n	800448c <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	881a      	ldrh	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	3302      	adds	r3, #2
 8004428:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800442e:	b29b      	uxth	r3, r3
 8004430:	3b01      	subs	r3, #1
 8004432:	b29a      	uxth	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004438:	e028      	b.n	800448c <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b02      	cmp	r3, #2
 8004446:	d10f      	bne.n	8004468 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	881a      	ldrh	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	3302      	adds	r3, #2
 8004456:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	86da      	strh	r2, [r3, #54]	; 0x36
 8004466:	e011      	b.n	800448c <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00b      	beq.n	8004486 <HAL_SPI_Transmit+0x156>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004474:	d00a      	beq.n	800448c <HAL_SPI_Transmit+0x15c>
 8004476:	f7fe f9c3 	bl	8002800 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d802      	bhi.n	800448c <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	77fb      	strb	r3, [r7, #31]
          goto error;
 800448a:	e081      	b.n	8004590 <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1d1      	bne.n	800443a <HAL_SPI_Transmit+0x10a>
 8004496:	e048      	b.n	800452a <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d004      	beq.n	80044aa <HAL_SPI_Transmit+0x17a>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d13a      	bne.n	8004520 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	330c      	adds	r3, #12
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	7812      	ldrb	r2, [r2, #0]
 80044b4:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	3301      	adds	r3, #1
 80044ba:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80044ca:	e029      	b.n	8004520 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d110      	bne.n	80044fc <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	330c      	adds	r3, #12
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	7812      	ldrb	r2, [r2, #0]
 80044e4:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	3301      	adds	r3, #1
 80044ea:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80044fa:	e011      	b.n	8004520 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00b      	beq.n	800451a <HAL_SPI_Transmit+0x1ea>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004508:	d00a      	beq.n	8004520 <HAL_SPI_Transmit+0x1f0>
 800450a:	f7fe f979 	bl	8002800 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d802      	bhi.n	8004520 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800451e:	e037      	b.n	8004590 <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004524:	b29b      	uxth	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1d0      	bne.n	80044cc <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2201      	movs	r2, #1
 8004532:	2102      	movs	r1, #2
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 f838 	bl	80045aa <SPI_WaitFlagStateUntilTimeout>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d002      	beq.n	8004546 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004544:	e024      	b.n	8004590 <HAL_SPI_Transmit+0x260>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	6839      	ldr	r1, [r7, #0]
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 f896 	bl	800467c <SPI_CheckFlag_BSY>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2220      	movs	r2, #32
 800455e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004560:	e016      	b.n	8004590 <HAL_SPI_Transmit+0x260>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10a      	bne.n	8004580 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800456a:	2300      	movs	r3, #0
 800456c:	617b      	str	r3, [r7, #20]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	617b      	str	r3, [r7, #20]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	617b      	str	r3, [r7, #20]
 800457e:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <HAL_SPI_Transmit+0x25e>
  {
    errorcode = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	77fb      	strb	r3, [r7, #31]
 800458c:	e000      	b.n	8004590 <HAL_SPI_Transmit+0x260>
  }

error:
 800458e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3720      	adds	r7, #32
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b084      	sub	sp, #16
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	60f8      	str	r0, [r7, #12]
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	607a      	str	r2, [r7, #4]
 80045b6:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80045b8:	e04d      	b.n	8004656 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c0:	d049      	beq.n	8004656 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d007      	beq.n	80045d8 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80045c8:	f7fe f91a 	bl	8002800 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d83e      	bhi.n	8004656 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045e6:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045f0:	d111      	bne.n	8004616 <SPI_WaitFlagStateUntilTimeout+0x6c>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045fa:	d004      	beq.n	8004606 <SPI_WaitFlagStateUntilTimeout+0x5c>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004604:	d107      	bne.n	8004616 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004614:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800461e:	d110      	bne.n	8004642 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6819      	ldr	r1, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800462e:	400b      	ands	r3, r1
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004640:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e00e      	b.n	8004674 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	4013      	ands	r3, r2
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	429a      	cmp	r2, r3
 8004664:	d101      	bne.n	800466a <SPI_WaitFlagStateUntilTimeout+0xc0>
 8004666:	2201      	movs	r2, #1
 8004668:	e000      	b.n	800466c <SPI_WaitFlagStateUntilTimeout+0xc2>
 800466a:	2200      	movs	r2, #0
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	429a      	cmp	r2, r3
 8004670:	d1a3      	bne.n	80045ba <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af02      	add	r7, sp, #8
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2200      	movs	r2, #0
 8004690:	2180      	movs	r1, #128	; 0x80
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f7ff ff89 	bl	80045aa <SPI_WaitFlagStateUntilTimeout>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d007      	beq.n	80046ae <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a2:	f043 0220 	orr.w	r2, r3, #32
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e000      	b.n	80046b0 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <__libc_init_array>:
 80046b8:	b570      	push	{r4, r5, r6, lr}
 80046ba:	4d0d      	ldr	r5, [pc, #52]	; (80046f0 <__libc_init_array+0x38>)
 80046bc:	4c0d      	ldr	r4, [pc, #52]	; (80046f4 <__libc_init_array+0x3c>)
 80046be:	1b64      	subs	r4, r4, r5
 80046c0:	10a4      	asrs	r4, r4, #2
 80046c2:	2600      	movs	r6, #0
 80046c4:	42a6      	cmp	r6, r4
 80046c6:	d109      	bne.n	80046dc <__libc_init_array+0x24>
 80046c8:	4d0b      	ldr	r5, [pc, #44]	; (80046f8 <__libc_init_array+0x40>)
 80046ca:	4c0c      	ldr	r4, [pc, #48]	; (80046fc <__libc_init_array+0x44>)
 80046cc:	f000 f820 	bl	8004710 <_init>
 80046d0:	1b64      	subs	r4, r4, r5
 80046d2:	10a4      	asrs	r4, r4, #2
 80046d4:	2600      	movs	r6, #0
 80046d6:	42a6      	cmp	r6, r4
 80046d8:	d105      	bne.n	80046e6 <__libc_init_array+0x2e>
 80046da:	bd70      	pop	{r4, r5, r6, pc}
 80046dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80046e0:	4798      	blx	r3
 80046e2:	3601      	adds	r6, #1
 80046e4:	e7ee      	b.n	80046c4 <__libc_init_array+0xc>
 80046e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ea:	4798      	blx	r3
 80046ec:	3601      	adds	r6, #1
 80046ee:	e7f2      	b.n	80046d6 <__libc_init_array+0x1e>
 80046f0:	08004b40 	.word	0x08004b40
 80046f4:	08004b40 	.word	0x08004b40
 80046f8:	08004b40 	.word	0x08004b40
 80046fc:	08004b44 	.word	0x08004b44

08004700 <memset>:
 8004700:	4402      	add	r2, r0
 8004702:	4603      	mov	r3, r0
 8004704:	4293      	cmp	r3, r2
 8004706:	d100      	bne.n	800470a <memset+0xa>
 8004708:	4770      	bx	lr
 800470a:	f803 1b01 	strb.w	r1, [r3], #1
 800470e:	e7f9      	b.n	8004704 <memset+0x4>

08004710 <_init>:
 8004710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004712:	bf00      	nop
 8004714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004716:	bc08      	pop	{r3}
 8004718:	469e      	mov	lr, r3
 800471a:	4770      	bx	lr

0800471c <_fini>:
 800471c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471e:	bf00      	nop
 8004720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004722:	bc08      	pop	{r3}
 8004724:	469e      	mov	lr, r3
 8004726:	4770      	bx	lr
